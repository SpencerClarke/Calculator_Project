
Calculator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b74  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004d40  08004d40  00005d40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e00  08004e00  00006070  2**0
                  CONTENTS
  4 .ARM          00000008  08004e00  08004e00  00005e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e08  08004e08  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e08  08004e08  00005e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e0c  08004e0c  00005e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08004e10  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  20000070  08004e80  00006070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08004e80  00006104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a871  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f16  00000000  00000000  00010911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  00012828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008c7  00000000  00000000  00013398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020f33  00000000  00000000  00013c5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d3ea  00000000  00000000  00034b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000caf8e  00000000  00000000  00041f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010cf0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003118  00000000  00000000  0010cf50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00110068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000070 	.word	0x20000070
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004d24 	.word	0x08004d24

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000074 	.word	0x20000074
 8000204:	08004d24 	.word	0x08004d24

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295
 8000b18:	f000 b9a0 	b.w	8000e5c <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f83c 	bl	8000ba0 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__aeabi_d2lz>:
 8000b34:	b538      	push	{r3, r4, r5, lr}
 8000b36:	2200      	movs	r2, #0
 8000b38:	2300      	movs	r3, #0
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	460d      	mov	r5, r1
 8000b3e:	f7ff ff91 	bl	8000a64 <__aeabi_dcmplt>
 8000b42:	b928      	cbnz	r0, 8000b50 <__aeabi_d2lz+0x1c>
 8000b44:	4620      	mov	r0, r4
 8000b46:	4629      	mov	r1, r5
 8000b48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b4c:	f000 b80a 	b.w	8000b64 <__aeabi_d2ulz>
 8000b50:	4620      	mov	r0, r4
 8000b52:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b56:	f000 f805 	bl	8000b64 <__aeabi_d2ulz>
 8000b5a:	4240      	negs	r0, r0
 8000b5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b60:	bd38      	pop	{r3, r4, r5, pc}
 8000b62:	bf00      	nop

08000b64 <__aeabi_d2ulz>:
 8000b64:	b5d0      	push	{r4, r6, r7, lr}
 8000b66:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <__aeabi_d2ulz+0x34>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	4606      	mov	r6, r0
 8000b6c:	460f      	mov	r7, r1
 8000b6e:	f7ff fd07 	bl	8000580 <__aeabi_dmul>
 8000b72:	f000 f975 	bl	8000e60 <__aeabi_d2uiz>
 8000b76:	4604      	mov	r4, r0
 8000b78:	f7ff fc88 	bl	800048c <__aeabi_ui2d>
 8000b7c:	4b07      	ldr	r3, [pc, #28]	@ (8000b9c <__aeabi_d2ulz+0x38>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f7ff fcfe 	bl	8000580 <__aeabi_dmul>
 8000b84:	4602      	mov	r2, r0
 8000b86:	460b      	mov	r3, r1
 8000b88:	4630      	mov	r0, r6
 8000b8a:	4639      	mov	r1, r7
 8000b8c:	f7ff fb40 	bl	8000210 <__aeabi_dsub>
 8000b90:	f000 f966 	bl	8000e60 <__aeabi_d2uiz>
 8000b94:	4621      	mov	r1, r4
 8000b96:	bdd0      	pop	{r4, r6, r7, pc}
 8000b98:	3df00000 	.word	0x3df00000
 8000b9c:	41f00000 	.word	0x41f00000

08000ba0 <__udivmoddi4>:
 8000ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba4:	9d08      	ldr	r5, [sp, #32]
 8000ba6:	460c      	mov	r4, r1
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d14e      	bne.n	8000c4a <__udivmoddi4+0xaa>
 8000bac:	4694      	mov	ip, r2
 8000bae:	458c      	cmp	ip, r1
 8000bb0:	4686      	mov	lr, r0
 8000bb2:	fab2 f282 	clz	r2, r2
 8000bb6:	d962      	bls.n	8000c7e <__udivmoddi4+0xde>
 8000bb8:	b14a      	cbz	r2, 8000bce <__udivmoddi4+0x2e>
 8000bba:	f1c2 0320 	rsb	r3, r2, #32
 8000bbe:	4091      	lsls	r1, r2
 8000bc0:	fa20 f303 	lsr.w	r3, r0, r3
 8000bc4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc8:	4319      	orrs	r1, r3
 8000bca:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd2:	fa1f f68c 	uxth.w	r6, ip
 8000bd6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bda:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bde:	fb07 1114 	mls	r1, r7, r4, r1
 8000be2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be6:	fb04 f106 	mul.w	r1, r4, r6
 8000bea:	4299      	cmp	r1, r3
 8000bec:	d90a      	bls.n	8000c04 <__udivmoddi4+0x64>
 8000bee:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bf6:	f080 8112 	bcs.w	8000e1e <__udivmoddi4+0x27e>
 8000bfa:	4299      	cmp	r1, r3
 8000bfc:	f240 810f 	bls.w	8000e1e <__udivmoddi4+0x27e>
 8000c00:	3c02      	subs	r4, #2
 8000c02:	4463      	add	r3, ip
 8000c04:	1a59      	subs	r1, r3, r1
 8000c06:	fa1f f38e 	uxth.w	r3, lr
 8000c0a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c0e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c16:	fb00 f606 	mul.w	r6, r0, r6
 8000c1a:	429e      	cmp	r6, r3
 8000c1c:	d90a      	bls.n	8000c34 <__udivmoddi4+0x94>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c26:	f080 80fc 	bcs.w	8000e22 <__udivmoddi4+0x282>
 8000c2a:	429e      	cmp	r6, r3
 8000c2c:	f240 80f9 	bls.w	8000e22 <__udivmoddi4+0x282>
 8000c30:	4463      	add	r3, ip
 8000c32:	3802      	subs	r0, #2
 8000c34:	1b9b      	subs	r3, r3, r6
 8000c36:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	b11d      	cbz	r5, 8000c46 <__udivmoddi4+0xa6>
 8000c3e:	40d3      	lsrs	r3, r2
 8000c40:	2200      	movs	r2, #0
 8000c42:	e9c5 3200 	strd	r3, r2, [r5]
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d905      	bls.n	8000c5a <__udivmoddi4+0xba>
 8000c4e:	b10d      	cbz	r5, 8000c54 <__udivmoddi4+0xb4>
 8000c50:	e9c5 0100 	strd	r0, r1, [r5]
 8000c54:	2100      	movs	r1, #0
 8000c56:	4608      	mov	r0, r1
 8000c58:	e7f5      	b.n	8000c46 <__udivmoddi4+0xa6>
 8000c5a:	fab3 f183 	clz	r1, r3
 8000c5e:	2900      	cmp	r1, #0
 8000c60:	d146      	bne.n	8000cf0 <__udivmoddi4+0x150>
 8000c62:	42a3      	cmp	r3, r4
 8000c64:	d302      	bcc.n	8000c6c <__udivmoddi4+0xcc>
 8000c66:	4290      	cmp	r0, r2
 8000c68:	f0c0 80f0 	bcc.w	8000e4c <__udivmoddi4+0x2ac>
 8000c6c:	1a86      	subs	r6, r0, r2
 8000c6e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c72:	2001      	movs	r0, #1
 8000c74:	2d00      	cmp	r5, #0
 8000c76:	d0e6      	beq.n	8000c46 <__udivmoddi4+0xa6>
 8000c78:	e9c5 6300 	strd	r6, r3, [r5]
 8000c7c:	e7e3      	b.n	8000c46 <__udivmoddi4+0xa6>
 8000c7e:	2a00      	cmp	r2, #0
 8000c80:	f040 8090 	bne.w	8000da4 <__udivmoddi4+0x204>
 8000c84:	eba1 040c 	sub.w	r4, r1, ip
 8000c88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c8c:	fa1f f78c 	uxth.w	r7, ip
 8000c90:	2101      	movs	r1, #1
 8000c92:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c96:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c9a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ca2:	fb07 f006 	mul.w	r0, r7, r6
 8000ca6:	4298      	cmp	r0, r3
 8000ca8:	d908      	bls.n	8000cbc <__udivmoddi4+0x11c>
 8000caa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cae:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x11a>
 8000cb4:	4298      	cmp	r0, r3
 8000cb6:	f200 80cd 	bhi.w	8000e54 <__udivmoddi4+0x2b4>
 8000cba:	4626      	mov	r6, r4
 8000cbc:	1a1c      	subs	r4, r3, r0
 8000cbe:	fa1f f38e 	uxth.w	r3, lr
 8000cc2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cc6:	fb08 4410 	mls	r4, r8, r0, r4
 8000cca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cce:	fb00 f707 	mul.w	r7, r0, r7
 8000cd2:	429f      	cmp	r7, r3
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0x148>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cde:	d202      	bcs.n	8000ce6 <__udivmoddi4+0x146>
 8000ce0:	429f      	cmp	r7, r3
 8000ce2:	f200 80b0 	bhi.w	8000e46 <__udivmoddi4+0x2a6>
 8000ce6:	4620      	mov	r0, r4
 8000ce8:	1bdb      	subs	r3, r3, r7
 8000cea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cee:	e7a5      	b.n	8000c3c <__udivmoddi4+0x9c>
 8000cf0:	f1c1 0620 	rsb	r6, r1, #32
 8000cf4:	408b      	lsls	r3, r1
 8000cf6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cfa:	431f      	orrs	r7, r3
 8000cfc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d00:	fa04 f301 	lsl.w	r3, r4, r1
 8000d04:	ea43 030c 	orr.w	r3, r3, ip
 8000d08:	40f4      	lsrs	r4, r6
 8000d0a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d0e:	0c38      	lsrs	r0, r7, #16
 8000d10:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d14:	fbb4 fef0 	udiv	lr, r4, r0
 8000d18:	fa1f fc87 	uxth.w	ip, r7
 8000d1c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d20:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d24:	fb0e f90c 	mul.w	r9, lr, ip
 8000d28:	45a1      	cmp	r9, r4
 8000d2a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d2e:	d90a      	bls.n	8000d46 <__udivmoddi4+0x1a6>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d36:	f080 8084 	bcs.w	8000e42 <__udivmoddi4+0x2a2>
 8000d3a:	45a1      	cmp	r9, r4
 8000d3c:	f240 8081 	bls.w	8000e42 <__udivmoddi4+0x2a2>
 8000d40:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d44:	443c      	add	r4, r7
 8000d46:	eba4 0409 	sub.w	r4, r4, r9
 8000d4a:	fa1f f983 	uxth.w	r9, r3
 8000d4e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d52:	fb00 4413 	mls	r4, r0, r3, r4
 8000d56:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d5e:	45a4      	cmp	ip, r4
 8000d60:	d907      	bls.n	8000d72 <__udivmoddi4+0x1d2>
 8000d62:	193c      	adds	r4, r7, r4
 8000d64:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d68:	d267      	bcs.n	8000e3a <__udivmoddi4+0x29a>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	d965      	bls.n	8000e3a <__udivmoddi4+0x29a>
 8000d6e:	3b02      	subs	r3, #2
 8000d70:	443c      	add	r4, r7
 8000d72:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d76:	fba0 9302 	umull	r9, r3, r0, r2
 8000d7a:	eba4 040c 	sub.w	r4, r4, ip
 8000d7e:	429c      	cmp	r4, r3
 8000d80:	46ce      	mov	lr, r9
 8000d82:	469c      	mov	ip, r3
 8000d84:	d351      	bcc.n	8000e2a <__udivmoddi4+0x28a>
 8000d86:	d04e      	beq.n	8000e26 <__udivmoddi4+0x286>
 8000d88:	b155      	cbz	r5, 8000da0 <__udivmoddi4+0x200>
 8000d8a:	ebb8 030e 	subs.w	r3, r8, lr
 8000d8e:	eb64 040c 	sbc.w	r4, r4, ip
 8000d92:	fa04 f606 	lsl.w	r6, r4, r6
 8000d96:	40cb      	lsrs	r3, r1
 8000d98:	431e      	orrs	r6, r3
 8000d9a:	40cc      	lsrs	r4, r1
 8000d9c:	e9c5 6400 	strd	r6, r4, [r5]
 8000da0:	2100      	movs	r1, #0
 8000da2:	e750      	b.n	8000c46 <__udivmoddi4+0xa6>
 8000da4:	f1c2 0320 	rsb	r3, r2, #32
 8000da8:	fa20 f103 	lsr.w	r1, r0, r3
 8000dac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000db0:	fa24 f303 	lsr.w	r3, r4, r3
 8000db4:	4094      	lsls	r4, r2
 8000db6:	430c      	orrs	r4, r1
 8000db8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dbc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dc0:	fa1f f78c 	uxth.w	r7, ip
 8000dc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc8:	fb08 3110 	mls	r1, r8, r0, r3
 8000dcc:	0c23      	lsrs	r3, r4, #16
 8000dce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd2:	fb00 f107 	mul.w	r1, r0, r7
 8000dd6:	4299      	cmp	r1, r3
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x24c>
 8000dda:	eb1c 0303 	adds.w	r3, ip, r3
 8000dde:	f100 36ff 	add.w	r6, r0, #4294967295
 8000de2:	d22c      	bcs.n	8000e3e <__udivmoddi4+0x29e>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	d92a      	bls.n	8000e3e <__udivmoddi4+0x29e>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4463      	add	r3, ip
 8000dec:	1a5b      	subs	r3, r3, r1
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb3 f1f8 	udiv	r1, r3, r8
 8000df4:	fb08 3311 	mls	r3, r8, r1, r3
 8000df8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dfc:	fb01 f307 	mul.w	r3, r1, r7
 8000e00:	42a3      	cmp	r3, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x276>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e0c:	d213      	bcs.n	8000e36 <__udivmoddi4+0x296>
 8000e0e:	42a3      	cmp	r3, r4
 8000e10:	d911      	bls.n	8000e36 <__udivmoddi4+0x296>
 8000e12:	3902      	subs	r1, #2
 8000e14:	4464      	add	r4, ip
 8000e16:	1ae4      	subs	r4, r4, r3
 8000e18:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e1c:	e739      	b.n	8000c92 <__udivmoddi4+0xf2>
 8000e1e:	4604      	mov	r4, r0
 8000e20:	e6f0      	b.n	8000c04 <__udivmoddi4+0x64>
 8000e22:	4608      	mov	r0, r1
 8000e24:	e706      	b.n	8000c34 <__udivmoddi4+0x94>
 8000e26:	45c8      	cmp	r8, r9
 8000e28:	d2ae      	bcs.n	8000d88 <__udivmoddi4+0x1e8>
 8000e2a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e2e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e32:	3801      	subs	r0, #1
 8000e34:	e7a8      	b.n	8000d88 <__udivmoddi4+0x1e8>
 8000e36:	4631      	mov	r1, r6
 8000e38:	e7ed      	b.n	8000e16 <__udivmoddi4+0x276>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	e799      	b.n	8000d72 <__udivmoddi4+0x1d2>
 8000e3e:	4630      	mov	r0, r6
 8000e40:	e7d4      	b.n	8000dec <__udivmoddi4+0x24c>
 8000e42:	46d6      	mov	lr, sl
 8000e44:	e77f      	b.n	8000d46 <__udivmoddi4+0x1a6>
 8000e46:	4463      	add	r3, ip
 8000e48:	3802      	subs	r0, #2
 8000e4a:	e74d      	b.n	8000ce8 <__udivmoddi4+0x148>
 8000e4c:	4606      	mov	r6, r0
 8000e4e:	4623      	mov	r3, r4
 8000e50:	4608      	mov	r0, r1
 8000e52:	e70f      	b.n	8000c74 <__udivmoddi4+0xd4>
 8000e54:	3e02      	subs	r6, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	e730      	b.n	8000cbc <__udivmoddi4+0x11c>
 8000e5a:	bf00      	nop

08000e5c <__aeabi_idiv0>:
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop

08000e60 <__aeabi_d2uiz>:
 8000e60:	004a      	lsls	r2, r1, #1
 8000e62:	d211      	bcs.n	8000e88 <__aeabi_d2uiz+0x28>
 8000e64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000e68:	d211      	bcs.n	8000e8e <__aeabi_d2uiz+0x2e>
 8000e6a:	d50d      	bpl.n	8000e88 <__aeabi_d2uiz+0x28>
 8000e6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000e70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000e74:	d40e      	bmi.n	8000e94 <__aeabi_d2uiz+0x34>
 8000e76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000e82:	fa23 f002 	lsr.w	r0, r3, r2
 8000e86:	4770      	bx	lr
 8000e88:	f04f 0000 	mov.w	r0, #0
 8000e8c:	4770      	bx	lr
 8000e8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e92:	d102      	bne.n	8000e9a <__aeabi_d2uiz+0x3a>
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295
 8000e98:	4770      	bx	lr
 8000e9a:	f04f 0000 	mov.w	r0, #0
 8000e9e:	4770      	bx	lr

08000ea0 <button_matrix_init>:
		'(', ')', 'a', '\0', 'e',
		'6', '\0', '\0', 'd', 'n'
};

void button_matrix_init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
	for(int i = 0; i < sizeof(button_matrix_row_ports) / sizeof(button_matrix_row_ports[0]); i++)
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	e00e      	b.n	8000eca <button_matrix_init+0x2a>
	{
		HAL_GPIO_WritePin(button_matrix_row_ports[i], button_matrix_row_pins[i], GPIO_PIN_SET);
 8000eac:	4a0b      	ldr	r2, [pc, #44]	@ (8000edc <button_matrix_init+0x3c>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000eb4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee0 <button_matrix_init+0x40>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f002 fda0 	bl	8003a04 <HAL_GPIO_WritePin>
	for(int i = 0; i < sizeof(button_matrix_row_ports) / sizeof(button_matrix_row_ports[0]); i++)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b04      	cmp	r3, #4
 8000ece:	d9ed      	bls.n	8000eac <button_matrix_init+0xc>
	}
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	20000014 	.word	0x20000014

08000ee4 <button_matrix_is_pressed>:
int button_matrix_is_pressed(int row, int col)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
	int debounce_checks = 5;
 8000eee:	2305      	movs	r3, #5
 8000ef0:	613b      	str	r3, [r7, #16]
	int debounce_ms = 2;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(button_matrix_row_ports[row], button_matrix_row_pins[row], GPIO_PIN_RESET);
 8000ef6:	4a24      	ldr	r2, [pc, #144]	@ (8000f88 <button_matrix_is_pressed+0xa4>)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000efe:	4a23      	ldr	r2, [pc, #140]	@ (8000f8c <button_matrix_is_pressed+0xa8>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f06:	2200      	movs	r2, #0
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f002 fd7b 	bl	8003a04 <HAL_GPIO_WritePin>

	for(int i = 0; i < debounce_checks; i++)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	e023      	b.n	8000f5c <button_matrix_is_pressed+0x78>
	{
		if(HAL_GPIO_ReadPin(button_matrix_col_ports[col], button_matrix_col_pins[col]) == GPIO_PIN_RESET)
 8000f14:	4a1e      	ldr	r2, [pc, #120]	@ (8000f90 <button_matrix_is_pressed+0xac>)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f1c:	491d      	ldr	r1, [pc, #116]	@ (8000f94 <button_matrix_is_pressed+0xb0>)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f24:	4619      	mov	r1, r3
 8000f26:	4610      	mov	r0, r2
 8000f28:	f002 fd54 	bl	80039d4 <HAL_GPIO_ReadPin>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d10d      	bne.n	8000f4e <button_matrix_is_pressed+0x6a>
		{
			HAL_GPIO_WritePin(button_matrix_row_ports[row], button_matrix_row_pins[row], GPIO_PIN_SET);
 8000f32:	4a15      	ldr	r2, [pc, #84]	@ (8000f88 <button_matrix_is_pressed+0xa4>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f3a:	4a14      	ldr	r2, [pc, #80]	@ (8000f8c <button_matrix_is_pressed+0xa8>)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f42:	2201      	movs	r2, #1
 8000f44:	4619      	mov	r1, r3
 8000f46:	f002 fd5d 	bl	8003a04 <HAL_GPIO_WritePin>
			return 1;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e017      	b.n	8000f7e <button_matrix_is_pressed+0x9a>
		}
		HAL_Delay(debounce_ms);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f002 fa75 	bl	8003440 <HAL_Delay>
	for(int i = 0; i < debounce_checks; i++)
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	dbd7      	blt.n	8000f14 <button_matrix_is_pressed+0x30>
	}
	HAL_GPIO_WritePin(button_matrix_row_ports[row], button_matrix_row_pins[row], GPIO_PIN_SET);
 8000f64:	4a08      	ldr	r2, [pc, #32]	@ (8000f88 <button_matrix_is_pressed+0xa4>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f6c:	4a07      	ldr	r2, [pc, #28]	@ (8000f8c <button_matrix_is_pressed+0xa8>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f74:	2201      	movs	r2, #1
 8000f76:	4619      	mov	r1, r3
 8000f78:	f002 fd44 	bl	8003a04 <HAL_GPIO_WritePin>
	return 0;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000000 	.word	0x20000000
 8000f8c:	20000014 	.word	0x20000014
 8000f90:	20000020 	.word	0x20000020
 8000f94:	20000038 	.word	0x20000038

08000f98 <button_matrix_wait_for_unpress>:

void button_matrix_wait_for_unpress(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
	int is_pressed = 1;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	60fb      	str	r3, [r7, #12]
	while(is_pressed)
 8000fa2:	e01f      	b.n	8000fe4 <button_matrix_wait_for_unpress+0x4c>
	{
		is_pressed = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i < sizeof(button_matrix_row_pins)/sizeof(button_matrix_row_pins[0]); i++)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	e014      	b.n	8000fd8 <button_matrix_wait_for_unpress+0x40>
		{
			for(int j = 0; j < sizeof(button_matrix_col_pins)/sizeof(button_matrix_col_pins[0]); j++)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	e00b      	b.n	8000fcc <button_matrix_wait_for_unpress+0x34>
			{
				if(button_matrix_is_pressed(i, j))
 8000fb4:	6879      	ldr	r1, [r7, #4]
 8000fb6:	68b8      	ldr	r0, [r7, #8]
 8000fb8:	f7ff ff94 	bl	8000ee4 <button_matrix_is_pressed>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <button_matrix_wait_for_unpress+0x2e>
				{
					is_pressed = 1;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	60fb      	str	r3, [r7, #12]
			for(int j = 0; j < sizeof(button_matrix_col_pins)/sizeof(button_matrix_col_pins[0]); j++)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b05      	cmp	r3, #5
 8000fd0:	d9f0      	bls.n	8000fb4 <button_matrix_wait_for_unpress+0x1c>
		for(int i = 0; i < sizeof(button_matrix_row_pins)/sizeof(button_matrix_row_pins[0]); i++)
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	d9e7      	bls.n	8000fae <button_matrix_wait_for_unpress+0x16>
				}
			}
		}
		HAL_Delay(2);
 8000fde:	2002      	movs	r0, #2
 8000fe0:	f002 fa2e 	bl	8003440 <HAL_Delay>
	while(is_pressed)
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1dc      	bne.n	8000fa4 <button_matrix_wait_for_unpress+0xc>
	}
}
 8000fea:	bf00      	nop
 8000fec:	bf00      	nop
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <button_matrix_get_press>:

void button_matrix_get_press(int *row, int *col)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
	for(;;)
	{
		for(int i = 0; i < sizeof(button_matrix_row_pins)/sizeof(button_matrix_row_pins[0]); i++)
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	e019      	b.n	8001038 <button_matrix_get_press+0x44>
		{
			for(int j = 0; j < sizeof(button_matrix_col_pins)/sizeof(button_matrix_col_pins[0]); j++)
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	e010      	b.n	800102c <button_matrix_get_press+0x38>
			{
				if(button_matrix_is_pressed(i, j))
 800100a:	68b9      	ldr	r1, [r7, #8]
 800100c:	68f8      	ldr	r0, [r7, #12]
 800100e:	f7ff ff69 	bl	8000ee4 <button_matrix_is_pressed>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d006      	beq.n	8001026 <button_matrix_get_press+0x32>
				{
					*row = i;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	601a      	str	r2, [r3, #0]
					*col = j;
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	68ba      	ldr	r2, [r7, #8]
 8001022:	601a      	str	r2, [r3, #0]
					goto get_press_end;
 8001024:	e00c      	b.n	8001040 <button_matrix_get_press+0x4c>
			for(int j = 0; j < sizeof(button_matrix_col_pins)/sizeof(button_matrix_col_pins[0]); j++)
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	3301      	adds	r3, #1
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	2b05      	cmp	r3, #5
 8001030:	d9eb      	bls.n	800100a <button_matrix_get_press+0x16>
		for(int i = 0; i < sizeof(button_matrix_row_pins)/sizeof(button_matrix_row_pins[0]); i++)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	3301      	adds	r3, #1
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2b04      	cmp	r3, #4
 800103c:	d9e2      	bls.n	8001004 <button_matrix_get_press+0x10>
 800103e:	e7de      	b.n	8000ffe <button_matrix_get_press+0xa>
				}
			}
		}
	}
	get_press_end:
	button_matrix_wait_for_unpress();
 8001040:	f7ff ffaa 	bl	8000f98 <button_matrix_wait_for_unpress>
	HAL_Delay(2);
 8001044:	2002      	movs	r0, #2
 8001046:	f002 f9fb 	bl	8003440 <HAL_Delay>
}
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <button_matrix_get_key>:

char button_matrix_get_key(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
	int row, col;
	button_matrix_get_press(&row, &col);
 800105a:	463a      	mov	r2, r7
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	4611      	mov	r1, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ffc7 	bl	8000ff4 <button_matrix_get_press>
	return key_dict[(5-col) * 5 + row];
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	f1c3 0205 	rsb	r2, r3, #5
 800106c:	4613      	mov	r3, r2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	441a      	add	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	4a03      	ldr	r2, [pc, #12]	@ (8001084 <button_matrix_get_key+0x30>)
 8001078:	5cd3      	ldrb	r3, [r2, r3]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000044 	.word	0x20000044

08001088 <pause>:

int current_row;
int current_column;

static void pause(uint32_t msec)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	uint32_t start, current;
	start = current = HAL_GetTick();
 8001090:	f002 f9ca 	bl	8003428 <HAL_GetTick>
 8001094:	60f8      	str	r0, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	60bb      	str	r3, [r7, #8]
	while(current - start < msec)
 800109a:	e002      	b.n	80010a2 <pause+0x1a>
	{
		current = HAL_GetTick();
 800109c:	f002 f9c4 	bl	8003428 <HAL_GetTick>
 80010a0:	60f8      	str	r0, [r7, #12]
	while(current - start < msec)
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d8f6      	bhi.n	800109c <pause+0x14>
	}
}
 80010ae:	bf00      	nop
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <write_nibble>:

static void write_nibble(uint8_t nibble, int is_data)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	6039      	str	r1, [r7, #0]
 80010c2:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(HD44780U_RS_PORT, HD44780U_RS_PIN, is_data ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	bf14      	ite	ne
 80010ca:	2301      	movne	r3, #1
 80010cc:	2300      	moveq	r3, #0
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	461a      	mov	r2, r3
 80010d2:	2120      	movs	r1, #32
 80010d4:	4822      	ldr	r0, [pc, #136]	@ (8001160 <write_nibble+0xa8>)
 80010d6:	f002 fc95 	bl	8003a04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780U_D4_PORT, HD44780U_D4_PIN, nibble & 0x01 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	461a      	mov	r2, r3
 80010e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010e8:	481d      	ldr	r0, [pc, #116]	@ (8001160 <write_nibble+0xa8>)
 80010ea:	f002 fc8b 	bl	8003a04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780U_D5_PORT, HD44780U_D5_PIN, nibble & 0x02 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	105b      	asrs	r3, r3, #1
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	461a      	mov	r2, r3
 80010fc:	2180      	movs	r1, #128	@ 0x80
 80010fe:	4819      	ldr	r0, [pc, #100]	@ (8001164 <write_nibble+0xac>)
 8001100:	f002 fc80 	bl	8003a04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780U_D6_PORT, HD44780U_D6_PIN, nibble & 0x04 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	109b      	asrs	r3, r3, #2
 8001108:	b2db      	uxtb	r3, r3
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	b2db      	uxtb	r3, r3
 8001110:	461a      	mov	r2, r3
 8001112:	2140      	movs	r1, #64	@ 0x40
 8001114:	4814      	ldr	r0, [pc, #80]	@ (8001168 <write_nibble+0xb0>)
 8001116:	f002 fc75 	bl	8003a04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780U_D7_PORT, HD44780U_D7_PIN, nibble & 0x08 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	10db      	asrs	r3, r3, #3
 800111e:	b2db      	uxtb	r3, r3
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	b2db      	uxtb	r3, r3
 8001126:	461a      	mov	r2, r3
 8001128:	2180      	movs	r1, #128	@ 0x80
 800112a:	480d      	ldr	r0, [pc, #52]	@ (8001160 <write_nibble+0xa8>)
 800112c:	f002 fc6a 	bl	8003a04 <HAL_GPIO_WritePin>
	pause(1);
 8001130:	2001      	movs	r0, #1
 8001132:	f7ff ffa9 	bl	8001088 <pause>
	HAL_GPIO_WritePin(HD44780U_E_PORT, HD44780U_E_PIN, GPIO_PIN_SET);
 8001136:	2201      	movs	r2, #1
 8001138:	2140      	movs	r1, #64	@ 0x40
 800113a:	4809      	ldr	r0, [pc, #36]	@ (8001160 <write_nibble+0xa8>)
 800113c:	f002 fc62 	bl	8003a04 <HAL_GPIO_WritePin>
	pause(1);
 8001140:	2001      	movs	r0, #1
 8001142:	f7ff ffa1 	bl	8001088 <pause>
	HAL_GPIO_WritePin(HD44780U_E_PORT, HD44780U_E_PIN, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	2140      	movs	r1, #64	@ 0x40
 800114a:	4805      	ldr	r0, [pc, #20]	@ (8001160 <write_nibble+0xa8>)
 800114c:	f002 fc5a 	bl	8003a04 <HAL_GPIO_WritePin>
	pause(1);
 8001150:	2001      	movs	r0, #1
 8001152:	f7ff ff99 	bl	8001088 <pause>

}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40020000 	.word	0x40020000
 8001164:	40020800 	.word	0x40020800
 8001168:	40020400 	.word	0x40020400

0800116c <write_byte>:

static void write_byte(uint8_t byte, int is_data)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	71fb      	strb	r3, [r7, #7]
	write_nibble(byte >> 4, is_data);
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	091b      	lsrs	r3, r3, #4
 800117c:	b2db      	uxtb	r3, r3
 800117e:	6839      	ldr	r1, [r7, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff99 	bl	80010b8 <write_nibble>
	write_nibble(byte & 0x0F, is_data);
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	f003 030f 	and.w	r3, r3, #15
 800118c:	b2db      	uxtb	r3, r3
 800118e:	6839      	ldr	r1, [r7, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff91 	bl	80010b8 <write_nibble>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <HD44780U_Init>:

void HD44780U_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	current_row = 0;
 80011a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001214 <HD44780U_Init+0x74>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
	current_column = 0;
 80011aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001218 <HD44780U_Init+0x78>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
	pause(40);
 80011b0:	2028      	movs	r0, #40	@ 0x28
 80011b2:	f7ff ff69 	bl	8001088 <pause>
	write_nibble(0x03, 0); /* wake up */
 80011b6:	2100      	movs	r1, #0
 80011b8:	2003      	movs	r0, #3
 80011ba:	f7ff ff7d 	bl	80010b8 <write_nibble>
	pause(5);
 80011be:	2005      	movs	r0, #5
 80011c0:	f7ff ff62 	bl	8001088 <pause>
	write_nibble(0x03, 0); /* wake up */
 80011c4:	2100      	movs	r1, #0
 80011c6:	2003      	movs	r0, #3
 80011c8:	f7ff ff76 	bl	80010b8 <write_nibble>
	pause(1);
 80011cc:	2001      	movs	r0, #1
 80011ce:	f7ff ff5b 	bl	8001088 <pause>
	write_nibble(0x03, 0); /* wake up */
 80011d2:	2100      	movs	r1, #0
 80011d4:	2003      	movs	r0, #3
 80011d6:	f7ff ff6f 	bl	80010b8 <write_nibble>
	pause(1);
 80011da:	2001      	movs	r0, #1
 80011dc:	f7ff ff54 	bl	8001088 <pause>
	write_nibble(0x02, 0); /* Function set: 4 bit interface */
 80011e0:	2100      	movs	r1, #0
 80011e2:	2002      	movs	r0, #2
 80011e4:	f7ff ff68 	bl	80010b8 <write_nibble>
	write_byte(0x28, 0); /* Function set: 4-bit interface, 2-line, 5x8 dots */
 80011e8:	2100      	movs	r1, #0
 80011ea:	2028      	movs	r0, #40	@ 0x28
 80011ec:	f7ff ffbe 	bl	800116c <write_byte>
	write_byte(0x08, 0); /* Display off */
 80011f0:	2100      	movs	r1, #0
 80011f2:	2008      	movs	r0, #8
 80011f4:	f7ff ffba 	bl	800116c <write_byte>
	write_byte(0x01, 0); /* Display clear */
 80011f8:	2100      	movs	r1, #0
 80011fa:	2001      	movs	r0, #1
 80011fc:	f7ff ffb6 	bl	800116c <write_byte>
	write_byte(0x06, 0); /* Entry mode set, move cursor right, no shift */
 8001200:	2100      	movs	r1, #0
 8001202:	2006      	movs	r0, #6
 8001204:	f7ff ffb2 	bl	800116c <write_byte>
	write_byte(0x0F, 0); /* Display on, blink and shift */
 8001208:	2100      	movs	r1, #0
 800120a:	200f      	movs	r0, #15
 800120c:	f7ff ffae 	bl	800116c <write_byte>
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	2000008c 	.word	0x2000008c
 8001218:	20000090 	.word	0x20000090

0800121c <HD44780U_Write_At_Cursor>:


int HD44780U_Write_At_Cursor(unsigned char c)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
	write_byte(c, 1);
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	2101      	movs	r1, #1
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff ff9e 	bl	800116c <write_byte>

	current_column++;
 8001230:	4b12      	ldr	r3, [pc, #72]	@ (800127c <HD44780U_Write_At_Cursor+0x60>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	3301      	adds	r3, #1
 8001236:	4a11      	ldr	r2, [pc, #68]	@ (800127c <HD44780U_Write_At_Cursor+0x60>)
 8001238:	6013      	str	r3, [r2, #0]
	if(current_column == 20)
 800123a:	4b10      	ldr	r3, [pc, #64]	@ (800127c <HD44780U_Write_At_Cursor+0x60>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b14      	cmp	r3, #20
 8001240:	d116      	bne.n	8001270 <HD44780U_Write_At_Cursor+0x54>
	{
		current_column = 0;
 8001242:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <HD44780U_Write_At_Cursor+0x60>)
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
		current_row = (current_row + 1) % 4;
 8001248:	4b0d      	ldr	r3, [pc, #52]	@ (8001280 <HD44780U_Write_At_Cursor+0x64>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	3301      	adds	r3, #1
 800124e:	425a      	negs	r2, r3
 8001250:	f003 0303 	and.w	r3, r3, #3
 8001254:	f002 0203 	and.w	r2, r2, #3
 8001258:	bf58      	it	pl
 800125a:	4253      	negpl	r3, r2
 800125c:	4a08      	ldr	r2, [pc, #32]	@ (8001280 <HD44780U_Write_At_Cursor+0x64>)
 800125e:	6013      	str	r3, [r2, #0]
		HD44780U_Move_Cursor(current_row, current_column);
 8001260:	4b07      	ldr	r3, [pc, #28]	@ (8001280 <HD44780U_Write_At_Cursor+0x64>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a05      	ldr	r2, [pc, #20]	@ (800127c <HD44780U_Write_At_Cursor+0x60>)
 8001266:	6812      	ldr	r2, [r2, #0]
 8001268:	4611      	mov	r1, r2
 800126a:	4618      	mov	r0, r3
 800126c:	f000 f88a 	bl	8001384 <HD44780U_Move_Cursor>
	}

	return 1;
 8001270:	2301      	movs	r3, #1
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000090 	.word	0x20000090
 8001280:	2000008c 	.word	0x2000008c

08001284 <HD44780U_Delete_At_Cursor>:

int HD44780U_Delete_At_Cursor(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
	if(current_column == 0 && current_row == 0)
 800128a:	4b2c      	ldr	r3, [pc, #176]	@ (800133c <HD44780U_Delete_At_Cursor+0xb8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d106      	bne.n	80012a0 <HD44780U_Delete_At_Cursor+0x1c>
 8001292:	4b2b      	ldr	r3, [pc, #172]	@ (8001340 <HD44780U_Delete_At_Cursor+0xbc>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d102      	bne.n	80012a0 <HD44780U_Delete_At_Cursor+0x1c>
	{
		return -1;
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	e049      	b.n	8001334 <HD44780U_Delete_At_Cursor+0xb0>
	}
	if(current_column == 0)
 80012a0:	4b26      	ldr	r3, [pc, #152]	@ (800133c <HD44780U_Delete_At_Cursor+0xb8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d127      	bne.n	80012f8 <HD44780U_Delete_At_Cursor+0x74>
	{
		int row_temp, column_temp;

		current_row--;
 80012a8:	4b25      	ldr	r3, [pc, #148]	@ (8001340 <HD44780U_Delete_At_Cursor+0xbc>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	3b01      	subs	r3, #1
 80012ae:	4a24      	ldr	r2, [pc, #144]	@ (8001340 <HD44780U_Delete_At_Cursor+0xbc>)
 80012b0:	6013      	str	r3, [r2, #0]
		current_column = 19;
 80012b2:	4b22      	ldr	r3, [pc, #136]	@ (800133c <HD44780U_Delete_At_Cursor+0xb8>)
 80012b4:	2213      	movs	r2, #19
 80012b6:	601a      	str	r2, [r3, #0]

		row_temp = current_row;
 80012b8:	4b21      	ldr	r3, [pc, #132]	@ (8001340 <HD44780U_Delete_At_Cursor+0xbc>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	607b      	str	r3, [r7, #4]
		column_temp = current_column;
 80012be:	4b1f      	ldr	r3, [pc, #124]	@ (800133c <HD44780U_Delete_At_Cursor+0xb8>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	603b      	str	r3, [r7, #0]

		HD44780U_Move_Cursor(current_row, current_column);
 80012c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001340 <HD44780U_Delete_At_Cursor+0xbc>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a1c      	ldr	r2, [pc, #112]	@ (800133c <HD44780U_Delete_At_Cursor+0xb8>)
 80012ca:	6812      	ldr	r2, [r2, #0]
 80012cc:	4611      	mov	r1, r2
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 f858 	bl	8001384 <HD44780U_Move_Cursor>
		HD44780U_Write_At_Cursor(' ');
 80012d4:	2020      	movs	r0, #32
 80012d6:	f7ff ffa1 	bl	800121c <HD44780U_Write_At_Cursor>

		current_row = row_temp;
 80012da:	4a19      	ldr	r2, [pc, #100]	@ (8001340 <HD44780U_Delete_At_Cursor+0xbc>)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6013      	str	r3, [r2, #0]
		current_column = column_temp;
 80012e0:	4a16      	ldr	r2, [pc, #88]	@ (800133c <HD44780U_Delete_At_Cursor+0xb8>)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	6013      	str	r3, [r2, #0]
		HD44780U_Move_Cursor(current_row, current_column);
 80012e6:	4b16      	ldr	r3, [pc, #88]	@ (8001340 <HD44780U_Delete_At_Cursor+0xbc>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a14      	ldr	r2, [pc, #80]	@ (800133c <HD44780U_Delete_At_Cursor+0xb8>)
 80012ec:	6812      	ldr	r2, [r2, #0]
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 f847 	bl	8001384 <HD44780U_Move_Cursor>
 80012f6:	e01c      	b.n	8001332 <HD44780U_Delete_At_Cursor+0xae>
	}
	else
	{
		current_column--;
 80012f8:	4b10      	ldr	r3, [pc, #64]	@ (800133c <HD44780U_Delete_At_Cursor+0xb8>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	3b01      	subs	r3, #1
 80012fe:	4a0f      	ldr	r2, [pc, #60]	@ (800133c <HD44780U_Delete_At_Cursor+0xb8>)
 8001300:	6013      	str	r3, [r2, #0]
		HD44780U_Move_Cursor(current_row, current_column);
 8001302:	4b0f      	ldr	r3, [pc, #60]	@ (8001340 <HD44780U_Delete_At_Cursor+0xbc>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a0d      	ldr	r2, [pc, #52]	@ (800133c <HD44780U_Delete_At_Cursor+0xb8>)
 8001308:	6812      	ldr	r2, [r2, #0]
 800130a:	4611      	mov	r1, r2
 800130c:	4618      	mov	r0, r3
 800130e:	f000 f839 	bl	8001384 <HD44780U_Move_Cursor>
		HD44780U_Write_At_Cursor(' ');
 8001312:	2020      	movs	r0, #32
 8001314:	f7ff ff82 	bl	800121c <HD44780U_Write_At_Cursor>
		current_column--;
 8001318:	4b08      	ldr	r3, [pc, #32]	@ (800133c <HD44780U_Delete_At_Cursor+0xb8>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	3b01      	subs	r3, #1
 800131e:	4a07      	ldr	r2, [pc, #28]	@ (800133c <HD44780U_Delete_At_Cursor+0xb8>)
 8001320:	6013      	str	r3, [r2, #0]
		HD44780U_Move_Cursor(current_row, current_column);
 8001322:	4b07      	ldr	r3, [pc, #28]	@ (8001340 <HD44780U_Delete_At_Cursor+0xbc>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a05      	ldr	r2, [pc, #20]	@ (800133c <HD44780U_Delete_At_Cursor+0xb8>)
 8001328:	6812      	ldr	r2, [r2, #0]
 800132a:	4611      	mov	r1, r2
 800132c:	4618      	mov	r0, r3
 800132e:	f000 f829 	bl	8001384 <HD44780U_Move_Cursor>
	}
	return 1;
 8001332:	2301      	movs	r3, #1
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000090 	.word	0x20000090
 8001340:	2000008c 	.word	0x2000008c

08001344 <HD44780U_Write_Line>:
int HD44780U_Write_Line(int row, const char *string)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
	if(row > 3)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b03      	cmp	r3, #3
 8001352:	dd02      	ble.n	800135a <HD44780U_Write_Line+0x16>
	{
		return -1;
 8001354:	f04f 33ff 	mov.w	r3, #4294967295
 8001358:	e010      	b.n	800137c <HD44780U_Write_Line+0x38>
	}
	HD44780U_Move_Cursor(row, 0);
 800135a:	2100      	movs	r1, #0
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 f811 	bl	8001384 <HD44780U_Move_Cursor>

	while(*string != '\0')
 8001362:	e006      	b.n	8001372 <HD44780U_Write_Line+0x2e>
	{
		HD44780U_Write_At_Cursor((unsigned char)*(string++));
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	1c5a      	adds	r2, r3, #1
 8001368:	603a      	str	r2, [r7, #0]
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff55 	bl	800121c <HD44780U_Write_At_Cursor>
	while(*string != '\0')
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f4      	bne.n	8001364 <HD44780U_Write_Line+0x20>
	}

	return 1;
 800137a:	2301      	movs	r3, #1
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <HD44780U_Move_Cursor>:

int HD44780U_Move_Cursor(int row, int column)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
	uint8_t address = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	73fb      	strb	r3, [r7, #15]

	if(row > 3 || column > 19)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b03      	cmp	r3, #3
 8001396:	dc02      	bgt.n	800139e <HD44780U_Move_Cursor+0x1a>
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	2b13      	cmp	r3, #19
 800139c:	dd02      	ble.n	80013a4 <HD44780U_Move_Cursor+0x20>
	{
		return -1;
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
 80013a2:	e02d      	b.n	8001400 <HD44780U_Move_Cursor+0x7c>
	}
	switch(row)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	d816      	bhi.n	80013d8 <HD44780U_Move_Cursor+0x54>
 80013aa:	a201      	add	r2, pc, #4	@ (adr r2, 80013b0 <HD44780U_Move_Cursor+0x2c>)
 80013ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b0:	080013c1 	.word	0x080013c1
 80013b4:	080013c7 	.word	0x080013c7
 80013b8:	080013cd 	.word	0x080013cd
 80013bc:	080013d3 	.word	0x080013d3
	{
		case 0:
			address = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	73fb      	strb	r3, [r7, #15]
			break;
 80013c4:	e008      	b.n	80013d8 <HD44780U_Move_Cursor+0x54>
		case 1:
			address = 40;
 80013c6:	2328      	movs	r3, #40	@ 0x28
 80013c8:	73fb      	strb	r3, [r7, #15]
			break;
 80013ca:	e005      	b.n	80013d8 <HD44780U_Move_Cursor+0x54>
		case 2:
			address = 20;
 80013cc:	2314      	movs	r3, #20
 80013ce:	73fb      	strb	r3, [r7, #15]
			break;
 80013d0:	e002      	b.n	80013d8 <HD44780U_Move_Cursor+0x54>
		case 3:
			address = 0x54;
 80013d2:	2354      	movs	r3, #84	@ 0x54
 80013d4:	73fb      	strb	r3, [r7, #15]
			break;
 80013d6:	bf00      	nop
	}
	address += column;
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	4413      	add	r3, r2
 80013e0:	73fb      	strb	r3, [r7, #15]

	write_byte(address | 0x80, 0);
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
 80013e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff febd 	bl	800116c <write_byte>

	current_row = row;
 80013f2:	4a05      	ldr	r2, [pc, #20]	@ (8001408 <HD44780U_Move_Cursor+0x84>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6013      	str	r3, [r2, #0]
	current_column = column;
 80013f8:	4a04      	ldr	r2, [pc, #16]	@ (800140c <HD44780U_Move_Cursor+0x88>)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	6013      	str	r3, [r2, #0]

	return 1;
 80013fe:	2301      	movs	r3, #1
}
 8001400:	4618      	mov	r0, r3
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	2000008c 	.word	0x2000008c
 800140c:	20000090 	.word	0x20000090

08001410 <HD44780U_Clear>:

void HD44780U_Clear(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	write_byte(0x01, 0);
 8001414:	2100      	movs	r1, #0
 8001416:	2001      	movs	r0, #1
 8001418:	f7ff fea8 	bl	800116c <write_byte>
	return;
 800141c:	bf00      	nop
}
 800141e:	bd80      	pop	{r7, pc}

08001420 <print_int>:
void print_int(int n, int min_digits)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08e      	sub	sp, #56	@ 0x38
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
        char buffer[32];
        int i;
        int n_copy;
        int digits_buffered = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if(n >= -0.0f && n <= 0.0f)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	ee07 3a90 	vmov	s15, r3
 8001434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001438:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800143c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001440:	db0d      	blt.n	800145e <print_int+0x3e>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	ee07 3a90 	vmov	s15, r3
 8001448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800144c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001454:	d803      	bhi.n	800145e <print_int+0x3e>
        {
                HD44780U_Write_At_Cursor('0');
 8001456:	2030      	movs	r0, #48	@ 0x30
 8001458:	f7ff fee0 	bl	800121c <HD44780U_Write_At_Cursor>
 800145c:	e066      	b.n	800152c <print_int+0x10c>
                return;
        }

        n_copy = n;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	633b      	str	r3, [r7, #48]	@ 0x30
        buffer[31] = '\0';
 8001462:	2300      	movs	r3, #0
 8001464:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        for(i = 30; n_copy != 0; i--)
 8001468:	231e      	movs	r3, #30
 800146a:	637b      	str	r3, [r7, #52]	@ 0x34
 800146c:	e02a      	b.n	80014c4 <print_int+0xa4>
        {
                int digit = n_copy % 10;
 800146e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001470:	4b30      	ldr	r3, [pc, #192]	@ (8001534 <print_int+0x114>)
 8001472:	fb83 1302 	smull	r1, r3, r3, r2
 8001476:	1099      	asrs	r1, r3, #2
 8001478:	17d3      	asrs	r3, r2, #31
 800147a:	1ac9      	subs	r1, r1, r3
 800147c:	460b      	mov	r3, r1
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	440b      	add	r3, r1
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	62bb      	str	r3, [r7, #40]	@ 0x28
                if(digit < 0)
 8001488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800148a:	2b00      	cmp	r3, #0
 800148c:	da02      	bge.n	8001494 <print_int+0x74>
                {
                        digit = -digit;
 800148e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001490:	425b      	negs	r3, r3
 8001492:	62bb      	str	r3, [r7, #40]	@ 0x28
                }
                buffer[i] = '0' + digit;
 8001494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001496:	b2db      	uxtb	r3, r3
 8001498:	3330      	adds	r3, #48	@ 0x30
 800149a:	b2d9      	uxtb	r1, r3
 800149c:	f107 0208 	add.w	r2, r7, #8
 80014a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014a2:	4413      	add	r3, r2
 80014a4:	460a      	mov	r2, r1
 80014a6:	701a      	strb	r2, [r3, #0]
                digits_buffered++;
 80014a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014aa:	3301      	adds	r3, #1
 80014ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
                n_copy /= 10;
 80014ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014b0:	4a20      	ldr	r2, [pc, #128]	@ (8001534 <print_int+0x114>)
 80014b2:	fb82 1203 	smull	r1, r2, r2, r3
 80014b6:	1092      	asrs	r2, r2, #2
 80014b8:	17db      	asrs	r3, r3, #31
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	633b      	str	r3, [r7, #48]	@ 0x30
        for(i = 30; n_copy != 0; i--)
 80014be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014c0:	3b01      	subs	r3, #1
 80014c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80014c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1d1      	bne.n	800146e <print_int+0x4e>
        }

        while(digits_buffered < min_digits)
 80014ca:	e00a      	b.n	80014e2 <print_int+0xc2>
		{
			buffer[i--] = '0';
 80014cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014ce:	1e5a      	subs	r2, r3, #1
 80014d0:	637a      	str	r2, [r7, #52]	@ 0x34
 80014d2:	3338      	adds	r3, #56	@ 0x38
 80014d4:	443b      	add	r3, r7
 80014d6:	2230      	movs	r2, #48	@ 0x30
 80014d8:	f803 2c30 	strb.w	r2, [r3, #-48]
			digits_buffered++;
 80014dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014de:	3301      	adds	r3, #1
 80014e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while(digits_buffered < min_digits)
 80014e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	dbf0      	blt.n	80014cc <print_int+0xac>
		}
        if(n < 0)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	da07      	bge.n	8001500 <print_int+0xe0>
        {
                buffer[i--] = '-';
 80014f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014f2:	1e5a      	subs	r2, r3, #1
 80014f4:	637a      	str	r2, [r7, #52]	@ 0x34
 80014f6:	3338      	adds	r3, #56	@ 0x38
 80014f8:	443b      	add	r3, r7
 80014fa:	222d      	movs	r2, #45	@ 0x2d
 80014fc:	f803 2c30 	strb.w	r2, [r3, #-48]
        }
        for(i = i + 1; buffer[i] != '\0'; i++)
 8001500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001502:	3301      	adds	r3, #1
 8001504:	637b      	str	r3, [r7, #52]	@ 0x34
 8001506:	e00a      	b.n	800151e <print_int+0xfe>
        {
                HD44780U_Write_At_Cursor(buffer[i]);
 8001508:	f107 0208 	add.w	r2, r7, #8
 800150c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800150e:	4413      	add	r3, r2
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fe82 	bl	800121c <HD44780U_Write_At_Cursor>
        for(i = i + 1; buffer[i] != '\0'; i++)
 8001518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800151a:	3301      	adds	r3, #1
 800151c:	637b      	str	r3, [r7, #52]	@ 0x34
 800151e:	f107 0208 	add.w	r2, r7, #8
 8001522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001524:	4413      	add	r3, r2
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1ed      	bne.n	8001508 <print_int+0xe8>
        }
}
 800152c:	3738      	adds	r7, #56	@ 0x38
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	66666667 	.word	0x66666667

08001538 <HD44780U_Write_Double>:

void HD44780U_Write_Double(double d)
{
 8001538:	b5b0      	push	{r4, r5, r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	ed87 0b00 	vstr	d0, [r7]
        int power = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
        if(d == 0.0)
 8001546:	f04f 0200 	mov.w	r2, #0
 800154a:	f04f 0300 	mov.w	r3, #0
 800154e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001552:	f7ff fa7d 	bl	8000a50 <__aeabi_dcmpeq>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d003      	beq.n	8001564 <HD44780U_Write_Double+0x2c>
        {
                HD44780U_Write_At_Cursor('0');
 800155c:	2030      	movs	r0, #48	@ 0x30
 800155e:	f7ff fe5d 	bl	800121c <HD44780U_Write_At_Cursor>
                return;
 8001562:	e0d9      	b.n	8001718 <HD44780U_Write_Double+0x1e0>
        }
        if(d < 0)
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001570:	f7ff fa78 	bl	8000a64 <__aeabi_dcmplt>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d008      	beq.n	800158c <HD44780U_Write_Double+0x54>
        {
                HD44780U_Write_At_Cursor('-');
 800157a:	202d      	movs	r0, #45	@ 0x2d
 800157c:	f7ff fe4e 	bl	800121c <HD44780U_Write_At_Cursor>
                d = -d;
 8001580:	683c      	ldr	r4, [r7, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001588:	e9c7 4500 	strd	r4, r5, [r7]
        }
        if(d < 100000000 && d > 0.001)
 800158c:	a368      	add	r3, pc, #416	@ (adr r3, 8001730 <HD44780U_Write_Double+0x1f8>)
 800158e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001592:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001596:	f7ff fa65 	bl	8000a64 <__aeabi_dcmplt>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d03c      	beq.n	800161a <HD44780U_Write_Double+0xe2>
 80015a0:	a365      	add	r3, pc, #404	@ (adr r3, 8001738 <HD44780U_Write_Double+0x200>)
 80015a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015aa:	f7ff fa79 	bl	8000aa0 <__aeabi_dcmpgt>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d032      	beq.n	800161a <HD44780U_Write_Double+0xe2>
        {
                print_int((int)d, 1);
 80015b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015b8:	f7ff fa7c 	bl	8000ab4 <__aeabi_d2iz>
 80015bc:	4603      	mov	r3, r0
 80015be:	2101      	movs	r1, #1
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff2d 	bl	8001420 <print_int>
                HD44780U_Write_At_Cursor('.');
 80015c6:	202e      	movs	r0, #46	@ 0x2e
 80015c8:	f7ff fe28 	bl	800121c <HD44780U_Write_At_Cursor>
                d = d - (int)d;
 80015cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015d0:	f7ff fa70 	bl	8000ab4 <__aeabi_d2iz>
 80015d4:	4603      	mov	r3, r0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe ff68 	bl	80004ac <__aeabi_i2d>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015e4:	f7fe fe14 	bl	8000210 <__aeabi_dsub>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	e9c7 2300 	strd	r2, r3, [r7]
                d *= 10000;
 80015f0:	a34b      	add	r3, pc, #300	@ (adr r3, 8001720 <HD44780U_Write_Double+0x1e8>)
 80015f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015fa:	f7fe ffc1 	bl	8000580 <__aeabi_dmul>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	e9c7 2300 	strd	r2, r3, [r7]
                print_int((int)d, 4);
 8001606:	e9d7 0100 	ldrd	r0, r1, [r7]
 800160a:	f7ff fa53 	bl	8000ab4 <__aeabi_d2iz>
 800160e:	4603      	mov	r3, r0
 8001610:	2104      	movs	r1, #4
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ff04 	bl	8001420 <print_int>
                return;
 8001618:	e07e      	b.n	8001718 <HD44780U_Write_Double+0x1e0>
        }

        while(d > 10 || d < 1)
 800161a:	e030      	b.n	800167e <HD44780U_Write_Double+0x146>
        {
                if(d > 10)
 800161c:	f04f 0200 	mov.w	r2, #0
 8001620:	4b41      	ldr	r3, [pc, #260]	@ (8001728 <HD44780U_Write_Double+0x1f0>)
 8001622:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001626:	f7ff fa3b 	bl	8000aa0 <__aeabi_dcmpgt>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d00e      	beq.n	800164e <HD44780U_Write_Double+0x116>
                {
                        power++;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	3301      	adds	r3, #1
 8001634:	60fb      	str	r3, [r7, #12]
                        d /= 10;
 8001636:	f04f 0200 	mov.w	r2, #0
 800163a:	4b3b      	ldr	r3, [pc, #236]	@ (8001728 <HD44780U_Write_Double+0x1f0>)
 800163c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001640:	f7ff f8c8 	bl	80007d4 <__aeabi_ddiv>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	e9c7 2300 	strd	r2, r3, [r7]
 800164c:	e017      	b.n	800167e <HD44780U_Write_Double+0x146>
                }
                else if(d < 1)
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	4b36      	ldr	r3, [pc, #216]	@ (800172c <HD44780U_Write_Double+0x1f4>)
 8001654:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001658:	f7ff fa04 	bl	8000a64 <__aeabi_dcmplt>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00d      	beq.n	800167e <HD44780U_Write_Double+0x146>
                {
                        power--;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	3b01      	subs	r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
                        d *= 10;
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	4b2e      	ldr	r3, [pc, #184]	@ (8001728 <HD44780U_Write_Double+0x1f0>)
 800166e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001672:	f7fe ff85 	bl	8000580 <__aeabi_dmul>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	e9c7 2300 	strd	r2, r3, [r7]
        while(d > 10 || d < 1)
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	4b29      	ldr	r3, [pc, #164]	@ (8001728 <HD44780U_Write_Double+0x1f0>)
 8001684:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001688:	f7ff fa0a 	bl	8000aa0 <__aeabi_dcmpgt>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1c4      	bne.n	800161c <HD44780U_Write_Double+0xe4>
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	4b25      	ldr	r3, [pc, #148]	@ (800172c <HD44780U_Write_Double+0x1f4>)
 8001698:	e9d7 0100 	ldrd	r0, r1, [r7]
 800169c:	f7ff f9e2 	bl	8000a64 <__aeabi_dcmplt>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1ba      	bne.n	800161c <HD44780U_Write_Double+0xe4>
                }
        }
        print_int((int)d, 1);
 80016a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016aa:	f7ff fa03 	bl	8000ab4 <__aeabi_d2iz>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2101      	movs	r1, #1
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff feb4 	bl	8001420 <print_int>
        HD44780U_Write_At_Cursor('.');
 80016b8:	202e      	movs	r0, #46	@ 0x2e
 80016ba:	f7ff fdaf 	bl	800121c <HD44780U_Write_At_Cursor>
        d = d - (int)d;
 80016be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016c2:	f7ff f9f7 	bl	8000ab4 <__aeabi_d2iz>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe feef 	bl	80004ac <__aeabi_i2d>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016d6:	f7fe fd9b 	bl	8000210 <__aeabi_dsub>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	e9c7 2300 	strd	r2, r3, [r7]
        d *= 10000;
 80016e2:	a30f      	add	r3, pc, #60	@ (adr r3, 8001720 <HD44780U_Write_Double+0x1e8>)
 80016e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016ec:	f7fe ff48 	bl	8000580 <__aeabi_dmul>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	e9c7 2300 	strd	r2, r3, [r7]
        print_int((int)d, 4);
 80016f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016fc:	f7ff f9da 	bl	8000ab4 <__aeabi_d2iz>
 8001700:	4603      	mov	r3, r0
 8001702:	2104      	movs	r1, #4
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fe8b 	bl	8001420 <print_int>
        HD44780U_Write_At_Cursor('e');
 800170a:	2065      	movs	r0, #101	@ 0x65
 800170c:	f7ff fd86 	bl	800121c <HD44780U_Write_At_Cursor>
        print_int(power, 1);
 8001710:	2101      	movs	r1, #1
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f7ff fe84 	bl	8001420 <print_int>
}
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bdb0      	pop	{r4, r5, r7, pc}
 800171e:	bf00      	nop
 8001720:	00000000 	.word	0x00000000
 8001724:	40c38800 	.word	0x40c38800
 8001728:	40240000 	.word	0x40240000
 800172c:	3ff00000 	.word	0x3ff00000
 8001730:	00000000 	.word	0x00000000
 8001734:	4197d784 	.word	0x4197d784
 8001738:	d2f1a9fc 	.word	0xd2f1a9fc
 800173c:	3f50624d 	.word	0x3f50624d

08001740 <update_error>:

enum error_type error = NONE;
double ans = 0.0;

static void update_error(enum error_type type)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
	if(error == NONE)
 800174a:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <update_error+0x24>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b03      	cmp	r3, #3
 8001750:	d102      	bne.n	8001758 <update_error+0x18>
	{
		error = type;
 8001752:	4a04      	ldr	r2, [pc, #16]	@ (8001764 <update_error+0x24>)
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	7013      	strb	r3, [r2, #0]
	}
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	20000062 	.word	0x20000062

08001768 <parse_top>:

int parse_top(char **input, double *retval)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
		int ret;
		error = NONE;
 8001772:	4b11      	ldr	r3, [pc, #68]	@ (80017b8 <parse_top+0x50>)
 8001774:	2203      	movs	r2, #3
 8001776:	701a      	strb	r2, [r3, #0]
        has_last_token = 0;
 8001778:	4b10      	ldr	r3, [pc, #64]	@ (80017bc <parse_top+0x54>)
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
        ret = parse_expr(input, retval);
 800177e:	6839      	ldr	r1, [r7, #0]
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f000 f821 	bl	80017c8 <parse_expr>
 8001786:	60f8      	str	r0, [r7, #12]
        if(last_token.type != END)
 8001788:	4b0d      	ldr	r3, [pc, #52]	@ (80017c0 <parse_top+0x58>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b09      	cmp	r3, #9
 800178e:	d004      	beq.n	800179a <parse_top+0x32>
        {
        	update_error(SYNTAX);
 8001790:	2001      	movs	r0, #1
 8001792:	f7ff ffd5 	bl	8001740 <update_error>
        	return 0;
 8001796:	2300      	movs	r3, #0
 8001798:	e009      	b.n	80017ae <parse_top+0x46>
        }
        else if(ret)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <parse_top+0x44>
        {
        	ans = *retval;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a6:	4907      	ldr	r1, [pc, #28]	@ (80017c4 <parse_top+0x5c>)
 80017a8:	e9c1 2300 	strd	r2, r3, [r1]
        }
        return ret;
 80017ac:	68fb      	ldr	r3, [r7, #12]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000062 	.word	0x20000062
 80017bc:	200000a0 	.word	0x200000a0
 80017c0:	200000a8 	.word	0x200000a8
 80017c4:	20000098 	.word	0x20000098

080017c8 <parse_expr>:
int parse_expr(char **input, double *retval)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
        struct Token current_token;
        double term_retval;
        if(!parse_term(input, &term_retval))
 80017d2:	f107 0308 	add.w	r3, r7, #8
 80017d6:	4619      	mov	r1, r3
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 f85c 	bl	8001896 <parse_term>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d104      	bne.n	80017ee <parse_expr+0x26>
        {
    			update_error(SYNTAX);
 80017e4:	2001      	movs	r0, #1
 80017e6:	f7ff ffab 	bl	8001740 <update_error>
                return 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	e04f      	b.n	800188e <parse_expr+0xc6>
        }
        *retval = term_retval;
 80017ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017f2:	6839      	ldr	r1, [r7, #0]
 80017f4:	e9c1 2300 	strd	r2, r3, [r1]

        while((current_token = get_next_token(input)).type == PLUS || current_token.type == MINUS)
 80017f8:	e03a      	b.n	8001870 <parse_expr+0xa8>
        {
                if(current_token.type == PLUS)
 80017fa:	7c3b      	ldrb	r3, [r7, #16]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d11a      	bne.n	8001836 <parse_expr+0x6e>
                {
                        if(!parse_term(input, &term_retval))
 8001800:	f107 0308 	add.w	r3, r7, #8
 8001804:	4619      	mov	r1, r3
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 f845 	bl	8001896 <parse_term>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d104      	bne.n	800181c <parse_expr+0x54>
                        {
                        		update_error(SYNTAX);
 8001812:	2001      	movs	r0, #1
 8001814:	f7ff ff94 	bl	8001740 <update_error>
                                return 0;
 8001818:	2300      	movs	r3, #0
 800181a:	e038      	b.n	800188e <parse_expr+0xc6>
                        }
                        *retval += term_retval;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001822:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001826:	f7fe fcf5 	bl	8000214 <__adddf3>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	6839      	ldr	r1, [r7, #0]
 8001830:	e9c1 2300 	strd	r2, r3, [r1]
 8001834:	e01c      	b.n	8001870 <parse_expr+0xa8>
                }
                else if(current_token.type == MINUS)
 8001836:	7c3b      	ldrb	r3, [r7, #16]
 8001838:	2b02      	cmp	r3, #2
 800183a:	d119      	bne.n	8001870 <parse_expr+0xa8>
                {
                        if(!parse_term(input, &term_retval))
 800183c:	f107 0308 	add.w	r3, r7, #8
 8001840:	4619      	mov	r1, r3
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f827 	bl	8001896 <parse_term>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d104      	bne.n	8001858 <parse_expr+0x90>
                        {
                    			update_error(SYNTAX);
 800184e:	2001      	movs	r0, #1
 8001850:	f7ff ff76 	bl	8001740 <update_error>
                                return 0;
 8001854:	2300      	movs	r3, #0
 8001856:	e01a      	b.n	800188e <parse_expr+0xc6>
                        }
                        *retval -= term_retval;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800185e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001862:	f7fe fcd5 	bl	8000210 <__aeabi_dsub>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	6839      	ldr	r1, [r7, #0]
 800186c:	e9c1 2300 	strd	r2, r3, [r1]
        while((current_token = get_next_token(input)).type == PLUS || current_token.type == MINUS)
 8001870:	f107 0310 	add.w	r3, r7, #16
 8001874:	6879      	ldr	r1, [r7, #4]
 8001876:	4618      	mov	r0, r3
 8001878:	f000 fc82 	bl	8002180 <get_next_token>
 800187c:	7c3b      	ldrb	r3, [r7, #16]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d0bb      	beq.n	80017fa <parse_expr+0x32>
 8001882:	7c3b      	ldrb	r3, [r7, #16]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d0b8      	beq.n	80017fa <parse_expr+0x32>
                }
        }

        unget_token();
 8001888:	f000 fcaa 	bl	80021e0 <unget_token>
        return 1;
 800188c:	2301      	movs	r3, #1
}
 800188e:	4618      	mov	r0, r3
 8001890:	3720      	adds	r7, #32
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <parse_term>:
int parse_term(char **input, double *retval)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b088      	sub	sp, #32
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
 800189e:	6039      	str	r1, [r7, #0]
        struct Token current_token;
        double sfactor_retval;
        if(!parse_sfactor(input, &sfactor_retval))
 80018a0:	f107 0308 	add.w	r3, r7, #8
 80018a4:	4619      	mov	r1, r3
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 f86c 	bl	8001984 <parse_sfactor>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d104      	bne.n	80018bc <parse_term+0x26>
        {
    			update_error(SYNTAX);
 80018b2:	2001      	movs	r0, #1
 80018b4:	f7ff ff44 	bl	8001740 <update_error>
                return 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	e05f      	b.n	800197c <parse_term+0xe6>
        }
        *retval = sfactor_retval;
 80018bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018c0:	6839      	ldr	r1, [r7, #0]
 80018c2:	e9c1 2300 	strd	r2, r3, [r1]

        while((current_token = get_next_token(input)).type == MULT || current_token.type == DIV)
 80018c6:	e04a      	b.n	800195e <parse_term+0xc8>
        {
                if(current_token.type == MULT)
 80018c8:	7c3b      	ldrb	r3, [r7, #16]
 80018ca:	2b03      	cmp	r3, #3
 80018cc:	d11a      	bne.n	8001904 <parse_term+0x6e>
                {
                        if(!parse_term(input, &sfactor_retval))
 80018ce:	f107 0308 	add.w	r3, r7, #8
 80018d2:	4619      	mov	r1, r3
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff ffde 	bl	8001896 <parse_term>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d104      	bne.n	80018ea <parse_term+0x54>
                        {
                    			update_error(SYNTAX);
 80018e0:	2001      	movs	r0, #1
 80018e2:	f7ff ff2d 	bl	8001740 <update_error>
                                return 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	e048      	b.n	800197c <parse_term+0xe6>
                        }
                        *retval *= sfactor_retval;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018f4:	f7fe fe44 	bl	8000580 <__aeabi_dmul>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	6839      	ldr	r1, [r7, #0]
 80018fe:	e9c1 2300 	strd	r2, r3, [r1]
 8001902:	e02c      	b.n	800195e <parse_term+0xc8>
                }
                else if(current_token.type == DIV)
 8001904:	7c3b      	ldrb	r3, [r7, #16]
 8001906:	2b04      	cmp	r3, #4
 8001908:	d129      	bne.n	800195e <parse_term+0xc8>
                {
                        if(!parse_term(input, &sfactor_retval))
 800190a:	f107 0308 	add.w	r3, r7, #8
 800190e:	4619      	mov	r1, r3
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ffc0 	bl	8001896 <parse_term>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d104      	bne.n	8001926 <parse_term+0x90>
                        {
                    			update_error(SYNTAX);
 800191c:	2001      	movs	r0, #1
 800191e:	f7ff ff0f 	bl	8001740 <update_error>
                                return 0;
 8001922:	2300      	movs	r3, #0
 8001924:	e02a      	b.n	800197c <parse_term+0xe6>
                        }
                        if(sfactor_retval == 0.0)
 8001926:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	f04f 0300 	mov.w	r3, #0
 8001932:	f7ff f88d 	bl	8000a50 <__aeabi_dcmpeq>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d004      	beq.n	8001946 <parse_term+0xb0>
                        {
                    		update_error(DIV_ZERO);
 800193c:	2000      	movs	r0, #0
 800193e:	f7ff feff 	bl	8001740 <update_error>
                        	return 0;
 8001942:	2300      	movs	r3, #0
 8001944:	e01a      	b.n	800197c <parse_term+0xe6>
                        }
                        *retval /= sfactor_retval;
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	e9d3 0100 	ldrd	r0, r1, [r3]
 800194c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001950:	f7fe ff40 	bl	80007d4 <__aeabi_ddiv>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	6839      	ldr	r1, [r7, #0]
 800195a:	e9c1 2300 	strd	r2, r3, [r1]
        while((current_token = get_next_token(input)).type == MULT || current_token.type == DIV)
 800195e:	f107 0310 	add.w	r3, r7, #16
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	4618      	mov	r0, r3
 8001966:	f000 fc0b 	bl	8002180 <get_next_token>
 800196a:	7c3b      	ldrb	r3, [r7, #16]
 800196c:	2b03      	cmp	r3, #3
 800196e:	d0ab      	beq.n	80018c8 <parse_term+0x32>
 8001970:	7c3b      	ldrb	r3, [r7, #16]
 8001972:	2b04      	cmp	r3, #4
 8001974:	d0a8      	beq.n	80018c8 <parse_term+0x32>
                }
        }

        unget_token();
 8001976:	f000 fc33 	bl	80021e0 <unget_token>
        return 1;
 800197a:	2301      	movs	r3, #1

}
 800197c:	4618      	mov	r0, r3
 800197e:	3720      	adds	r7, #32
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <parse_sfactor>:
int parse_sfactor(char **input, double *retval)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	@ 0x28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
        struct Token current_token;
        double unary_sign = 1.0;
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	4b19      	ldr	r3, [pc, #100]	@ (80019f8 <parse_sfactor+0x74>)
 8001994:	e9c7 2308 	strd	r2, r3, [r7, #32]
        double pfactor_retval;

        current_token = get_next_token(input);
 8001998:	f107 0310 	add.w	r3, r7, #16
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 fbee 	bl	8002180 <get_next_token>
        if(current_token.type == MINUS)
 80019a4:	7c3b      	ldrb	r3, [r7, #16]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d105      	bne.n	80019b6 <parse_sfactor+0x32>
        {
                unary_sign = -1.0;
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	4b13      	ldr	r3, [pc, #76]	@ (80019fc <parse_sfactor+0x78>)
 80019b0:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80019b4:	e001      	b.n	80019ba <parse_sfactor+0x36>
        }
        else
        {
                unget_token();
 80019b6:	f000 fc13 	bl	80021e0 <unget_token>
        }
        if(!parse_pfactor(input, &pfactor_retval))
 80019ba:	f107 0308 	add.w	r3, r7, #8
 80019be:	4619      	mov	r1, r3
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 f81d 	bl	8001a00 <parse_pfactor>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d104      	bne.n	80019d6 <parse_sfactor+0x52>
        {
				update_error(SYNTAX);
 80019cc:	2001      	movs	r0, #1
 80019ce:	f7ff feb7 	bl	8001740 <update_error>
                return 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	e00b      	b.n	80019ee <parse_sfactor+0x6a>
        }
        *retval = unary_sign * pfactor_retval;
 80019d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019de:	f7fe fdcf 	bl	8000580 <__aeabi_dmul>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	6839      	ldr	r1, [r7, #0]
 80019e8:	e9c1 2300 	strd	r2, r3, [r1]
        return 1;
 80019ec:	2301      	movs	r3, #1
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3728      	adds	r7, #40	@ 0x28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	3ff00000 	.word	0x3ff00000
 80019fc:	bff00000 	.word	0xbff00000

08001a00 <parse_pfactor>:
int parse_pfactor(char **input, double *retval)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	@ 0x28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
        double pfactor_retval;
        double factor_retval;
        struct Token current_token;

        if(!parse_factor(input, &factor_retval))
 8001a0a:	f107 0318 	add.w	r3, r7, #24
 8001a0e:	4619      	mov	r1, r3
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 f843 	bl	8001a9c <parse_factor>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d104      	bne.n	8001a26 <parse_pfactor+0x26>
        {
				update_error(SYNTAX);
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	f7ff fe8f 	bl	8001740 <update_error>
                return 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	e035      	b.n	8001a92 <parse_pfactor+0x92>
        }

        current_token = get_next_token(input);
 8001a26:	f107 0308 	add.w	r3, r7, #8
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f000 fba7 	bl	8002180 <get_next_token>
        if(current_token.type != EXPONENT)
 8001a32:	7a3b      	ldrb	r3, [r7, #8]
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d008      	beq.n	8001a4a <parse_pfactor+0x4a>
        {
                unget_token();
 8001a38:	f000 fbd2 	bl	80021e0 <unget_token>
                *retval = factor_retval;
 8001a3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a40:	6839      	ldr	r1, [r7, #0]
 8001a42:	e9c1 2300 	strd	r2, r3, [r1]
                return 1;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e023      	b.n	8001a92 <parse_pfactor+0x92>
        }

        if(!parse_pfactor(input, &pfactor_retval))
 8001a4a:	f107 0320 	add.w	r3, r7, #32
 8001a4e:	4619      	mov	r1, r3
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ffd5 	bl	8001a00 <parse_pfactor>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d104      	bne.n	8001a66 <parse_pfactor+0x66>
        {
				update_error(SYNTAX);
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	f7ff fe6f 	bl	8001740 <update_error>
                return 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	e015      	b.n	8001a92 <parse_pfactor+0x92>
        }

        *retval = powff(factor_retval, pfactor_retval);
 8001a66:	ed97 7b06 	vldr	d7, [r7, #24]
 8001a6a:	ed97 6b08 	vldr	d6, [r7, #32]
 8001a6e:	eeb0 1a46 	vmov.f32	s2, s12
 8001a72:	eef0 1a66 	vmov.f32	s3, s13
 8001a76:	eeb0 0a47 	vmov.f32	s0, s14
 8001a7a:	eef0 0a67 	vmov.f32	s1, s15
 8001a7e:	f001 fa69 	bl	8002f54 <powff>
 8001a82:	eeb0 7a40 	vmov.f32	s14, s0
 8001a86:	eef0 7a60 	vmov.f32	s15, s1
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	ed83 7b00 	vstr	d7, [r3]
        return 1;
 8001a90:	2301      	movs	r3, #1
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3728      	adds	r7, #40	@ 0x28
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <parse_factor>:
int parse_factor(char **input, double *retval)
{
 8001a9c:	b590      	push	{r4, r7, lr}
 8001a9e:	b093      	sub	sp, #76	@ 0x4c
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6178      	str	r0, [r7, #20]
 8001aa4:	6139      	str	r1, [r7, #16]
        struct Token current_token;

        current_token = get_next_token(input);
 8001aa6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001aaa:	6979      	ldr	r1, [r7, #20]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f000 fb67 	bl	8002180 <get_next_token>
        if(current_token.type == LPAREN)
 8001ab2:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001ab6:	2b05      	cmp	r3, #5
 8001ab8:	d128      	bne.n	8001b0c <parse_factor+0x70>
        {
                double expr_retval;
                if(!parse_expr(input, &expr_retval))
 8001aba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001abe:	4619      	mov	r1, r3
 8001ac0:	6978      	ldr	r0, [r7, #20]
 8001ac2:	f7ff fe81 	bl	80017c8 <parse_expr>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d104      	bne.n	8001ad6 <parse_factor+0x3a>
                {
        				update_error(SYNTAX);
 8001acc:	2001      	movs	r0, #1
 8001ace:	f7ff fe37 	bl	8001740 <update_error>
                        return 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	e124      	b.n	8001d20 <parse_factor+0x284>
                }
                current_token = get_next_token(input);
 8001ad6:	463b      	mov	r3, r7
 8001ad8:	6979      	ldr	r1, [r7, #20]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 fb50 	bl	8002180 <get_next_token>
 8001ae0:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001ae4:	463b      	mov	r3, r7
 8001ae6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ae8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                if(current_token.type != RPAREN)
 8001aec:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001af0:	2b07      	cmp	r3, #7
 8001af2:	d004      	beq.n	8001afe <parse_factor+0x62>
                {
        				update_error(SYNTAX);
 8001af4:	2001      	movs	r0, #1
 8001af6:	f7ff fe23 	bl	8001740 <update_error>
                        return 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	e110      	b.n	8001d20 <parse_factor+0x284>
                }
                *retval = expr_retval;
 8001afe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001b02:	6939      	ldr	r1, [r7, #16]
 8001b04:	e9c1 2300 	strd	r2, r3, [r1]
                return 1;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e109      	b.n	8001d20 <parse_factor+0x284>
        }
        else if(current_token.type == LN)
 8001b0c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001b10:	2b0a      	cmp	r3, #10
 8001b12:	d155      	bne.n	8001bc0 <parse_factor+0x124>
        {
        	double expr_retval;

        	current_token = get_next_token(input);
 8001b14:	463b      	mov	r3, r7
 8001b16:	6979      	ldr	r1, [r7, #20]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f000 fb31 	bl	8002180 <get_next_token>
 8001b1e:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001b22:	463b      	mov	r3, r7
 8001b24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        	if(current_token.type != LPAREN)
 8001b2a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001b2e:	2b05      	cmp	r3, #5
 8001b30:	d004      	beq.n	8001b3c <parse_factor+0xa0>
        	{
        		update_error(SYNTAX);
 8001b32:	2001      	movs	r0, #1
 8001b34:	f7ff fe04 	bl	8001740 <update_error>
        		return 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	e0f1      	b.n	8001d20 <parse_factor+0x284>
        	}

        	if(!parse_expr(input, &expr_retval))
 8001b3c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b40:	4619      	mov	r1, r3
 8001b42:	6978      	ldr	r0, [r7, #20]
 8001b44:	f7ff fe40 	bl	80017c8 <parse_expr>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d104      	bne.n	8001b58 <parse_factor+0xbc>
        	{
        		update_error(SYNTAX);
 8001b4e:	2001      	movs	r0, #1
 8001b50:	f7ff fdf6 	bl	8001740 <update_error>
        		return 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	e0e3      	b.n	8001d20 <parse_factor+0x284>
        	}
        	if(expr_retval <= 0)
 8001b58:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	f04f 0300 	mov.w	r3, #0
 8001b64:	f7fe ff88 	bl	8000a78 <__aeabi_dcmple>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d004      	beq.n	8001b78 <parse_factor+0xdc>
        	{
        		update_error(BAD_LN);
 8001b6e:	2002      	movs	r0, #2
 8001b70:	f7ff fde6 	bl	8001740 <update_error>
        		return 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	e0d3      	b.n	8001d20 <parse_factor+0x284>
        	}
        	current_token = get_next_token(input);
 8001b78:	463b      	mov	r3, r7
 8001b7a:	6979      	ldr	r1, [r7, #20]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f000 faff 	bl	8002180 <get_next_token>
 8001b82:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001b86:	463b      	mov	r3, r7
 8001b88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        	if(current_token.type != RPAREN)
 8001b8e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001b92:	2b07      	cmp	r3, #7
 8001b94:	d004      	beq.n	8001ba0 <parse_factor+0x104>
        	{
        		update_error(SYNTAX);
 8001b96:	2001      	movs	r0, #1
 8001b98:	f7ff fdd2 	bl	8001740 <update_error>
        		return 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	e0bf      	b.n	8001d20 <parse_factor+0x284>
        	}
        	*retval = lnf(expr_retval);
 8001ba0:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8001ba4:	eeb0 0a47 	vmov.f32	s0, s14
 8001ba8:	eef0 0a67 	vmov.f32	s1, s15
 8001bac:	f001 f900 	bl	8002db0 <lnf>
 8001bb0:	eeb0 7a40 	vmov.f32	s14, s0
 8001bb4:	eef0 7a60 	vmov.f32	s15, s1
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	ed83 7b00 	vstr	d7, [r3]
 8001bbe:	e0af      	b.n	8001d20 <parse_factor+0x284>
        }
        else if(current_token.type == SIN)
 8001bc0:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001bc4:	2b0b      	cmp	r3, #11
 8001bc6:	d145      	bne.n	8001c54 <parse_factor+0x1b8>
        {
        	double expr_retval;

        	current_token = get_next_token(input);
 8001bc8:	463b      	mov	r3, r7
 8001bca:	6979      	ldr	r1, [r7, #20]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f000 fad7 	bl	8002180 <get_next_token>
 8001bd2:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001bd6:	463b      	mov	r3, r7
 8001bd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        	if(current_token.type != LPAREN)
 8001bde:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001be2:	2b05      	cmp	r3, #5
 8001be4:	d004      	beq.n	8001bf0 <parse_factor+0x154>
        	{
        		update_error(SYNTAX);
 8001be6:	2001      	movs	r0, #1
 8001be8:	f7ff fdaa 	bl	8001740 <update_error>
        		return 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	e097      	b.n	8001d20 <parse_factor+0x284>
        	}

        	if(!parse_expr(input, &expr_retval))
 8001bf0:	f107 0320 	add.w	r3, r7, #32
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	6978      	ldr	r0, [r7, #20]
 8001bf8:	f7ff fde6 	bl	80017c8 <parse_expr>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d104      	bne.n	8001c0c <parse_factor+0x170>
        	{
        		update_error(SYNTAX);
 8001c02:	2001      	movs	r0, #1
 8001c04:	f7ff fd9c 	bl	8001740 <update_error>
        		return 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	e089      	b.n	8001d20 <parse_factor+0x284>
        	}
        	current_token = get_next_token(input);
 8001c0c:	463b      	mov	r3, r7
 8001c0e:	6979      	ldr	r1, [r7, #20]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f000 fab5 	bl	8002180 <get_next_token>
 8001c16:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001c1a:	463b      	mov	r3, r7
 8001c1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        	if(current_token.type != RPAREN)
 8001c22:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001c26:	2b07      	cmp	r3, #7
 8001c28:	d004      	beq.n	8001c34 <parse_factor+0x198>
        	{
        		update_error(SYNTAX);
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	f7ff fd88 	bl	8001740 <update_error>
        		return 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	e075      	b.n	8001d20 <parse_factor+0x284>
        	}
        	*retval = sine(expr_retval);
 8001c34:	ed97 7b08 	vldr	d7, [r7, #32]
 8001c38:	eeb0 0a47 	vmov.f32	s0, s14
 8001c3c:	eef0 0a67 	vmov.f32	s1, s15
 8001c40:	f001 fb0a 	bl	8003258 <sine>
 8001c44:	eeb0 7a40 	vmov.f32	s14, s0
 8001c48:	eef0 7a60 	vmov.f32	s15, s1
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	ed83 7b00 	vstr	d7, [r3]
 8001c52:	e065      	b.n	8001d20 <parse_factor+0x284>
        }
        else if(current_token.type == COS)
 8001c54:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001c58:	2b0c      	cmp	r3, #12
 8001c5a:	d145      	bne.n	8001ce8 <parse_factor+0x24c>
        {
        	double expr_retval;

        	current_token = get_next_token(input);
 8001c5c:	463b      	mov	r3, r7
 8001c5e:	6979      	ldr	r1, [r7, #20]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f000 fa8d 	bl	8002180 <get_next_token>
 8001c66:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001c6a:	463b      	mov	r3, r7
 8001c6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        	if(current_token.type != LPAREN)
 8001c72:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001c76:	2b05      	cmp	r3, #5
 8001c78:	d004      	beq.n	8001c84 <parse_factor+0x1e8>
        	{
        		update_error(SYNTAX);
 8001c7a:	2001      	movs	r0, #1
 8001c7c:	f7ff fd60 	bl	8001740 <update_error>
        		return 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	e04d      	b.n	8001d20 <parse_factor+0x284>
        	}

        	if(!parse_expr(input, &expr_retval))
 8001c84:	f107 0318 	add.w	r3, r7, #24
 8001c88:	4619      	mov	r1, r3
 8001c8a:	6978      	ldr	r0, [r7, #20]
 8001c8c:	f7ff fd9c 	bl	80017c8 <parse_expr>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d104      	bne.n	8001ca0 <parse_factor+0x204>
        	{
        		update_error(SYNTAX);
 8001c96:	2001      	movs	r0, #1
 8001c98:	f7ff fd52 	bl	8001740 <update_error>
        		return 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	e03f      	b.n	8001d20 <parse_factor+0x284>
        	}
        	current_token = get_next_token(input);
 8001ca0:	463b      	mov	r3, r7
 8001ca2:	6979      	ldr	r1, [r7, #20]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f000 fa6b 	bl	8002180 <get_next_token>
 8001caa:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001cae:	463b      	mov	r3, r7
 8001cb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        	if(current_token.type != RPAREN)
 8001cb6:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001cba:	2b07      	cmp	r3, #7
 8001cbc:	d004      	beq.n	8001cc8 <parse_factor+0x22c>
        	{
        		update_error(SYNTAX);
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f7ff fd3e 	bl	8001740 <update_error>
        		return 0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	e02b      	b.n	8001d20 <parse_factor+0x284>
        	}
        	*retval = cosine(expr_retval);
 8001cc8:	ed97 7b06 	vldr	d7, [r7, #24]
 8001ccc:	eeb0 0a47 	vmov.f32	s0, s14
 8001cd0:	eef0 0a67 	vmov.f32	s1, s15
 8001cd4:	f001 fa68 	bl	80031a8 <cosine>
 8001cd8:	eeb0 7a40 	vmov.f32	s14, s0
 8001cdc:	eef0 7a60 	vmov.f32	s15, s1
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	ed83 7b00 	vstr	d7, [r3]
 8001ce6:	e01b      	b.n	8001d20 <parse_factor+0x284>
        }
        else if(current_token.type == RCONST)
 8001ce8:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d106      	bne.n	8001cfe <parse_factor+0x262>
        {
                *retval = current_token.rconst_value;
 8001cf0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001cf4:	6939      	ldr	r1, [r7, #16]
 8001cf6:	e9c1 2300 	strd	r2, r3, [r1]
                return 1;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e010      	b.n	8001d20 <parse_factor+0x284>
        }
        else if(current_token.type == ANS)
 8001cfe:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001d02:	2b06      	cmp	r3, #6
 8001d04:	d107      	bne.n	8001d16 <parse_factor+0x27a>
        {
        	*retval = ans;
 8001d06:	4b08      	ldr	r3, [pc, #32]	@ (8001d28 <parse_factor+0x28c>)
 8001d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0c:	6939      	ldr	r1, [r7, #16]
 8001d0e:	e9c1 2300 	strd	r2, r3, [r1]
        	return 1;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e004      	b.n	8001d20 <parse_factor+0x284>
        }
        else
        {
				update_error(SYNTAX);
 8001d16:	2001      	movs	r0, #1
 8001d18:	f7ff fd12 	bl	8001740 <update_error>
                return 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	e7ff      	b.n	8001d20 <parse_factor+0x284>
        }
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	374c      	adds	r7, #76	@ 0x4c
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd90      	pop	{r4, r7, pc}
 8001d28:	20000098 	.word	0x20000098
 8001d2c:	00000000 	.word	0x00000000

08001d30 <_get_next_token>:

int has_last_token = 0;
struct Token last_token;

static struct Token _get_next_token(char **input)
{
 8001d30:	b590      	push	{r4, r7, lr}
 8001d32:	b091      	sub	sp, #68	@ 0x44
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
	struct Token out;
	char *new_input = *input;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char c;
	if(has_last_token)
 8001d40:	4b9f      	ldr	r3, [pc, #636]	@ (8001fc0 <_get_next_token+0x290>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d002      	beq.n	8001d4e <_get_next_token+0x1e>
	{
		has_last_token = 0;
 8001d48:	4b9d      	ldr	r3, [pc, #628]	@ (8001fc0 <_get_next_token+0x290>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
	
	}
	out.rconst_value = 0.0;
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	e9c7 2304 	strd	r2, r3, [r7, #16]
	c = *(new_input++);
 8001d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d5c:	1c5a      	adds	r2, r3, #1
 8001d5e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	77fb      	strb	r3, [r7, #31]
	if(c == '\0')
 8001d64:	7ffb      	ldrb	r3, [r7, #31]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d109      	bne.n	8001d7e <_get_next_token+0x4e>
	{
		out.type = END;
 8001d6a:	2309      	movs	r3, #9
 8001d6c:	723b      	strb	r3, [r7, #8]
		return out;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	461c      	mov	r4, r3
 8001d72:	f107 0308 	add.w	r3, r7, #8
 8001d76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001d7c:	e1f0      	b.n	8002160 <_get_next_token+0x430>
	}
	else if(c == '(')
 8001d7e:	7ffb      	ldrb	r3, [r7, #31]
 8001d80:	2b28      	cmp	r3, #40	@ 0x28
 8001d82:	d10c      	bne.n	8001d9e <_get_next_token+0x6e>
	{
		out.type = LPAREN;
 8001d84:	2305      	movs	r3, #5
 8001d86:	723b      	strb	r3, [r7, #8]
		*input = new_input;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001d8c:	601a      	str	r2, [r3, #0]
		return out;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	461c      	mov	r4, r3
 8001d92:	f107 0308 	add.w	r3, r7, #8
 8001d96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001d9c:	e1e0      	b.n	8002160 <_get_next_token+0x430>
	}
	else if(c == ')')
 8001d9e:	7ffb      	ldrb	r3, [r7, #31]
 8001da0:	2b29      	cmp	r3, #41	@ 0x29
 8001da2:	d10c      	bne.n	8001dbe <_get_next_token+0x8e>
	{
		out.type = RPAREN;
 8001da4:	2307      	movs	r3, #7
 8001da6:	723b      	strb	r3, [r7, #8]
		*input = new_input;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001dac:	601a      	str	r2, [r3, #0]
		return out;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	461c      	mov	r4, r3
 8001db2:	f107 0308 	add.w	r3, r7, #8
 8001db6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001db8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001dbc:	e1d0      	b.n	8002160 <_get_next_token+0x430>
	}
	else if(c == '+')
 8001dbe:	7ffb      	ldrb	r3, [r7, #31]
 8001dc0:	2b2b      	cmp	r3, #43	@ 0x2b
 8001dc2:	d10c      	bne.n	8001dde <_get_next_token+0xae>
	{
		out.type = PLUS;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	723b      	strb	r3, [r7, #8]
		*input = new_input;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001dcc:	601a      	str	r2, [r3, #0]
		return out;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	461c      	mov	r4, r3
 8001dd2:	f107 0308 	add.w	r3, r7, #8
 8001dd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001ddc:	e1c0      	b.n	8002160 <_get_next_token+0x430>
	}
	else if(c == '-')
 8001dde:	7ffb      	ldrb	r3, [r7, #31]
 8001de0:	2b2d      	cmp	r3, #45	@ 0x2d
 8001de2:	d10c      	bne.n	8001dfe <_get_next_token+0xce>
	{
		out.type = MINUS;
 8001de4:	2302      	movs	r3, #2
 8001de6:	723b      	strb	r3, [r7, #8]
		*input = new_input;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001dec:	601a      	str	r2, [r3, #0]
		return out;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	461c      	mov	r4, r3
 8001df2:	f107 0308 	add.w	r3, r7, #8
 8001df6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001df8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001dfc:	e1b0      	b.n	8002160 <_get_next_token+0x430>
	}
	else if(c == '*')
 8001dfe:	7ffb      	ldrb	r3, [r7, #31]
 8001e00:	2b2a      	cmp	r3, #42	@ 0x2a
 8001e02:	d10c      	bne.n	8001e1e <_get_next_token+0xee>
	{
		out.type = MULT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	723b      	strb	r3, [r7, #8]
		*input = new_input;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001e0c:	601a      	str	r2, [r3, #0]
		return out;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	461c      	mov	r4, r3
 8001e12:	f107 0308 	add.w	r3, r7, #8
 8001e16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e1c:	e1a0      	b.n	8002160 <_get_next_token+0x430>
	}
	else if(c == '/')
 8001e1e:	7ffb      	ldrb	r3, [r7, #31]
 8001e20:	2b2f      	cmp	r3, #47	@ 0x2f
 8001e22:	d10c      	bne.n	8001e3e <_get_next_token+0x10e>
	{
		out.type = DIV;
 8001e24:	2304      	movs	r3, #4
 8001e26:	723b      	strb	r3, [r7, #8]
		*input = new_input;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001e2c:	601a      	str	r2, [r3, #0]
		return out;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	461c      	mov	r4, r3
 8001e32:	f107 0308 	add.w	r3, r7, #8
 8001e36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e3c:	e190      	b.n	8002160 <_get_next_token+0x430>
	}
	else if(c == '^')
 8001e3e:	7ffb      	ldrb	r3, [r7, #31]
 8001e40:	2b5e      	cmp	r3, #94	@ 0x5e
 8001e42:	d10c      	bne.n	8001e5e <_get_next_token+0x12e>
	{
		out.type = EXPONENT;
 8001e44:	2308      	movs	r3, #8
 8001e46:	723b      	strb	r3, [r7, #8]
		*input = new_input;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001e4c:	601a      	str	r2, [r3, #0]
		return out;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	461c      	mov	r4, r3
 8001e52:	f107 0308 	add.w	r3, r7, #8
 8001e56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e5c:	e180      	b.n	8002160 <_get_next_token+0x430>
	}
	else if(c == 'A')
 8001e5e:	7ffb      	ldrb	r3, [r7, #31]
 8001e60:	2b41      	cmp	r3, #65	@ 0x41
 8001e62:	d12c      	bne.n	8001ebe <_get_next_token+0x18e>
	{
		if(*(new_input++) != 'n')
 8001e64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b6e      	cmp	r3, #110	@ 0x6e
 8001e6e:	d009      	beq.n	8001e84 <_get_next_token+0x154>
		{
			out.type = ERR;
 8001e70:	230d      	movs	r3, #13
 8001e72:	723b      	strb	r3, [r7, #8]
			return out;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	461c      	mov	r4, r3
 8001e78:	f107 0308 	add.w	r3, r7, #8
 8001e7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e82:	e16d      	b.n	8002160 <_get_next_token+0x430>
		}
		if(*(new_input++) != 's')
 8001e84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e86:	1c5a      	adds	r2, r3, #1
 8001e88:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b73      	cmp	r3, #115	@ 0x73
 8001e8e:	d009      	beq.n	8001ea4 <_get_next_token+0x174>
		{
			out.type = ERR;
 8001e90:	230d      	movs	r3, #13
 8001e92:	723b      	strb	r3, [r7, #8]
			return out;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	461c      	mov	r4, r3
 8001e98:	f107 0308 	add.w	r3, r7, #8
 8001e9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001ea2:	e15d      	b.n	8002160 <_get_next_token+0x430>
		}
		out.type = ANS;
 8001ea4:	2306      	movs	r3, #6
 8001ea6:	723b      	strb	r3, [r7, #8]
		*input = new_input;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001eac:	601a      	str	r2, [r3, #0]
		return out;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	461c      	mov	r4, r3
 8001eb2:	f107 0308 	add.w	r3, r7, #8
 8001eb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001eb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001ebc:	e150      	b.n	8002160 <_get_next_token+0x430>
	}
	else if(c == 's')
 8001ebe:	7ffb      	ldrb	r3, [r7, #31]
 8001ec0:	2b73      	cmp	r3, #115	@ 0x73
 8001ec2:	d12c      	bne.n	8001f1e <_get_next_token+0x1ee>
	{
		if(*(new_input++) != 'i')
 8001ec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b69      	cmp	r3, #105	@ 0x69
 8001ece:	d009      	beq.n	8001ee4 <_get_next_token+0x1b4>
		{
			out.type = ERR;
 8001ed0:	230d      	movs	r3, #13
 8001ed2:	723b      	strb	r3, [r7, #8]
			return out;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	461c      	mov	r4, r3
 8001ed8:	f107 0308 	add.w	r3, r7, #8
 8001edc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ede:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001ee2:	e13d      	b.n	8002160 <_get_next_token+0x430>
		}
		if(*(new_input++) != 'n')
 8001ee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ee6:	1c5a      	adds	r2, r3, #1
 8001ee8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b6e      	cmp	r3, #110	@ 0x6e
 8001eee:	d009      	beq.n	8001f04 <_get_next_token+0x1d4>
		{
			out.type = ERR;
 8001ef0:	230d      	movs	r3, #13
 8001ef2:	723b      	strb	r3, [r7, #8]
			return out;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	461c      	mov	r4, r3
 8001ef8:	f107 0308 	add.w	r3, r7, #8
 8001efc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001efe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001f02:	e12d      	b.n	8002160 <_get_next_token+0x430>
		}
		out.type = SIN;
 8001f04:	230b      	movs	r3, #11
 8001f06:	723b      	strb	r3, [r7, #8]
		*input = new_input;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f0c:	601a      	str	r2, [r3, #0]
		return out;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	461c      	mov	r4, r3
 8001f12:	f107 0308 	add.w	r3, r7, #8
 8001f16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001f1c:	e120      	b.n	8002160 <_get_next_token+0x430>
	}
	else if(c == 'c')
 8001f1e:	7ffb      	ldrb	r3, [r7, #31]
 8001f20:	2b63      	cmp	r3, #99	@ 0x63
 8001f22:	d12c      	bne.n	8001f7e <_get_next_token+0x24e>
	{
		if(*(new_input++) != 'o')
 8001f24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f26:	1c5a      	adds	r2, r3, #1
 8001f28:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b6f      	cmp	r3, #111	@ 0x6f
 8001f2e:	d009      	beq.n	8001f44 <_get_next_token+0x214>
		{
			out.type = ERR;
 8001f30:	230d      	movs	r3, #13
 8001f32:	723b      	strb	r3, [r7, #8]
			return out;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	461c      	mov	r4, r3
 8001f38:	f107 0308 	add.w	r3, r7, #8
 8001f3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001f42:	e10d      	b.n	8002160 <_get_next_token+0x430>
		}
		if(*(new_input++) != 's')
 8001f44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b73      	cmp	r3, #115	@ 0x73
 8001f4e:	d009      	beq.n	8001f64 <_get_next_token+0x234>
		{
			out.type = ERR;
 8001f50:	230d      	movs	r3, #13
 8001f52:	723b      	strb	r3, [r7, #8]
			return out;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	461c      	mov	r4, r3
 8001f58:	f107 0308 	add.w	r3, r7, #8
 8001f5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001f62:	e0fd      	b.n	8002160 <_get_next_token+0x430>
		}
		out.type = COS;
 8001f64:	230c      	movs	r3, #12
 8001f66:	723b      	strb	r3, [r7, #8]
		*input = new_input;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f6c:	601a      	str	r2, [r3, #0]
		return out;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	461c      	mov	r4, r3
 8001f72:	f107 0308 	add.w	r3, r7, #8
 8001f76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001f7c:	e0f0      	b.n	8002160 <_get_next_token+0x430>
	}
	else if(c == 'l')
 8001f7e:	7ffb      	ldrb	r3, [r7, #31]
 8001f80:	2b6c      	cmp	r3, #108	@ 0x6c
 8001f82:	d11f      	bne.n	8001fc4 <_get_next_token+0x294>
	{
		if(*(new_input++) != 'n')
 8001f84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b6e      	cmp	r3, #110	@ 0x6e
 8001f8e:	d009      	beq.n	8001fa4 <_get_next_token+0x274>
		{
			out.type = ERR;
 8001f90:	230d      	movs	r3, #13
 8001f92:	723b      	strb	r3, [r7, #8]
			return out;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	461c      	mov	r4, r3
 8001f98:	f107 0308 	add.w	r3, r7, #8
 8001f9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001fa2:	e0dd      	b.n	8002160 <_get_next_token+0x430>
		}
		out.type = LN;
 8001fa4:	230a      	movs	r3, #10
 8001fa6:	723b      	strb	r3, [r7, #8]
		*input = new_input;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001fac:	601a      	str	r2, [r3, #0]
		return out;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	461c      	mov	r4, r3
 8001fb2:	f107 0308 	add.w	r3, r7, #8
 8001fb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001fbc:	e0d0      	b.n	8002160 <_get_next_token+0x430>
 8001fbe:	bf00      	nop
 8001fc0:	200000a0 	.word	0x200000a0
	}
	else if(c == 'p') /* pi */
 8001fc4:	7ffb      	ldrb	r3, [r7, #31]
 8001fc6:	2b70      	cmp	r3, #112	@ 0x70
 8001fc8:	d111      	bne.n	8001fee <_get_next_token+0x2be>
	{
		out.type = RCONST;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	723b      	strb	r3, [r7, #8]
		out.rconst_value = 3.14159265358979;
 8001fce:	a368      	add	r3, pc, #416	@ (adr r3, 8002170 <_get_next_token+0x440>)
 8001fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd4:	e9c7 2304 	strd	r2, r3, [r7, #16]
		*input = new_input;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001fdc:	601a      	str	r2, [r3, #0]
		return out;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	461c      	mov	r4, r3
 8001fe2:	f107 0308 	add.w	r3, r7, #8
 8001fe6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fe8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001fec:	e0b8      	b.n	8002160 <_get_next_token+0x430>
	}
	else if(c == 'e') /* e */
 8001fee:	7ffb      	ldrb	r3, [r7, #31]
 8001ff0:	2b65      	cmp	r3, #101	@ 0x65
 8001ff2:	d111      	bne.n	8002018 <_get_next_token+0x2e8>
	{
		out.type = RCONST;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	723b      	strb	r3, [r7, #8]
		out.rconst_value = 2.71828182845905;
 8001ff8:	a35f      	add	r3, pc, #380	@ (adr r3, 8002178 <_get_next_token+0x448>)
 8001ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffe:	e9c7 2304 	strd	r2, r3, [r7, #16]
		*input = new_input;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002006:	601a      	str	r2, [r3, #0]
		return out;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	461c      	mov	r4, r3
 800200c:	f107 0308 	add.w	r3, r7, #8
 8002010:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002012:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002016:	e0a3      	b.n	8002160 <_get_next_token+0x430>
	}
	else if(c >= '0' && c <= '9')
 8002018:	7ffb      	ldrb	r3, [r7, #31]
 800201a:	2b2f      	cmp	r3, #47	@ 0x2f
 800201c:	f240 8097 	bls.w	800214e <_get_next_token+0x41e>
 8002020:	7ffb      	ldrb	r3, [r7, #31]
 8002022:	2b39      	cmp	r3, #57	@ 0x39
 8002024:	f200 8093 	bhi.w	800214e <_get_next_token+0x41e>
	{
		double integral_part = (c - '0');
 8002028:	7ffb      	ldrb	r3, [r7, #31]
 800202a:	3b30      	subs	r3, #48	@ 0x30
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe fa3d 	bl	80004ac <__aeabi_i2d>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		double decimal_part = 0.0;
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	f04f 0300 	mov.w	r3, #0
 8002042:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		double magnitude = 1.0;
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	4b47      	ldr	r3, [pc, #284]	@ (8002168 <_get_next_token+0x438>)
 800204c:	e9c7 2308 	strd	r2, r3, [r7, #32]
		out.type = RCONST;
 8002050:	2300      	movs	r3, #0
 8002052:	723b      	strb	r3, [r7, #8]

		while((c = *new_input) >= '0' && c <= '9')
 8002054:	e01c      	b.n	8002090 <_get_next_token+0x360>
		{

			integral_part *= 10;
 8002056:	f04f 0200 	mov.w	r2, #0
 800205a:	4b44      	ldr	r3, [pc, #272]	@ (800216c <_get_next_token+0x43c>)
 800205c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002060:	f7fe fa8e 	bl	8000580 <__aeabi_dmul>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
			integral_part += (c - '0');
 800206c:	7ffb      	ldrb	r3, [r7, #31]
 800206e:	3b30      	subs	r3, #48	@ 0x30
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe fa1b 	bl	80004ac <__aeabi_i2d>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800207e:	f7fe f8c9 	bl	8000214 <__adddf3>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
			new_input++;
 800208a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800208c:	3301      	adds	r3, #1
 800208e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		while((c = *new_input) >= '0' && c <= '9')
 8002090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	77fb      	strb	r3, [r7, #31]
 8002096:	7ffb      	ldrb	r3, [r7, #31]
 8002098:	2b2f      	cmp	r3, #47	@ 0x2f
 800209a:	d902      	bls.n	80020a2 <_get_next_token+0x372>
 800209c:	7ffb      	ldrb	r3, [r7, #31]
 800209e:	2b39      	cmp	r3, #57	@ 0x39
 80020a0:	d9d9      	bls.n	8002056 <_get_next_token+0x326>
		}
		if(c != '.')
 80020a2:	7ffb      	ldrb	r3, [r7, #31]
 80020a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80020a6:	d00e      	beq.n	80020c6 <_get_next_token+0x396>
		{
			out.rconst_value = integral_part;
 80020a8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80020ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
			*input = new_input;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80020b4:	601a      	str	r2, [r3, #0]
			return out;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	461c      	mov	r4, r3
 80020ba:	f107 0308 	add.w	r3, r7, #8
 80020be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80020c4:	e04c      	b.n	8002160 <_get_next_token+0x430>
		}
		new_input++;
 80020c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020c8:	3301      	adds	r3, #1
 80020ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
		while((c = *new_input) >= '0' && c <= '9')
 80020cc:	e021      	b.n	8002112 <_get_next_token+0x3e2>
		{
			magnitude *= 10;
 80020ce:	f04f 0200 	mov.w	r2, #0
 80020d2:	4b26      	ldr	r3, [pc, #152]	@ (800216c <_get_next_token+0x43c>)
 80020d4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80020d8:	f7fe fa52 	bl	8000580 <__aeabi_dmul>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	e9c7 2308 	strd	r2, r3, [r7, #32]
			decimal_part += (*new_input - '0') / magnitude;
 80020e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	3b30      	subs	r3, #48	@ 0x30
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe f9de 	bl	80004ac <__aeabi_i2d>
 80020f0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80020f4:	f7fe fb6e 	bl	80007d4 <__aeabi_ddiv>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002100:	f7fe f888 	bl	8000214 <__adddf3>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
			new_input++;
 800210c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800210e:	3301      	adds	r3, #1
 8002110:	63fb      	str	r3, [r7, #60]	@ 0x3c
		while((c = *new_input) >= '0' && c <= '9')
 8002112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	77fb      	strb	r3, [r7, #31]
 8002118:	7ffb      	ldrb	r3, [r7, #31]
 800211a:	2b2f      	cmp	r3, #47	@ 0x2f
 800211c:	d902      	bls.n	8002124 <_get_next_token+0x3f4>
 800211e:	7ffb      	ldrb	r3, [r7, #31]
 8002120:	2b39      	cmp	r3, #57	@ 0x39
 8002122:	d9d4      	bls.n	80020ce <_get_next_token+0x39e>
		}
		out.rconst_value = integral_part + decimal_part;
 8002124:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002128:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800212c:	f7fe f872 	bl	8000214 <__adddf3>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	e9c7 2304 	strd	r2, r3, [r7, #16]
		*input = new_input;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800213c:	601a      	str	r2, [r3, #0]
		return out;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	461c      	mov	r4, r3
 8002142:	f107 0308 	add.w	r3, r7, #8
 8002146:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002148:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800214c:	e008      	b.n	8002160 <_get_next_token+0x430>
	}
	else
	{
		out.type = ERR;
 800214e:	230d      	movs	r3, #13
 8002150:	723b      	strb	r3, [r7, #8]
		return out;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	461c      	mov	r4, r3
 8002156:	f107 0308 	add.w	r3, r7, #8
 800215a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800215c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}
}
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	3744      	adds	r7, #68	@ 0x44
 8002164:	46bd      	mov	sp, r7
 8002166:	bd90      	pop	{r4, r7, pc}
 8002168:	3ff00000 	.word	0x3ff00000
 800216c:	40240000 	.word	0x40240000
 8002170:	54442d11 	.word	0x54442d11
 8002174:	400921fb 	.word	0x400921fb
 8002178:	8b145774 	.word	0x8b145774
 800217c:	4005bf0a 	.word	0x4005bf0a

08002180 <get_next_token>:

struct Token get_next_token(char **input)
{
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b087      	sub	sp, #28
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
	struct Token out;
	
	if(has_last_token)
 800218a:	4b13      	ldr	r3, [pc, #76]	@ (80021d8 <get_next_token+0x58>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00a      	beq.n	80021a8 <get_next_token+0x28>
	{
		has_last_token = 0;
 8002192:	4b11      	ldr	r3, [pc, #68]	@ (80021d8 <get_next_token+0x58>)
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
		return last_token;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a10      	ldr	r2, [pc, #64]	@ (80021dc <get_next_token+0x5c>)
 800219c:	461c      	mov	r4, r3
 800219e:	4613      	mov	r3, r2
 80021a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80021a6:	e013      	b.n	80021d0 <get_next_token+0x50>
	}

	out = _get_next_token(input);	
 80021a8:	f107 0308 	add.w	r3, r7, #8
 80021ac:	6839      	ldr	r1, [r7, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff fdbe 	bl	8001d30 <_get_next_token>
	last_token = out;
 80021b4:	4b09      	ldr	r3, [pc, #36]	@ (80021dc <get_next_token+0x5c>)
 80021b6:	461c      	mov	r4, r3
 80021b8:	f107 0308 	add.w	r3, r7, #8
 80021bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	return out;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	461c      	mov	r4, r3
 80021c6:	f107 0308 	add.w	r3, r7, #8
 80021ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	371c      	adds	r7, #28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd90      	pop	{r4, r7, pc}
 80021d8:	200000a0 	.word	0x200000a0
 80021dc:	200000a8 	.word	0x200000a8

080021e0 <unget_token>:
void unget_token(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
	has_last_token = 1;
 80021e4:	4b03      	ldr	r3, [pc, #12]	@ (80021f4 <unget_token+0x14>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	601a      	str	r2, [r3, #0]
}
 80021ea:	bf00      	nop
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	200000a0 	.word	0x200000a0

080021f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b0c8      	sub	sp, #288	@ 0x120
 80021fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021fe:	f001 f8ad 	bl	800335c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002202:	f000 fa4f 	bl	80026a4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002206:	f000 faf9 	bl	80027fc <MX_GPIO_Init>
  MX_TIM2_Init();
 800220a:	f000 faab 	bl	8002764 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HD44780U_Init();
 800220e:	f7fe ffc7 	bl	80011a0 <HD44780U_Init>
  button_matrix_init();
 8002212:	f7fe fe45 	bl	8000ea0 <button_matrix_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  input_index = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  input_string[0] = '\0';
 800221c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002220:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002224:	2200      	movs	r2, #0
 8002226:	701a      	strb	r2, [r3, #0]
  for(;;)
  {
	  char c = button_matrix_get_key();
 8002228:	f7fe ff14 	bl	8001054 <button_matrix_get_key>
 800222c:	4603      	mov	r3, r0
 800222e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b

	  if(input_index == 0)
 8002232:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <main+0x46>
	  {
		  HD44780U_Clear(); /* Clear the screen after displaying text. No effect on initial input */
 800223a:	f7ff f8e9 	bl	8001410 <HD44780U_Clear>
	  }

	  if(c == 'd') /* Delete key */
 800223e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8002242:	2b64      	cmp	r3, #100	@ 0x64
 8002244:	d115      	bne.n	8002272 <main+0x7a>
	  {
		  if(input_index == 0)
 8002246:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 821c 	beq.w	8002688 <main+0x490>
		  {
			  continue;
		  }
		  HD44780U_Delete_At_Cursor();
 8002250:	f7ff f818 	bl	8001284 <HD44780U_Delete_At_Cursor>
		  input_index--;
 8002254:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002258:	3b01      	subs	r3, #1
 800225a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
		  input_string[input_index] = '\0';
 800225e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002262:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 8002266:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800226a:	4413      	add	r3, r2
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
 8002270:	e7da      	b.n	8002228 <main+0x30>
	  }
	  else if(c == 'n') /* Enter key */
 8002272:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8002276:	2b6e      	cmp	r3, #110	@ 0x6e
 8002278:	d152      	bne.n	8002320 <main+0x128>
	  {
		  double retval;
		  int status;
		  char *input_ptr = &(input_string[0]);
 800227a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800227e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002282:	f107 0214 	add.w	r2, r7, #20
 8002286:	601a      	str	r2, [r3, #0]
		  status = parse_top(&input_ptr, &retval);
 8002288:	f107 0208 	add.w	r2, r7, #8
 800228c:	1d3b      	adds	r3, r7, #4
 800228e:	4611      	mov	r1, r2
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fa69 	bl	8001768 <parse_top>
 8002296:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
		  if(!status) /* Syntax error */
 800229a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d11c      	bne.n	80022dc <main+0xe4>
		  {
			  HD44780U_Clear();
 80022a2:	f7ff f8b5 	bl	8001410 <HD44780U_Clear>
			  if(error == SYNTAX)
 80022a6:	4bde      	ldr	r3, [pc, #888]	@ (8002620 <main+0x428>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d104      	bne.n	80022b8 <main+0xc0>
			  {
				  HD44780U_Write_Line(0, "Syntax error");
 80022ae:	49dd      	ldr	r1, [pc, #884]	@ (8002624 <main+0x42c>)
 80022b0:	2000      	movs	r0, #0
 80022b2:	f7ff f847 	bl	8001344 <HD44780U_Write_Line>
 80022b6:	e02b      	b.n	8002310 <main+0x118>
			  }
			  else if(error == DIV_ZERO)
 80022b8:	4bd9      	ldr	r3, [pc, #868]	@ (8002620 <main+0x428>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d104      	bne.n	80022ca <main+0xd2>
			  {
				  HD44780U_Write_Line(0, "Divide by zero");
 80022c0:	49d9      	ldr	r1, [pc, #868]	@ (8002628 <main+0x430>)
 80022c2:	2000      	movs	r0, #0
 80022c4:	f7ff f83e 	bl	8001344 <HD44780U_Write_Line>
 80022c8:	e022      	b.n	8002310 <main+0x118>
			  }
			  else if(error == BAD_LN)
 80022ca:	4bd5      	ldr	r3, [pc, #852]	@ (8002620 <main+0x428>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d11e      	bne.n	8002310 <main+0x118>
			  {
				  HD44780U_Write_Line(0, "Bad natural log (<=0)");
 80022d2:	49d6      	ldr	r1, [pc, #856]	@ (800262c <main+0x434>)
 80022d4:	2000      	movs	r0, #0
 80022d6:	f7ff f835 	bl	8001344 <HD44780U_Write_Line>
 80022da:	e019      	b.n	8002310 <main+0x118>
			  }
		  }
		  else
		  {
			  HD44780U_Write_Line(2, "                    ");
 80022dc:	49d4      	ldr	r1, [pc, #848]	@ (8002630 <main+0x438>)
 80022de:	2002      	movs	r0, #2
 80022e0:	f7ff f830 	bl	8001344 <HD44780U_Write_Line>
			  HD44780U_Write_Line(3, "                    ");
 80022e4:	49d2      	ldr	r1, [pc, #840]	@ (8002630 <main+0x438>)
 80022e6:	2003      	movs	r0, #3
 80022e8:	f7ff f82c 	bl	8001344 <HD44780U_Write_Line>
			  HD44780U_Write_Line(2, "Result:");
 80022ec:	49d1      	ldr	r1, [pc, #836]	@ (8002634 <main+0x43c>)
 80022ee:	2002      	movs	r0, #2
 80022f0:	f7ff f828 	bl	8001344 <HD44780U_Write_Line>
			  HD44780U_Move_Cursor(3, 0);
 80022f4:	2100      	movs	r1, #0
 80022f6:	2003      	movs	r0, #3
 80022f8:	f7ff f844 	bl	8001384 <HD44780U_Move_Cursor>
			  HD44780U_Write_Double(retval);
 80022fc:	f107 0310 	add.w	r3, r7, #16
 8002300:	ed13 7b02 	vldr	d7, [r3, #-8]
 8002304:	eeb0 0a47 	vmov.f32	s0, s14
 8002308:	eef0 0a67 	vmov.f32	s1, s15
 800230c:	f7ff f914 	bl	8001538 <HD44780U_Write_Double>
		  }

		  input_index = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
		  HD44780U_Move_Cursor(0, 0);
 8002316:	2100      	movs	r1, #0
 8002318:	2000      	movs	r0, #0
 800231a:	f7ff f833 	bl	8001384 <HD44780U_Move_Cursor>
 800231e:	e783      	b.n	8002228 <main+0x30>
	  }
	  else if(c == 'p') /* pi */
 8002320:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8002324:	2b70      	cmp	r3, #112	@ 0x70
 8002326:	d11a      	bne.n	800235e <main+0x166>
	  {
		  HD44780U_Write_At_Cursor(247);
 8002328:	20f7      	movs	r0, #247	@ 0xf7
 800232a:	f7fe ff77 	bl	800121c <HD44780U_Write_At_Cursor>
		  input_string[input_index] = 'p';
 800232e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002332:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 8002336:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800233a:	4413      	add	r3, r2
 800233c:	2270      	movs	r2, #112	@ 0x70
 800233e:	701a      	strb	r2, [r3, #0]
		  input_index++;
 8002340:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002344:	3301      	adds	r3, #1
 8002346:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
		  input_string[input_index] = '\0';
 800234a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800234e:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 8002352:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002356:	4413      	add	r3, r2
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
 800235c:	e764      	b.n	8002228 <main+0x30>

	  }
	  else if(c == 'e') /* e */
 800235e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8002362:	2b65      	cmp	r3, #101	@ 0x65
 8002364:	d11a      	bne.n	800239c <main+0x1a4>
	  {
		  HD44780U_Write_At_Cursor('e');
 8002366:	2065      	movs	r0, #101	@ 0x65
 8002368:	f7fe ff58 	bl	800121c <HD44780U_Write_At_Cursor>
		  input_string[input_index] = 'e';
 800236c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002370:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 8002374:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002378:	4413      	add	r3, r2
 800237a:	2265      	movs	r2, #101	@ 0x65
 800237c:	701a      	strb	r2, [r3, #0]
		  input_index++;
 800237e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002382:	3301      	adds	r3, #1
 8002384:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
		  input_string[input_index] = '\0';
 8002388:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800238c:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 8002390:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002394:	4413      	add	r3, r2
 8002396:	2200      	movs	r2, #0
 8002398:	701a      	strb	r2, [r3, #0]
 800239a:	e745      	b.n	8002228 <main+0x30>

	  }
	  else if(c == 'l') /* natural log, multi-character */
 800239c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80023a0:	2b6c      	cmp	r3, #108	@ 0x6c
 80023a2:	d143      	bne.n	800242c <main+0x234>
	  {
		  if(79 - input_index < 3)
 80023a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80023a8:	f1c3 034f 	rsb	r3, r3, #79	@ 0x4f
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	f340 816d 	ble.w	800268c <main+0x494>
		  {
			  continue;
		  }
		  HD44780U_Write_At_Cursor('l');
 80023b2:	206c      	movs	r0, #108	@ 0x6c
 80023b4:	f7fe ff32 	bl	800121c <HD44780U_Write_At_Cursor>
		  input_string[input_index] = 'l';
 80023b8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80023bc:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 80023c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80023c4:	4413      	add	r3, r2
 80023c6:	226c      	movs	r2, #108	@ 0x6c
 80023c8:	701a      	strb	r2, [r3, #0]
		  input_index++;
 80023ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80023ce:	3301      	adds	r3, #1
 80023d0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
		  HD44780U_Write_At_Cursor('n');
 80023d4:	206e      	movs	r0, #110	@ 0x6e
 80023d6:	f7fe ff21 	bl	800121c <HD44780U_Write_At_Cursor>
		  input_string[input_index] = 'n';
 80023da:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80023de:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 80023e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80023e6:	4413      	add	r3, r2
 80023e8:	226e      	movs	r2, #110	@ 0x6e
 80023ea:	701a      	strb	r2, [r3, #0]
		  input_index++;
 80023ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80023f0:	3301      	adds	r3, #1
 80023f2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
		  HD44780U_Write_At_Cursor('(');
 80023f6:	2028      	movs	r0, #40	@ 0x28
 80023f8:	f7fe ff10 	bl	800121c <HD44780U_Write_At_Cursor>
		  input_string[input_index] = '(';
 80023fc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002400:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 8002404:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002408:	4413      	add	r3, r2
 800240a:	2228      	movs	r2, #40	@ 0x28
 800240c:	701a      	strb	r2, [r3, #0]
		  input_index++;
 800240e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002412:	3301      	adds	r3, #1
 8002414:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
		  input_string[input_index] = '\0';
 8002418:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800241c:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 8002420:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002424:	4413      	add	r3, r2
 8002426:	2200      	movs	r2, #0
 8002428:	701a      	strb	r2, [r3, #0]
 800242a:	e6fd      	b.n	8002228 <main+0x30>
	  }
	  else if(c == 'a') /* Ans, multi-character */
 800242c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8002430:	2b61      	cmp	r3, #97	@ 0x61
 8002432:	d143      	bne.n	80024bc <main+0x2c4>
	  {
		  if(79 - input_index < 3)
 8002434:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002438:	f1c3 034f 	rsb	r3, r3, #79	@ 0x4f
 800243c:	2b02      	cmp	r3, #2
 800243e:	f340 8127 	ble.w	8002690 <main+0x498>
		  {
			  continue;
		  }
		  HD44780U_Write_At_Cursor('A');
 8002442:	2041      	movs	r0, #65	@ 0x41
 8002444:	f7fe feea 	bl	800121c <HD44780U_Write_At_Cursor>
		  input_string[input_index] = 'A';
 8002448:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800244c:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 8002450:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002454:	4413      	add	r3, r2
 8002456:	2241      	movs	r2, #65	@ 0x41
 8002458:	701a      	strb	r2, [r3, #0]
		  input_index++;
 800245a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800245e:	3301      	adds	r3, #1
 8002460:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
		  HD44780U_Write_At_Cursor('n');
 8002464:	206e      	movs	r0, #110	@ 0x6e
 8002466:	f7fe fed9 	bl	800121c <HD44780U_Write_At_Cursor>
		  input_string[input_index] = 'n';
 800246a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800246e:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 8002472:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002476:	4413      	add	r3, r2
 8002478:	226e      	movs	r2, #110	@ 0x6e
 800247a:	701a      	strb	r2, [r3, #0]
		  input_index++;
 800247c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002480:	3301      	adds	r3, #1
 8002482:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
		  HD44780U_Write_At_Cursor('s');
 8002486:	2073      	movs	r0, #115	@ 0x73
 8002488:	f7fe fec8 	bl	800121c <HD44780U_Write_At_Cursor>
		  input_string[input_index] = 's';
 800248c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002490:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 8002494:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002498:	4413      	add	r3, r2
 800249a:	2273      	movs	r2, #115	@ 0x73
 800249c:	701a      	strb	r2, [r3, #0]
		  input_index++;
 800249e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80024a2:	3301      	adds	r3, #1
 80024a4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
		  input_string[input_index] = '\0';
 80024a8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80024ac:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 80024b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80024b4:	4413      	add	r3, r2
 80024b6:	2200      	movs	r2, #0
 80024b8:	701a      	strb	r2, [r3, #0]
 80024ba:	e6b5      	b.n	8002228 <main+0x30>
	  }
	  else if(c == 's') /* sin, multi-character */
 80024bc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80024c0:	2b73      	cmp	r3, #115	@ 0x73
 80024c2:	d154      	bne.n	800256e <main+0x376>
	  {
		  if(79 - input_index < 4)
 80024c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80024c8:	f1c3 034f 	rsb	r3, r3, #79	@ 0x4f
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	f340 80e1 	ble.w	8002694 <main+0x49c>
		  {
			  continue;
		  }
		  HD44780U_Write_At_Cursor('s');
 80024d2:	2073      	movs	r0, #115	@ 0x73
 80024d4:	f7fe fea2 	bl	800121c <HD44780U_Write_At_Cursor>
		  input_string[input_index] = 's';
 80024d8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80024dc:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 80024e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80024e4:	4413      	add	r3, r2
 80024e6:	2273      	movs	r2, #115	@ 0x73
 80024e8:	701a      	strb	r2, [r3, #0]
		  input_index++;
 80024ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80024ee:	3301      	adds	r3, #1
 80024f0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
		  HD44780U_Write_At_Cursor('i');
 80024f4:	2069      	movs	r0, #105	@ 0x69
 80024f6:	f7fe fe91 	bl	800121c <HD44780U_Write_At_Cursor>
		  input_string[input_index] = 'i';
 80024fa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80024fe:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 8002502:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002506:	4413      	add	r3, r2
 8002508:	2269      	movs	r2, #105	@ 0x69
 800250a:	701a      	strb	r2, [r3, #0]
		  input_index++;
 800250c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002510:	3301      	adds	r3, #1
 8002512:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
		  HD44780U_Write_At_Cursor('n');
 8002516:	206e      	movs	r0, #110	@ 0x6e
 8002518:	f7fe fe80 	bl	800121c <HD44780U_Write_At_Cursor>
		  input_string[input_index] = 'n';
 800251c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002520:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 8002524:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002528:	4413      	add	r3, r2
 800252a:	226e      	movs	r2, #110	@ 0x6e
 800252c:	701a      	strb	r2, [r3, #0]
		  input_index++;
 800252e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002532:	3301      	adds	r3, #1
 8002534:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
		  HD44780U_Write_At_Cursor('(');
 8002538:	2028      	movs	r0, #40	@ 0x28
 800253a:	f7fe fe6f 	bl	800121c <HD44780U_Write_At_Cursor>
		  input_string[input_index] = '(';
 800253e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002542:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 8002546:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800254a:	4413      	add	r3, r2
 800254c:	2228      	movs	r2, #40	@ 0x28
 800254e:	701a      	strb	r2, [r3, #0]
		  input_index++;
 8002550:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002554:	3301      	adds	r3, #1
 8002556:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
		  input_string[input_index] = '\0';
 800255a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800255e:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 8002562:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002566:	4413      	add	r3, r2
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]
 800256c:	e65c      	b.n	8002228 <main+0x30>
	  }
	  else if(c == 'c') /* cos, multi-character */
 800256e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8002572:	2b63      	cmp	r3, #99	@ 0x63
 8002574:	d160      	bne.n	8002638 <main+0x440>
	  {
		  if(79 - input_index < 4)
 8002576:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800257a:	f1c3 034f 	rsb	r3, r3, #79	@ 0x4f
 800257e:	2b03      	cmp	r3, #3
 8002580:	f340 808a 	ble.w	8002698 <main+0x4a0>
		  {
			  continue;
		  }
		  HD44780U_Write_At_Cursor('c');
 8002584:	2063      	movs	r0, #99	@ 0x63
 8002586:	f7fe fe49 	bl	800121c <HD44780U_Write_At_Cursor>
		  input_string[input_index] = 'c';
 800258a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800258e:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 8002592:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002596:	4413      	add	r3, r2
 8002598:	2263      	movs	r2, #99	@ 0x63
 800259a:	701a      	strb	r2, [r3, #0]
		  input_index++;
 800259c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80025a0:	3301      	adds	r3, #1
 80025a2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
		  HD44780U_Write_At_Cursor('o');
 80025a6:	206f      	movs	r0, #111	@ 0x6f
 80025a8:	f7fe fe38 	bl	800121c <HD44780U_Write_At_Cursor>
		  input_string[input_index] = 'o';
 80025ac:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80025b0:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 80025b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80025b8:	4413      	add	r3, r2
 80025ba:	226f      	movs	r2, #111	@ 0x6f
 80025bc:	701a      	strb	r2, [r3, #0]
		  input_index++;
 80025be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80025c2:	3301      	adds	r3, #1
 80025c4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
		  HD44780U_Write_At_Cursor('s');
 80025c8:	2073      	movs	r0, #115	@ 0x73
 80025ca:	f7fe fe27 	bl	800121c <HD44780U_Write_At_Cursor>
		  input_string[input_index] = 's';
 80025ce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80025d2:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 80025d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80025da:	4413      	add	r3, r2
 80025dc:	2273      	movs	r2, #115	@ 0x73
 80025de:	701a      	strb	r2, [r3, #0]
		  input_index++;
 80025e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80025e4:	3301      	adds	r3, #1
 80025e6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
		  HD44780U_Write_At_Cursor('(');
 80025ea:	2028      	movs	r0, #40	@ 0x28
 80025ec:	f7fe fe16 	bl	800121c <HD44780U_Write_At_Cursor>
		  input_string[input_index] = '(';
 80025f0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80025f4:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 80025f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80025fc:	4413      	add	r3, r2
 80025fe:	2228      	movs	r2, #40	@ 0x28
 8002600:	701a      	strb	r2, [r3, #0]
		  input_index++;
 8002602:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002606:	3301      	adds	r3, #1
 8002608:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
		  input_string[input_index] = '\0';
 800260c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002610:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 8002614:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002618:	4413      	add	r3, r2
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]
 800261e:	e603      	b.n	8002228 <main+0x30>
 8002620:	20000062 	.word	0x20000062
 8002624:	08004d40 	.word	0x08004d40
 8002628:	08004d50 	.word	0x08004d50
 800262c:	08004d60 	.word	0x08004d60
 8002630:	08004d78 	.word	0x08004d78
 8002634:	08004d90 	.word	0x08004d90
	  }
	  else if(c == '\0') /* Dead key, skip */
 8002638:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800263c:	2b00      	cmp	r3, #0
 800263e:	d02d      	beq.n	800269c <main+0x4a4>
	  {
		  continue;
	  }
	  else /* Something else */
	  {
		  if(79 - input_index < 1)
 8002640:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002644:	f1c3 034f 	rsb	r3, r3, #79	@ 0x4f
 8002648:	2b00      	cmp	r3, #0
 800264a:	dd29      	ble.n	80026a0 <main+0x4a8>
		  {
			  continue;
		  }
		  HD44780U_Write_At_Cursor(c);
 800264c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8002650:	4618      	mov	r0, r3
 8002652:	f7fe fde3 	bl	800121c <HD44780U_Write_At_Cursor>
		  input_string[input_index] = c;
 8002656:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800265a:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 800265e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002662:	4413      	add	r3, r2
 8002664:	f897 211b 	ldrb.w	r2, [r7, #283]	@ 0x11b
 8002668:	701a      	strb	r2, [r3, #0]
		  input_index++;
 800266a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800266e:	3301      	adds	r3, #1
 8002670:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
		  input_string[input_index] = '\0';
 8002674:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002678:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 800267c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002680:	4413      	add	r3, r2
 8002682:	2200      	movs	r2, #0
 8002684:	701a      	strb	r2, [r3, #0]
 8002686:	e5cf      	b.n	8002228 <main+0x30>
			  continue;
 8002688:	bf00      	nop
 800268a:	e5cd      	b.n	8002228 <main+0x30>
			  continue;
 800268c:	bf00      	nop
 800268e:	e5cb      	b.n	8002228 <main+0x30>
			  continue;
 8002690:	bf00      	nop
 8002692:	e5c9      	b.n	8002228 <main+0x30>
			  continue;
 8002694:	bf00      	nop
 8002696:	e5c7      	b.n	8002228 <main+0x30>
			  continue;
 8002698:	bf00      	nop
 800269a:	e5c5      	b.n	8002228 <main+0x30>
		  continue;
 800269c:	bf00      	nop
 800269e:	e5c3      	b.n	8002228 <main+0x30>
			  continue;
 80026a0:	bf00      	nop
  {
 80026a2:	e5c1      	b.n	8002228 <main+0x30>

080026a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b094      	sub	sp, #80	@ 0x50
 80026a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026aa:	f107 031c 	add.w	r3, r7, #28
 80026ae:	2234      	movs	r2, #52	@ 0x34
 80026b0:	2100      	movs	r1, #0
 80026b2:	4618      	mov	r0, r3
 80026b4:	f002 fafc 	bl	8004cb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026b8:	f107 0308 	add.w	r3, r7, #8
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	60da      	str	r2, [r3, #12]
 80026c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026c8:	2300      	movs	r3, #0
 80026ca:	607b      	str	r3, [r7, #4]
 80026cc:	4b23      	ldr	r3, [pc, #140]	@ (800275c <SystemClock_Config+0xb8>)
 80026ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d0:	4a22      	ldr	r2, [pc, #136]	@ (800275c <SystemClock_Config+0xb8>)
 80026d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80026d8:	4b20      	ldr	r3, [pc, #128]	@ (800275c <SystemClock_Config+0xb8>)
 80026da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026e0:	607b      	str	r3, [r7, #4]
 80026e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80026e4:	2300      	movs	r3, #0
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002760 <SystemClock_Config+0xbc>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80026f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002760 <SystemClock_Config+0xbc>)
 80026f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026f6:	6013      	str	r3, [r2, #0]
 80026f8:	4b19      	ldr	r3, [pc, #100]	@ (8002760 <SystemClock_Config+0xbc>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002700:	603b      	str	r3, [r7, #0]
 8002702:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002704:	2302      	movs	r3, #2
 8002706:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002708:	2301      	movs	r3, #1
 800270a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800270c:	2310      	movs	r3, #16
 800270e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002710:	2300      	movs	r3, #0
 8002712:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002714:	f107 031c 	add.w	r3, r7, #28
 8002718:	4618      	mov	r0, r3
 800271a:	f001 fc1d 	bl	8003f58 <HAL_RCC_OscConfig>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002724:	f000 f90c 	bl	8002940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002728:	230f      	movs	r3, #15
 800272a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800272c:	2300      	movs	r3, #0
 800272e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002730:	2300      	movs	r3, #0
 8002732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002738:	2300      	movs	r3, #0
 800273a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800273c:	f107 0308 	add.w	r3, r7, #8
 8002740:	2100      	movs	r1, #0
 8002742:	4618      	mov	r0, r3
 8002744:	f001 f978 	bl	8003a38 <HAL_RCC_ClockConfig>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800274e:	f000 f8f7 	bl	8002940 <Error_Handler>
  }
}
 8002752:	bf00      	nop
 8002754:	3750      	adds	r7, #80	@ 0x50
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40023800 	.word	0x40023800
 8002760:	40007000 	.word	0x40007000

08002764 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800276a:	f107 0308 	add.w	r3, r7, #8
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	605a      	str	r2, [r3, #4]
 8002774:	609a      	str	r2, [r3, #8]
 8002776:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002778:	463b      	mov	r3, r7
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002780:	4b1d      	ldr	r3, [pc, #116]	@ (80027f8 <MX_TIM2_Init+0x94>)
 8002782:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002786:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002788:	4b1b      	ldr	r3, [pc, #108]	@ (80027f8 <MX_TIM2_Init+0x94>)
 800278a:	2200      	movs	r2, #0
 800278c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800278e:	4b1a      	ldr	r3, [pc, #104]	@ (80027f8 <MX_TIM2_Init+0x94>)
 8002790:	2200      	movs	r2, #0
 8002792:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002794:	4b18      	ldr	r3, [pc, #96]	@ (80027f8 <MX_TIM2_Init+0x94>)
 8002796:	f04f 32ff 	mov.w	r2, #4294967295
 800279a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800279c:	4b16      	ldr	r3, [pc, #88]	@ (80027f8 <MX_TIM2_Init+0x94>)
 800279e:	2200      	movs	r2, #0
 80027a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027a2:	4b15      	ldr	r3, [pc, #84]	@ (80027f8 <MX_TIM2_Init+0x94>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027a8:	4813      	ldr	r0, [pc, #76]	@ (80027f8 <MX_TIM2_Init+0x94>)
 80027aa:	f001 fe73 	bl	8004494 <HAL_TIM_Base_Init>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80027b4:	f000 f8c4 	bl	8002940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027be:	f107 0308 	add.w	r3, r7, #8
 80027c2:	4619      	mov	r1, r3
 80027c4:	480c      	ldr	r0, [pc, #48]	@ (80027f8 <MX_TIM2_Init+0x94>)
 80027c6:	f001 ffa4 	bl	8004712 <HAL_TIM_ConfigClockSource>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80027d0:	f000 f8b6 	bl	8002940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027d4:	2300      	movs	r3, #0
 80027d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027d8:	2300      	movs	r3, #0
 80027da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027dc:	463b      	mov	r3, r7
 80027de:	4619      	mov	r1, r3
 80027e0:	4805      	ldr	r0, [pc, #20]	@ (80027f8 <MX_TIM2_Init+0x94>)
 80027e2:	f002 f9d5 	bl	8004b90 <HAL_TIMEx_MasterConfigSynchronization>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80027ec:	f000 f8a8 	bl	8002940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */

}
 80027f0:	bf00      	nop
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	200000b8 	.word	0x200000b8

080027fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002802:	f107 030c 	add.w	r3, r7, #12
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	605a      	str	r2, [r3, #4]
 800280c:	609a      	str	r2, [r3, #8]
 800280e:	60da      	str	r2, [r3, #12]
 8002810:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	4b46      	ldr	r3, [pc, #280]	@ (8002930 <MX_GPIO_Init+0x134>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281a:	4a45      	ldr	r2, [pc, #276]	@ (8002930 <MX_GPIO_Init+0x134>)
 800281c:	f043 0304 	orr.w	r3, r3, #4
 8002820:	6313      	str	r3, [r2, #48]	@ 0x30
 8002822:	4b43      	ldr	r3, [pc, #268]	@ (8002930 <MX_GPIO_Init+0x134>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	60bb      	str	r3, [r7, #8]
 800282c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	607b      	str	r3, [r7, #4]
 8002832:	4b3f      	ldr	r3, [pc, #252]	@ (8002930 <MX_GPIO_Init+0x134>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002836:	4a3e      	ldr	r2, [pc, #248]	@ (8002930 <MX_GPIO_Init+0x134>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	6313      	str	r3, [r2, #48]	@ 0x30
 800283e:	4b3c      	ldr	r3, [pc, #240]	@ (8002930 <MX_GPIO_Init+0x134>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	607b      	str	r3, [r7, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	603b      	str	r3, [r7, #0]
 800284e:	4b38      	ldr	r3, [pc, #224]	@ (8002930 <MX_GPIO_Init+0x134>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002852:	4a37      	ldr	r2, [pc, #220]	@ (8002930 <MX_GPIO_Init+0x134>)
 8002854:	f043 0302 	orr.w	r3, r3, #2
 8002858:	6313      	str	r3, [r2, #48]	@ 0x30
 800285a:	4b35      	ldr	r3, [pc, #212]	@ (8002930 <MX_GPIO_Init+0x134>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7, GPIO_PIN_RESET);
 8002866:	2200      	movs	r2, #0
 8002868:	218c      	movs	r1, #140	@ 0x8c
 800286a:	4832      	ldr	r0, [pc, #200]	@ (8002934 <MX_GPIO_Init+0x138>)
 800286c:	f001 f8ca 	bl	8003a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8002870:	2200      	movs	r2, #0
 8002872:	f44f 713d 	mov.w	r1, #756	@ 0x2f4
 8002876:	4830      	ldr	r0, [pc, #192]	@ (8002938 <MX_GPIO_Init+0x13c>)
 8002878:	f001 f8c4 	bl	8003a04 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800287c:	2200      	movs	r2, #0
 800287e:	21c2      	movs	r1, #194	@ 0xc2
 8002880:	482e      	ldr	r0, [pc, #184]	@ (800293c <MX_GPIO_Init+0x140>)
 8002882:	f001 f8bf 	bl	8003a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002886:	2303      	movs	r3, #3
 8002888:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800288a:	2300      	movs	r3, #0
 800288c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800288e:	2301      	movs	r3, #1
 8002890:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002892:	f107 030c 	add.w	r3, r7, #12
 8002896:	4619      	mov	r1, r3
 8002898:	4826      	ldr	r0, [pc, #152]	@ (8002934 <MX_GPIO_Init+0x138>)
 800289a:	f000 ff07 	bl	80036ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7;
 800289e:	238c      	movs	r3, #140	@ 0x8c
 80028a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028a2:	2301      	movs	r3, #1
 80028a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ae:	f107 030c 	add.w	r3, r7, #12
 80028b2:	4619      	mov	r1, r3
 80028b4:	481f      	ldr	r0, [pc, #124]	@ (8002934 <MX_GPIO_Init+0x138>)
 80028b6:	f000 fef9 	bl	80036ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8;
 80028ba:	f240 1303 	movw	r3, #259	@ 0x103
 80028be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028c0:	2300      	movs	r3, #0
 80028c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028c4:	2301      	movs	r3, #1
 80028c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c8:	f107 030c 	add.w	r3, r7, #12
 80028cc:	4619      	mov	r1, r3
 80028ce:	481a      	ldr	r0, [pc, #104]	@ (8002938 <MX_GPIO_Init+0x13c>)
 80028d0:	f000 feec 	bl	80036ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA5 PA6
                           PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80028d4:	f44f 733d 	mov.w	r3, #756	@ 0x2f4
 80028d8:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_7|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028da:	2301      	movs	r3, #1
 80028dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e2:	2300      	movs	r3, #0
 80028e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e6:	f107 030c 	add.w	r3, r7, #12
 80028ea:	4619      	mov	r1, r3
 80028ec:	4812      	ldr	r0, [pc, #72]	@ (8002938 <MX_GPIO_Init+0x13c>)
 80028ee:	f000 fedd 	bl	80036ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_5;
 80028f2:	2329      	movs	r3, #41	@ 0x29
 80028f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028f6:	2300      	movs	r3, #0
 80028f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028fa:	2301      	movs	r3, #1
 80028fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028fe:	f107 030c 	add.w	r3, r7, #12
 8002902:	4619      	mov	r1, r3
 8002904:	480d      	ldr	r0, [pc, #52]	@ (800293c <MX_GPIO_Init+0x140>)
 8002906:	f000 fed1 	bl	80036ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800290a:	23c2      	movs	r3, #194	@ 0xc2
 800290c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800290e:	2301      	movs	r3, #1
 8002910:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002916:	2300      	movs	r3, #0
 8002918:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291a:	f107 030c 	add.w	r3, r7, #12
 800291e:	4619      	mov	r1, r3
 8002920:	4806      	ldr	r0, [pc, #24]	@ (800293c <MX_GPIO_Init+0x140>)
 8002922:	f000 fec3 	bl	80036ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002926:	bf00      	nop
 8002928:	3720      	adds	r7, #32
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40023800 	.word	0x40023800
 8002934:	40020800 	.word	0x40020800
 8002938:	40020000 	.word	0x40020000
 800293c:	40020400 	.word	0x40020400

08002940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
	...

08002950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	607b      	str	r3, [r7, #4]
 800295a:	4b10      	ldr	r3, [pc, #64]	@ (800299c <HAL_MspInit+0x4c>)
 800295c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295e:	4a0f      	ldr	r2, [pc, #60]	@ (800299c <HAL_MspInit+0x4c>)
 8002960:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002964:	6453      	str	r3, [r2, #68]	@ 0x44
 8002966:	4b0d      	ldr	r3, [pc, #52]	@ (800299c <HAL_MspInit+0x4c>)
 8002968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800296a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800296e:	607b      	str	r3, [r7, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	603b      	str	r3, [r7, #0]
 8002976:	4b09      	ldr	r3, [pc, #36]	@ (800299c <HAL_MspInit+0x4c>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	4a08      	ldr	r2, [pc, #32]	@ (800299c <HAL_MspInit+0x4c>)
 800297c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002980:	6413      	str	r3, [r2, #64]	@ 0x40
 8002982:	4b06      	ldr	r3, [pc, #24]	@ (800299c <HAL_MspInit+0x4c>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800298a:	603b      	str	r3, [r7, #0]
 800298c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800

080029a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029b0:	d115      	bne.n	80029de <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	4b0c      	ldr	r3, [pc, #48]	@ (80029e8 <HAL_TIM_Base_MspInit+0x48>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	4a0b      	ldr	r2, [pc, #44]	@ (80029e8 <HAL_TIM_Base_MspInit+0x48>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80029c2:	4b09      	ldr	r3, [pc, #36]	@ (80029e8 <HAL_TIM_Base_MspInit+0x48>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029ce:	2200      	movs	r2, #0
 80029d0:	2100      	movs	r1, #0
 80029d2:	201c      	movs	r0, #28
 80029d4:	f000 fe33 	bl	800363e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029d8:	201c      	movs	r0, #28
 80029da:	f000 fe4c 	bl	8003676 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80029de:	bf00      	nop
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40023800 	.word	0x40023800

080029ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029f0:	bf00      	nop
 80029f2:	e7fd      	b.n	80029f0 <NMI_Handler+0x4>

080029f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029f8:	bf00      	nop
 80029fa:	e7fd      	b.n	80029f8 <HardFault_Handler+0x4>

080029fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a00:	bf00      	nop
 8002a02:	e7fd      	b.n	8002a00 <MemManage_Handler+0x4>

08002a04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a08:	bf00      	nop
 8002a0a:	e7fd      	b.n	8002a08 <BusFault_Handler+0x4>

08002a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a10:	bf00      	nop
 8002a12:	e7fd      	b.n	8002a10 <UsageFault_Handler+0x4>

08002a14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a18:	bf00      	nop
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a22:	b480      	push	{r7}
 8002a24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a34:	bf00      	nop
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a42:	f000 fcdd 	bl	8003400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a46:	bf00      	nop
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a50:	4802      	ldr	r0, [pc, #8]	@ (8002a5c <TIM2_IRQHandler+0x10>)
 8002a52:	f001 fd6e 	bl	8004532 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a56:	bf00      	nop
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	200000b8 	.word	0x200000b8

08002a60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a64:	4b06      	ldr	r3, [pc, #24]	@ (8002a80 <SystemInit+0x20>)
 8002a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a6a:	4a05      	ldr	r2, [pc, #20]	@ (8002a80 <SystemInit+0x20>)
 8002a6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <powfi>:
/* Computes f^i */
double powfi(double f, int i)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	ed87 0b02 	vstr	d0, [r7, #8]
 8002a8e:	6078      	str	r0, [r7, #4]
	int j;
	int negative = 0;
 8002a90:	2300      	movs	r3, #0
 8002a92:	61bb      	str	r3, [r7, #24]
	double out = 1.0;
 8002a94:	f04f 0200 	mov.w	r2, #0
 8002a98:	4b1b      	ldr	r3, [pc, #108]	@ (8002b08 <powfi+0x84>)
 8002a9a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	if(i < 0)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	da04      	bge.n	8002aae <powfi+0x2a>
	{
		negative = 1;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	61bb      	str	r3, [r7, #24]
		i = -i;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	425b      	negs	r3, r3
 8002aac:	607b      	str	r3, [r7, #4]
	}

	for(j = 0; j < i; j++)
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
 8002ab2:	e00c      	b.n	8002ace <powfi+0x4a>
	{
		out *= f;
 8002ab4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ab8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002abc:	f7fd fd60 	bl	8000580 <__aeabi_dmul>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for(j = 0; j < i; j++)
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	3301      	adds	r3, #1
 8002acc:	61fb      	str	r3, [r7, #28]
 8002ace:	69fa      	ldr	r2, [r7, #28]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	dbee      	blt.n	8002ab4 <powfi+0x30>
	}

	if(negative)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d009      	beq.n	8002af0 <powfi+0x6c>
	{
		return 1.0/out;
 8002adc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ae0:	f04f 0000 	mov.w	r0, #0
 8002ae4:	4908      	ldr	r1, [pc, #32]	@ (8002b08 <powfi+0x84>)
 8002ae6:	f7fd fe75 	bl	80007d4 <__aeabi_ddiv>
 8002aea:	4602      	mov	r2, r0
 8002aec:	460b      	mov	r3, r1
 8002aee:	e001      	b.n	8002af4 <powfi+0x70>
	}
	else
	{
		return out;
 8002af0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
	}
}
 8002af4:	ec43 2b17 	vmov	d7, r2, r3
 8002af8:	eeb0 0a47 	vmov.f32	s0, s14
 8002afc:	eef0 0a67 	vmov.f32	s1, s15
 8002b00:	3720      	adds	r7, #32
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	3ff00000 	.word	0x3ff00000

08002b0c <absf>:

double absf(double f)
{
 8002b0c:	b5b0      	push	{r4, r5, r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	ed87 0b00 	vstr	d0, [r7]
	if(f < 0)
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	f04f 0300 	mov.w	r3, #0
 8002b1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b22:	f7fd ff9f 	bl	8000a64 <__aeabi_dcmplt>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d005      	beq.n	8002b38 <absf+0x2c>
		f = -f;
 8002b2c:	683c      	ldr	r4, [r7, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002b34:	e9c7 4500 	strd	r4, r5, [r7]
	return f;
 8002b38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b3c:	ec43 2b17 	vmov	d7, r2, r3
}
 8002b40:	eeb0 0a47 	vmov.f32	s0, s14
 8002b44:	eef0 0a67 	vmov.f32	s1, s15
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002b50 <lnf_near_1>:

/* Approximates ln(f) where f is close to 1 using Taylor Series */
double lnf_near_1(double f)
{
 8002b50:	b5b0      	push	{r4, r5, r7, lr}
 8002b52:	b0a6      	sub	sp, #152	@ 0x98
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	ed87 0b00 	vstr	d0, [r7]
    double out;
    int negative = 0;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	/* ln_LUT[] = {ln(1.0), ln(1.1), ln(1.2) ... ln(2.0)} */
	double ln_LUT[] = {0.0, 0.09531017980432493, 0.1823215567939546, 0.26236426446749106, 0.3364722366212129, 0.4054651081081644, 0.47000362924573563, 0.5306282510621704, 0.5877866649021191, 0.6418538861723947, 0.6931471805599453};
 8002b60:	4a8f      	ldr	r2, [pc, #572]	@ (8002da0 <lnf_near_1+0x250>)
 8002b62:	f107 0308 	add.w	r3, r7, #8
 8002b66:	4611      	mov	r1, r2
 8002b68:	2258      	movs	r2, #88	@ 0x58
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f002 f8cc 	bl	8004d08 <memcpy>
	double min_diff = 100.0;
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	4b8b      	ldr	r3, [pc, #556]	@ (8002da4 <lnf_near_1+0x254>)
 8002b76:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	double expansion_point = 1.0;
 8002b7a:	f04f 0200 	mov.w	r2, #0
 8002b7e:	4b8a      	ldr	r3, [pc, #552]	@ (8002da8 <lnf_near_1+0x258>)
 8002b80:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	double expansion_point_value = 0.0;
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	double divisor;
	int i;
	for(i = 0; i < 10; i++)
 8002b90:	2300      	movs	r3, #0
 8002b92:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b94:	e06d      	b.n	8002c72 <lnf_near_1+0x122>
	{
		if(min_diff > absf(f - (1 + i/10.0)))
 8002b96:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002b98:	f7fd fc88 	bl	80004ac <__aeabi_i2d>
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	4b82      	ldr	r3, [pc, #520]	@ (8002dac <lnf_near_1+0x25c>)
 8002ba2:	f7fd fe17 	bl	80007d4 <__aeabi_ddiv>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4610      	mov	r0, r2
 8002bac:	4619      	mov	r1, r3
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	4b7d      	ldr	r3, [pc, #500]	@ (8002da8 <lnf_near_1+0x258>)
 8002bb4:	f7fd fb2e 	bl	8000214 <__adddf3>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002bc0:	f7fd fb26 	bl	8000210 <__aeabi_dsub>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	ec43 2b17 	vmov	d7, r2, r3
 8002bcc:	eeb0 0a47 	vmov.f32	s0, s14
 8002bd0:	eef0 0a67 	vmov.f32	s1, s15
 8002bd4:	f7ff ff9a 	bl	8002b0c <absf>
 8002bd8:	ec53 2b10 	vmov	r2, r3, d0
 8002bdc:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002be0:	f7fd ff5e 	bl	8000aa0 <__aeabi_dcmpgt>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d040      	beq.n	8002c6c <lnf_near_1+0x11c>
		{
			min_diff = absf(f - (1 + i/10.0));
 8002bea:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002bec:	f7fd fc5e 	bl	80004ac <__aeabi_i2d>
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	4b6d      	ldr	r3, [pc, #436]	@ (8002dac <lnf_near_1+0x25c>)
 8002bf6:	f7fd fded 	bl	80007d4 <__aeabi_ddiv>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	4610      	mov	r0, r2
 8002c00:	4619      	mov	r1, r3
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	4b68      	ldr	r3, [pc, #416]	@ (8002da8 <lnf_near_1+0x258>)
 8002c08:	f7fd fb04 	bl	8000214 <__adddf3>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c14:	f7fd fafc 	bl	8000210 <__aeabi_dsub>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	ec43 2b17 	vmov	d7, r2, r3
 8002c20:	eeb0 0a47 	vmov.f32	s0, s14
 8002c24:	eef0 0a67 	vmov.f32	s1, s15
 8002c28:	f7ff ff70 	bl	8002b0c <absf>
 8002c2c:	ed87 0b20 	vstr	d0, [r7, #128]	@ 0x80
			expansion_point = 1 + 0.1 * i;
 8002c30:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002c32:	f7fd fc3b 	bl	80004ac <__aeabi_i2d>
 8002c36:	a358      	add	r3, pc, #352	@ (adr r3, 8002d98 <lnf_near_1+0x248>)
 8002c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3c:	f7fd fca0 	bl	8000580 <__aeabi_dmul>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4610      	mov	r0, r2
 8002c46:	4619      	mov	r1, r3
 8002c48:	f04f 0200 	mov.w	r2, #0
 8002c4c:	4b56      	ldr	r3, [pc, #344]	@ (8002da8 <lnf_near_1+0x258>)
 8002c4e:	f7fd fae1 	bl	8000214 <__adddf3>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
			expansion_point_value = ln_LUT[i];
 8002c5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	3398      	adds	r3, #152	@ 0x98
 8002c60:	443b      	add	r3, r7
 8002c62:	3b90      	subs	r3, #144	@ 0x90
 8002c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c68:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	for(i = 0; i < 10; i++)
 8002c6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c6e:	3301      	adds	r3, #1
 8002c70:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c74:	2b09      	cmp	r3, #9
 8002c76:	dd8e      	ble.n	8002b96 <lnf_near_1+0x46>
		}
	}
	
	out = expansion_point_value;
 8002c78:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002c7c:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
	divisor = expansion_point;
 8002c80:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002c84:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	for(i = 1; i < 30; i++)
 8002c88:	2301      	movs	r3, #1
 8002c8a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c8c:	e073      	b.n	8002d76 <lnf_near_1+0x226>
	{
		if(negative)
 8002c8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d031      	beq.n	8002cfa <lnf_near_1+0x1aa>
		{
			out -= powfi(f-expansion_point, i) / i / divisor;
 8002c96:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002c9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c9e:	f7fd fab7 	bl	8000210 <__aeabi_dsub>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	ec43 2b17 	vmov	d7, r2, r3
 8002caa:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002cac:	eeb0 0a47 	vmov.f32	s0, s14
 8002cb0:	eef0 0a67 	vmov.f32	s1, s15
 8002cb4:	f7ff fee6 	bl	8002a84 <powfi>
 8002cb8:	ec55 4b10 	vmov	r4, r5, d0
 8002cbc:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002cbe:	f7fd fbf5 	bl	80004ac <__aeabi_i2d>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	4629      	mov	r1, r5
 8002cca:	f7fd fd83 	bl	80007d4 <__aeabi_ddiv>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002cda:	f7fd fd7b 	bl	80007d4 <__aeabi_ddiv>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8002ce6:	f7fd fa93 	bl	8000210 <__aeabi_dsub>
 8002cea:	4602      	mov	r2, r0
 8002cec:	460b      	mov	r3, r1
 8002cee:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
			negative = 0;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002cf8:	e030      	b.n	8002d5c <lnf_near_1+0x20c>
		}
		else
		{
			out += powfi(f-expansion_point, i) / i / divisor;
 8002cfa:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002cfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d02:	f7fd fa85 	bl	8000210 <__aeabi_dsub>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	ec43 2b17 	vmov	d7, r2, r3
 8002d0e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002d10:	eeb0 0a47 	vmov.f32	s0, s14
 8002d14:	eef0 0a67 	vmov.f32	s1, s15
 8002d18:	f7ff feb4 	bl	8002a84 <powfi>
 8002d1c:	ec55 4b10 	vmov	r4, r5, d0
 8002d20:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002d22:	f7fd fbc3 	bl	80004ac <__aeabi_i2d>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	4629      	mov	r1, r5
 8002d2e:	f7fd fd51 	bl	80007d4 <__aeabi_ddiv>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	4610      	mov	r0, r2
 8002d38:	4619      	mov	r1, r3
 8002d3a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002d3e:	f7fd fd49 	bl	80007d4 <__aeabi_ddiv>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8002d4a:	f7fd fa63 	bl	8000214 <__adddf3>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
			negative = 1;
 8002d56:	2301      	movs	r3, #1
 8002d58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		}
		divisor *= expansion_point;
 8002d5c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002d60:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002d64:	f7fd fc0c 	bl	8000580 <__aeabi_dmul>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	for(i = 1; i < 30; i++)
 8002d70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d72:	3301      	adds	r3, #1
 8002d74:	667b      	str	r3, [r7, #100]	@ 0x64
 8002d76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d78:	2b1d      	cmp	r3, #29
 8002d7a:	dd88      	ble.n	8002c8e <lnf_near_1+0x13e>
	}

	return out;
 8002d7c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8002d80:	ec43 2b17 	vmov	d7, r2, r3
}
 8002d84:	eeb0 0a47 	vmov.f32	s0, s14
 8002d88:	eef0 0a67 	vmov.f32	s1, s15
 8002d8c:	3798      	adds	r7, #152	@ 0x98
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bdb0      	pop	{r4, r5, r7, pc}
 8002d92:	bf00      	nop
 8002d94:	f3af 8000 	nop.w
 8002d98:	9999999a 	.word	0x9999999a
 8002d9c:	3fb99999 	.word	0x3fb99999
 8002da0:	08004d98 	.word	0x08004d98
 8002da4:	40590000 	.word	0x40590000
 8002da8:	3ff00000 	.word	0x3ff00000
 8002dac:	40240000 	.word	0x40240000

08002db0 <lnf>:

/* Computes ln(f) */
double lnf(double f)
{
 8002db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002db4:	b08d      	sub	sp, #52	@ 0x34
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	ed87 0b02 	vstr	d0, [r7, #8]
        double out;
        long long exponent = (long long)(((*((unsigned long long *)&f) & 0x7ff0000000000000) >> 52) - 1023);
 8002dbc:	f107 0108 	add.w	r1, r7, #8
 8002dc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002dc4:	e9c7 0100 	strd	r0, r1, [r7]
 8002dc8:	f04f 0000 	mov.w	r0, #0
 8002dcc:	f04f 0100 	mov.w	r1, #0
 8002dd0:	687e      	ldr	r6, [r7, #4]
 8002dd2:	0d30      	lsrs	r0, r6, #20
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	f3c0 020a 	ubfx	r2, r0, #0, #11
 8002dda:	2300      	movs	r3, #0
 8002ddc:	4928      	ldr	r1, [pc, #160]	@ (8002e80 <lnf+0xd0>)
 8002dde:	eb12 0801 	adds.w	r8, r2, r1
 8002de2:	f143 39ff 	adc.w	r9, r3, #4294967295
 8002de6:	e9c7 890a 	strd	r8, r9, [r7, #40]	@ 0x28
        unsigned long long mantissa = *((unsigned long long *)&f) & 0xfffffffffffff;
 8002dea:	f107 0308 	add.w	r3, r7, #8
 8002dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df2:	4692      	mov	sl, r2
 8002df4:	f3c3 0b13 	ubfx	fp, r3, #0, #20
 8002df8:	e9c7 ab08 	strd	sl, fp, [r7, #32]

        /* Now we'll get the numerical value of the mantissa 1.XXXXX... */
        double fraction;

        /* Set the exponent to 1 (1023 after applying bias */
        *((unsigned long long *)&fraction) = ((unsigned long long)1023 << 52);
 8002dfc:	f107 0110 	add.w	r1, r7, #16
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	4b1f      	ldr	r3, [pc, #124]	@ (8002e84 <lnf+0xd4>)
 8002e06:	e9c1 2300 	strd	r2, r3, [r1]

        /* Insert the mantissa */
        *((unsigned long long *)&fraction) |= mantissa;
 8002e0a:	f107 0310 	add.w	r3, r7, #16
 8002e0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e12:	f107 0610 	add.w	r6, r7, #16
 8002e16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e1a:	ea40 0402 	orr.w	r4, r0, r2
 8002e1e:	ea41 0503 	orr.w	r5, r1, r3
 8002e22:	e9c6 4500 	strd	r4, r5, [r6]
        /* f = fraction * 2^exponent */
        /* ln(f) = ln(fraction * 2^exponent) */
        /* ln(f) = ln(fraction) + ln(2^exponent) */
        /* ln(f) = ln(fraction) + exponent * ln(2) */
        /* ... and fraction is close to 1 */
        out = lnf_near_1(fraction) + exponent * 0.6931471806;
 8002e26:	ed97 7b04 	vldr	d7, [r7, #16]
 8002e2a:	eeb0 0a47 	vmov.f32	s0, s14
 8002e2e:	eef0 0a67 	vmov.f32	s1, s15
 8002e32:	f7ff fe8d 	bl	8002b50 <lnf_near_1>
 8002e36:	ec55 4b10 	vmov	r4, r5, d0
 8002e3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002e3e:	f7fd fb71 	bl	8000524 <__aeabi_l2d>
 8002e42:	a30d      	add	r3, pc, #52	@ (adr r3, 8002e78 <lnf+0xc8>)
 8002e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e48:	f7fd fb9a 	bl	8000580 <__aeabi_dmul>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	4620      	mov	r0, r4
 8002e52:	4629      	mov	r1, r5
 8002e54:	f7fd f9de 	bl	8000214 <__adddf3>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	e9c7 2306 	strd	r2, r3, [r7, #24]

        return out;
 8002e60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e64:	ec43 2b17 	vmov	d7, r2, r3
}
 8002e68:	eeb0 0a47 	vmov.f32	s0, s14
 8002e6c:	eef0 0a67 	vmov.f32	s1, s15
 8002e70:	3734      	adds	r7, #52	@ 0x34
 8002e72:	46bd      	mov	sp, r7
 8002e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e78:	feffbb3c 	.word	0xfeffbb3c
 8002e7c:	3fe62e42 	.word	0x3fe62e42
 8002e80:	fffffc01 	.word	0xfffffc01
 8002e84:	3ff00000 	.word	0x3ff00000

08002e88 <powff_near_0>:
/* computes f1^f2 where f2 is close to 0 */
double powff_near_0(double f1, double f2)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08e      	sub	sp, #56	@ 0x38
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	ed87 0b02 	vstr	d0, [r7, #8]
 8002e92:	ed87 1b00 	vstr	d1, [r7]
	double out = 1.0;
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	4b2d      	ldr	r3, [pc, #180]	@ (8002f50 <powff_near_0+0xc8>)
 8002e9c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	double ln_f1 = lnf(f1);
 8002ea0:	ed97 0b02 	vldr	d0, [r7, #8]
 8002ea4:	f7ff ff84 	bl	8002db0 <lnf>
 8002ea8:	ed87 0b04 	vstr	d0, [r7, #16]
	double multiplier = 1.0;
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	4b27      	ldr	r3, [pc, #156]	@ (8002f50 <powff_near_0+0xc8>)
 8002eb2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double factorial_divisor = 1;
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	4b25      	ldr	r3, [pc, #148]	@ (8002f50 <powff_near_0+0xc8>)
 8002ebc:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for(int i = 1; i < 20; i++)
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	61fb      	str	r3, [r7, #28]
 8002ec4:	e036      	b.n	8002f34 <powff_near_0+0xac>
	{
		multiplier *= ln_f1;
 8002ec6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002eca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002ece:	f7fd fb57 	bl	8000580 <__aeabi_dmul>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		factorial_divisor *= i;
 8002eda:	69f8      	ldr	r0, [r7, #28]
 8002edc:	f7fd fae6 	bl	80004ac <__aeabi_i2d>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ee8:	f7fd fb4a 	bl	8000580 <__aeabi_dmul>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	e9c7 2308 	strd	r2, r3, [r7, #32]
		out += powfi(f2, i) * multiplier / factorial_divisor;
 8002ef4:	69f8      	ldr	r0, [r7, #28]
 8002ef6:	ed97 0b00 	vldr	d0, [r7]
 8002efa:	f7ff fdc3 	bl	8002a84 <powfi>
 8002efe:	ec51 0b10 	vmov	r0, r1, d0
 8002f02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f06:	f7fd fb3b 	bl	8000580 <__aeabi_dmul>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	4610      	mov	r0, r2
 8002f10:	4619      	mov	r1, r3
 8002f12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f16:	f7fd fc5d 	bl	80007d4 <__aeabi_ddiv>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002f22:	f7fd f977 	bl	8000214 <__adddf3>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	for(int i = 1; i < 20; i++)
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3301      	adds	r3, #1
 8002f32:	61fb      	str	r3, [r7, #28]
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	2b13      	cmp	r3, #19
 8002f38:	ddc5      	ble.n	8002ec6 <powff_near_0+0x3e>
	}
	
	return out;
 8002f3a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002f3e:	ec43 2b17 	vmov	d7, r2, r3
}
 8002f42:	eeb0 0a47 	vmov.f32	s0, s14
 8002f46:	eef0 0a67 	vmov.f32	s1, s15
 8002f4a:	3738      	adds	r7, #56	@ 0x38
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	3ff00000 	.word	0x3ff00000

08002f54 <powff>:
/* Computes f1^f2 */
double powff(double f1, double f2)
{
 8002f54:	b5b0      	push	{r4, r5, r7, lr}
 8002f56:	b088      	sub	sp, #32
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	ed87 0b02 	vstr	d0, [r7, #8]
 8002f5e:	ed87 1b00 	vstr	d1, [r7]
	int whole_component = (int)f2;
 8002f62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f66:	f7fd fda5 	bl	8000ab4 <__aeabi_d2iz>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	61fb      	str	r3, [r7, #28]
	double decimal_component = f2 - whole_component;
 8002f6e:	69f8      	ldr	r0, [r7, #28]
 8002f70:	f7fd fa9c 	bl	80004ac <__aeabi_i2d>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f7c:	f7fd f948 	bl	8000210 <__aeabi_dsub>
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return powfi(f1, whole_component) * powff_near_0(f1, decimal_component);
 8002f88:	69f8      	ldr	r0, [r7, #28]
 8002f8a:	ed97 0b02 	vldr	d0, [r7, #8]
 8002f8e:	f7ff fd79 	bl	8002a84 <powfi>
 8002f92:	ec55 4b10 	vmov	r4, r5, d0
 8002f96:	ed97 1b04 	vldr	d1, [r7, #16]
 8002f9a:	ed97 0b02 	vldr	d0, [r7, #8]
 8002f9e:	f7ff ff73 	bl	8002e88 <powff_near_0>
 8002fa2:	ec53 2b10 	vmov	r2, r3, d0
 8002fa6:	4620      	mov	r0, r4
 8002fa8:	4629      	mov	r1, r5
 8002faa:	f7fd fae9 	bl	8000580 <__aeabi_dmul>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	ec43 2b17 	vmov	d7, r2, r3
}
 8002fb6:	eeb0 0a47 	vmov.f32	s0, s14
 8002fba:	eef0 0a67 	vmov.f32	s1, s15
 8002fbe:	3720      	adds	r7, #32
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bdb0      	pop	{r4, r5, r7, pc}

08002fc4 <sin_near_0>:
double sin_near_0(double f)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b088      	sub	sp, #32
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	ed87 0b00 	vstr	d0, [r7]
        double out = f;
 8002fce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fd2:	e9c7 2306 	strd	r2, r3, [r7, #24]
        double factorial_divisor = 1;
 8002fd6:	f04f 0200 	mov.w	r2, #0
 8002fda:	4b35      	ldr	r3, [pc, #212]	@ (80030b0 <sin_near_0+0xec>)
 8002fdc:	e9c7 2304 	strd	r2, r3, [r7, #16]
        int i;
        int is_negative = 1;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	60bb      	str	r3, [r7, #8]

        /* sin(f) = f - f^3/3! + f^5/5! - f^7/7! ... */
        for(i = 3; i < 20; i+=2)
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	e053      	b.n	8003092 <sin_near_0+0xce>
        {
                factorial_divisor *= i;
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f7fd fa5e 	bl	80004ac <__aeabi_i2d>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ff8:	f7fd fac2 	bl	8000580 <__aeabi_dmul>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	e9c7 2304 	strd	r2, r3, [r7, #16]
                factorial_divisor *= (i - 1);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	3b01      	subs	r3, #1
 8003008:	4618      	mov	r0, r3
 800300a:	f7fd fa4f 	bl	80004ac <__aeabi_i2d>
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003016:	f7fd fab3 	bl	8000580 <__aeabi_dmul>
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	e9c7 2304 	strd	r2, r3, [r7, #16]
                if(is_negative)
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d015      	beq.n	8003054 <sin_near_0+0x90>
                {
                        out -= powfi(f, i) / factorial_divisor;
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	ed97 0b00 	vldr	d0, [r7]
 800302e:	f7ff fd29 	bl	8002a84 <powfi>
 8003032:	ec51 0b10 	vmov	r0, r1, d0
 8003036:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800303a:	f7fd fbcb 	bl	80007d4 <__aeabi_ddiv>
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003046:	f7fd f8e3 	bl	8000210 <__aeabi_dsub>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8003052:	e014      	b.n	800307e <sin_near_0+0xba>
                }
                else
                {
                        out += powfi(f, i) / factorial_divisor;
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	ed97 0b00 	vldr	d0, [r7]
 800305a:	f7ff fd13 	bl	8002a84 <powfi>
 800305e:	ec51 0b10 	vmov	r0, r1, d0
 8003062:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003066:	f7fd fbb5 	bl	80007d4 <__aeabi_ddiv>
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003072:	f7fd f8cf 	bl	8000214 <__adddf3>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	e9c7 2306 	strd	r2, r3, [r7, #24]
                }
                is_negative = !is_negative;
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	bf0c      	ite	eq
 8003084:	2301      	moveq	r3, #1
 8003086:	2300      	movne	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	60bb      	str	r3, [r7, #8]
        for(i = 3; i < 20; i+=2)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	3302      	adds	r3, #2
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2b13      	cmp	r3, #19
 8003096:	dda8      	ble.n	8002fea <sin_near_0+0x26>
        }
        return out;
 8003098:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800309c:	ec43 2b17 	vmov	d7, r2, r3
}
 80030a0:	eeb0 0a47 	vmov.f32	s0, s14
 80030a4:	eef0 0a67 	vmov.f32	s1, s15
 80030a8:	3720      	adds	r7, #32
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	3ff00000 	.word	0x3ff00000

080030b4 <cos_near_0>:
double cos_near_0(double f)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08a      	sub	sp, #40	@ 0x28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	ed87 0b00 	vstr	d0, [r7]
        double out = 1;
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	4b37      	ldr	r3, [pc, #220]	@ (80031a0 <cos_near_0+0xec>)
 80030c4:	e9c7 2308 	strd	r2, r3, [r7, #32]
        int is_negative = 1;
 80030c8:	2301      	movs	r3, #1
 80030ca:	61fb      	str	r3, [r7, #28]
        double factorial_divisor = 1;
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	4b33      	ldr	r3, [pc, #204]	@ (80031a0 <cos_near_0+0xec>)
 80030d2:	e9c7 2304 	strd	r2, r3, [r7, #16]
        int i;

        /* cos(f) = 1 - f^2/2! + f^4/4! - f^6/6! + ... */
        for(i = 2; i < 22; i += 2)
 80030d6:	2302      	movs	r3, #2
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	e053      	b.n	8003184 <cos_near_0+0xd0>
        {
                factorial_divisor *= i;
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f7fd f9e5 	bl	80004ac <__aeabi_i2d>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030ea:	f7fd fa49 	bl	8000580 <__aeabi_dmul>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
                factorial_divisor *= (i - 1);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	3b01      	subs	r3, #1
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fd f9d6 	bl	80004ac <__aeabi_i2d>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003108:	f7fd fa3a 	bl	8000580 <__aeabi_dmul>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	e9c7 2304 	strd	r2, r3, [r7, #16]
                if(is_negative)
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d015      	beq.n	8003146 <cos_near_0+0x92>
                {
                        out -= powfi(f, i) / factorial_divisor;
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	ed97 0b00 	vldr	d0, [r7]
 8003120:	f7ff fcb0 	bl	8002a84 <powfi>
 8003124:	ec51 0b10 	vmov	r0, r1, d0
 8003128:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800312c:	f7fd fb52 	bl	80007d4 <__aeabi_ddiv>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003138:	f7fd f86a 	bl	8000210 <__aeabi_dsub>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8003144:	e014      	b.n	8003170 <cos_near_0+0xbc>
                }
                else
                {
                        out += powfi(f, i) / factorial_divisor;
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	ed97 0b00 	vldr	d0, [r7]
 800314c:	f7ff fc9a 	bl	8002a84 <powfi>
 8003150:	ec51 0b10 	vmov	r0, r1, d0
 8003154:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003158:	f7fd fb3c 	bl	80007d4 <__aeabi_ddiv>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003164:	f7fd f856 	bl	8000214 <__adddf3>
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	e9c7 2308 	strd	r2, r3, [r7, #32]
                }
                is_negative = !is_negative;
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	2b00      	cmp	r3, #0
 8003174:	bf0c      	ite	eq
 8003176:	2301      	moveq	r3, #1
 8003178:	2300      	movne	r3, #0
 800317a:	b2db      	uxtb	r3, r3
 800317c:	61fb      	str	r3, [r7, #28]
        for(i = 2; i < 22; i += 2)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	3302      	adds	r3, #2
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2b15      	cmp	r3, #21
 8003188:	dda8      	ble.n	80030dc <cos_near_0+0x28>
        }
        return out;
 800318a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800318e:	ec43 2b17 	vmov	d7, r2, r3
}
 8003192:	eeb0 0a47 	vmov.f32	s0, s14
 8003196:	eef0 0a67 	vmov.f32	s1, s15
 800319a:	3728      	adds	r7, #40	@ 0x28
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	3ff00000 	.word	0x3ff00000
 80031a4:	00000000 	.word	0x00000000

080031a8 <cosine>:

double cosine(double f)
{
 80031a8:	b5b0      	push	{r4, r5, r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	ed87 0b00 	vstr	d0, [r7]
        f /= (3.1415926535897932384626 * 2);
 80031b2:	a327      	add	r3, pc, #156	@ (adr r3, 8003250 <cosine+0xa8>)
 80031b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80031bc:	f7fd fb0a 	bl	80007d4 <__aeabi_ddiv>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	e9c7 2300 	strd	r2, r3, [r7]
        /* Now we round down to the nearest integer (or nearest multiple of 2pi when not scaled) */
        long long integer_part = (long long)f;
 80031c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80031cc:	f7fd fcb2 	bl	8000b34 <__aeabi_d2lz>
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
        if(f < 0)
 80031d8:	f04f 0200 	mov.w	r2, #0
 80031dc:	f04f 0300 	mov.w	r3, #0
 80031e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80031e4:	f7fd fc3e 	bl	8000a64 <__aeabi_dcmplt>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d006      	beq.n	80031fc <cosine+0x54>
        {
                integer_part -= 1; /* Round down instead of round towards 0 */
 80031ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80031f2:	1e54      	subs	r4, r2, #1
 80031f4:	f143 35ff 	adc.w	r5, r3, #4294967295
 80031f8:	e9c7 4504 	strd	r4, r5, [r7, #16]
        }
        double remainder = f - integer_part; /* Get its position relative to the nearest integer (i.e. 2pi) */
 80031fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003200:	f7fd f990 	bl	8000524 <__aeabi_l2d>
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	e9d7 0100 	ldrd	r0, r1, [r7]
 800320c:	f7fd f800 	bl	8000210 <__aeabi_dsub>
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	e9c7 2302 	strd	r2, r3, [r7, #8]
        remainder *= (3.1415926535897932384626 * 2); /* Scale back up */
 8003218:	a30d      	add	r3, pc, #52	@ (adr r3, 8003250 <cosine+0xa8>)
 800321a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003222:	f7fd f9ad 	bl	8000580 <__aeabi_dmul>
 8003226:	4602      	mov	r2, r0
 8003228:	460b      	mov	r3, r1
 800322a:	e9c7 2302 	strd	r2, r3, [r7, #8]
        return cos_near_0(remainder);
 800322e:	ed97 0b02 	vldr	d0, [r7, #8]
 8003232:	f7ff ff3f 	bl	80030b4 <cos_near_0>
 8003236:	eeb0 7a40 	vmov.f32	s14, s0
 800323a:	eef0 7a60 	vmov.f32	s15, s1
}
 800323e:	eeb0 0a47 	vmov.f32	s0, s14
 8003242:	eef0 0a67 	vmov.f32	s1, s15
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bdb0      	pop	{r4, r5, r7, pc}
 800324c:	f3af 8000 	nop.w
 8003250:	54442d18 	.word	0x54442d18
 8003254:	401921fb 	.word	0x401921fb

08003258 <sine>:
double sine(double f)
{
 8003258:	b5b0      	push	{r4, r5, r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	ed87 0b00 	vstr	d0, [r7]
        f /= (3.1415926535897932384626 * 2);
 8003262:	a327      	add	r3, pc, #156	@ (adr r3, 8003300 <sine+0xa8>)
 8003264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003268:	e9d7 0100 	ldrd	r0, r1, [r7]
 800326c:	f7fd fab2 	bl	80007d4 <__aeabi_ddiv>
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	e9c7 2300 	strd	r2, r3, [r7]
        /* Now we round down to the nearest integer (or nearest multiple of 2pi when not scaled) */
        long long integer_part = (long long)f;
 8003278:	e9d7 0100 	ldrd	r0, r1, [r7]
 800327c:	f7fd fc5a 	bl	8000b34 <__aeabi_d2lz>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	e9c7 2304 	strd	r2, r3, [r7, #16]
        if(f < 0)
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003294:	f7fd fbe6 	bl	8000a64 <__aeabi_dcmplt>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d006      	beq.n	80032ac <sine+0x54>
        {
                integer_part -= 1; /* Round down instead of round towards 0 */
 800329e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80032a2:	1e54      	subs	r4, r2, #1
 80032a4:	f143 35ff 	adc.w	r5, r3, #4294967295
 80032a8:	e9c7 4504 	strd	r4, r5, [r7, #16]
        }
        double remainder = f - integer_part; /* Get its position relative to the nearest integer (i.e. 2pi) */
 80032ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80032b0:	f7fd f938 	bl	8000524 <__aeabi_l2d>
 80032b4:	4602      	mov	r2, r0
 80032b6:	460b      	mov	r3, r1
 80032b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032bc:	f7fc ffa8 	bl	8000210 <__aeabi_dsub>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	e9c7 2302 	strd	r2, r3, [r7, #8]
        remainder *= (3.1415926535897932384626 * 2); /* Scale back up */
 80032c8:	a30d      	add	r3, pc, #52	@ (adr r3, 8003300 <sine+0xa8>)
 80032ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032d2:	f7fd f955 	bl	8000580 <__aeabi_dmul>
 80032d6:	4602      	mov	r2, r0
 80032d8:	460b      	mov	r3, r1
 80032da:	e9c7 2302 	strd	r2, r3, [r7, #8]
        return sin_near_0(remainder);
 80032de:	ed97 0b02 	vldr	d0, [r7, #8]
 80032e2:	f7ff fe6f 	bl	8002fc4 <sin_near_0>
 80032e6:	eeb0 7a40 	vmov.f32	s14, s0
 80032ea:	eef0 7a60 	vmov.f32	s15, s1
}
 80032ee:	eeb0 0a47 	vmov.f32	s0, s14
 80032f2:	eef0 0a67 	vmov.f32	s1, s15
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bdb0      	pop	{r4, r5, r7, pc}
 80032fc:	f3af 8000 	nop.w
 8003300:	54442d18 	.word	0x54442d18
 8003304:	401921fb 	.word	0x401921fb

08003308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003308:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003340 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800330c:	f7ff fba8 	bl	8002a60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003310:	480c      	ldr	r0, [pc, #48]	@ (8003344 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003312:	490d      	ldr	r1, [pc, #52]	@ (8003348 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003314:	4a0d      	ldr	r2, [pc, #52]	@ (800334c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003318:	e002      	b.n	8003320 <LoopCopyDataInit>

0800331a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800331a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800331c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800331e:	3304      	adds	r3, #4

08003320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003324:	d3f9      	bcc.n	800331a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003326:	4a0a      	ldr	r2, [pc, #40]	@ (8003350 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003328:	4c0a      	ldr	r4, [pc, #40]	@ (8003354 <LoopFillZerobss+0x22>)
  movs r3, #0
 800332a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800332c:	e001      	b.n	8003332 <LoopFillZerobss>

0800332e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800332e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003330:	3204      	adds	r2, #4

08003332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003334:	d3fb      	bcc.n	800332e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003336:	f001 fcc3 	bl	8004cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800333a:	f7fe ff5d 	bl	80021f8 <main>
  bx  lr    
 800333e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003340:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003348:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800334c:	08004e10 	.word	0x08004e10
  ldr r2, =_sbss
 8003350:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003354:	20000104 	.word	0x20000104

08003358 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003358:	e7fe      	b.n	8003358 <ADC_IRQHandler>
	...

0800335c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003360:	4b0e      	ldr	r3, [pc, #56]	@ (800339c <HAL_Init+0x40>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a0d      	ldr	r2, [pc, #52]	@ (800339c <HAL_Init+0x40>)
 8003366:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800336a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800336c:	4b0b      	ldr	r3, [pc, #44]	@ (800339c <HAL_Init+0x40>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a0a      	ldr	r2, [pc, #40]	@ (800339c <HAL_Init+0x40>)
 8003372:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003376:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003378:	4b08      	ldr	r3, [pc, #32]	@ (800339c <HAL_Init+0x40>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a07      	ldr	r2, [pc, #28]	@ (800339c <HAL_Init+0x40>)
 800337e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003382:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003384:	2003      	movs	r0, #3
 8003386:	f000 f94f 	bl	8003628 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800338a:	200f      	movs	r0, #15
 800338c:	f000 f808 	bl	80033a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003390:	f7ff fade 	bl	8002950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40023c00 	.word	0x40023c00

080033a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033a8:	4b12      	ldr	r3, [pc, #72]	@ (80033f4 <HAL_InitTick+0x54>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	4b12      	ldr	r3, [pc, #72]	@ (80033f8 <HAL_InitTick+0x58>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	4619      	mov	r1, r3
 80033b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80033ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 f967 	bl	8003692 <HAL_SYSTICK_Config>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e00e      	b.n	80033ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b0f      	cmp	r3, #15
 80033d2:	d80a      	bhi.n	80033ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033d4:	2200      	movs	r2, #0
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	f04f 30ff 	mov.w	r0, #4294967295
 80033dc:	f000 f92f 	bl	800363e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033e0:	4a06      	ldr	r2, [pc, #24]	@ (80033fc <HAL_InitTick+0x5c>)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
 80033e8:	e000      	b.n	80033ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	20000064 	.word	0x20000064
 80033f8:	2000006c 	.word	0x2000006c
 80033fc:	20000068 	.word	0x20000068

08003400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003404:	4b06      	ldr	r3, [pc, #24]	@ (8003420 <HAL_IncTick+0x20>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	461a      	mov	r2, r3
 800340a:	4b06      	ldr	r3, [pc, #24]	@ (8003424 <HAL_IncTick+0x24>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4413      	add	r3, r2
 8003410:	4a04      	ldr	r2, [pc, #16]	@ (8003424 <HAL_IncTick+0x24>)
 8003412:	6013      	str	r3, [r2, #0]
}
 8003414:	bf00      	nop
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	2000006c 	.word	0x2000006c
 8003424:	20000100 	.word	0x20000100

08003428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  return uwTick;
 800342c:	4b03      	ldr	r3, [pc, #12]	@ (800343c <HAL_GetTick+0x14>)
 800342e:	681b      	ldr	r3, [r3, #0]
}
 8003430:	4618      	mov	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	20000100 	.word	0x20000100

08003440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003448:	f7ff ffee 	bl	8003428 <HAL_GetTick>
 800344c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003458:	d005      	beq.n	8003466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800345a:	4b0a      	ldr	r3, [pc, #40]	@ (8003484 <HAL_Delay+0x44>)
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	461a      	mov	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4413      	add	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003466:	bf00      	nop
 8003468:	f7ff ffde 	bl	8003428 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	429a      	cmp	r2, r3
 8003476:	d8f7      	bhi.n	8003468 <HAL_Delay+0x28>
  {
  }
}
 8003478:	bf00      	nop
 800347a:	bf00      	nop
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	2000006c 	.word	0x2000006c

08003488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003498:	4b0c      	ldr	r3, [pc, #48]	@ (80034cc <__NVIC_SetPriorityGrouping+0x44>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034a4:	4013      	ands	r3, r2
 80034a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ba:	4a04      	ldr	r2, [pc, #16]	@ (80034cc <__NVIC_SetPriorityGrouping+0x44>)
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	60d3      	str	r3, [r2, #12]
}
 80034c0:	bf00      	nop
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	e000ed00 	.word	0xe000ed00

080034d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034d4:	4b04      	ldr	r3, [pc, #16]	@ (80034e8 <__NVIC_GetPriorityGrouping+0x18>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	0a1b      	lsrs	r3, r3, #8
 80034da:	f003 0307 	and.w	r3, r3, #7
}
 80034de:	4618      	mov	r0, r3
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	e000ed00 	.word	0xe000ed00

080034ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4603      	mov	r3, r0
 80034f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	db0b      	blt.n	8003516 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	f003 021f 	and.w	r2, r3, #31
 8003504:	4907      	ldr	r1, [pc, #28]	@ (8003524 <__NVIC_EnableIRQ+0x38>)
 8003506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350a:	095b      	lsrs	r3, r3, #5
 800350c:	2001      	movs	r0, #1
 800350e:	fa00 f202 	lsl.w	r2, r0, r2
 8003512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	e000e100 	.word	0xe000e100

08003528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	4603      	mov	r3, r0
 8003530:	6039      	str	r1, [r7, #0]
 8003532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003538:	2b00      	cmp	r3, #0
 800353a:	db0a      	blt.n	8003552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	b2da      	uxtb	r2, r3
 8003540:	490c      	ldr	r1, [pc, #48]	@ (8003574 <__NVIC_SetPriority+0x4c>)
 8003542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003546:	0112      	lsls	r2, r2, #4
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	440b      	add	r3, r1
 800354c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003550:	e00a      	b.n	8003568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	b2da      	uxtb	r2, r3
 8003556:	4908      	ldr	r1, [pc, #32]	@ (8003578 <__NVIC_SetPriority+0x50>)
 8003558:	79fb      	ldrb	r3, [r7, #7]
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	3b04      	subs	r3, #4
 8003560:	0112      	lsls	r2, r2, #4
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	440b      	add	r3, r1
 8003566:	761a      	strb	r2, [r3, #24]
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	e000e100 	.word	0xe000e100
 8003578:	e000ed00 	.word	0xe000ed00

0800357c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800357c:	b480      	push	{r7}
 800357e:	b089      	sub	sp, #36	@ 0x24
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f1c3 0307 	rsb	r3, r3, #7
 8003596:	2b04      	cmp	r3, #4
 8003598:	bf28      	it	cs
 800359a:	2304      	movcs	r3, #4
 800359c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	3304      	adds	r3, #4
 80035a2:	2b06      	cmp	r3, #6
 80035a4:	d902      	bls.n	80035ac <NVIC_EncodePriority+0x30>
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	3b03      	subs	r3, #3
 80035aa:	e000      	b.n	80035ae <NVIC_EncodePriority+0x32>
 80035ac:	2300      	movs	r3, #0
 80035ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b0:	f04f 32ff 	mov.w	r2, #4294967295
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	43da      	mvns	r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	401a      	ands	r2, r3
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035c4:	f04f 31ff 	mov.w	r1, #4294967295
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	fa01 f303 	lsl.w	r3, r1, r3
 80035ce:	43d9      	mvns	r1, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d4:	4313      	orrs	r3, r2
         );
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3724      	adds	r7, #36	@ 0x24
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
	...

080035e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035f4:	d301      	bcc.n	80035fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035f6:	2301      	movs	r3, #1
 80035f8:	e00f      	b.n	800361a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003624 <SysTick_Config+0x40>)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3b01      	subs	r3, #1
 8003600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003602:	210f      	movs	r1, #15
 8003604:	f04f 30ff 	mov.w	r0, #4294967295
 8003608:	f7ff ff8e 	bl	8003528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800360c:	4b05      	ldr	r3, [pc, #20]	@ (8003624 <SysTick_Config+0x40>)
 800360e:	2200      	movs	r2, #0
 8003610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003612:	4b04      	ldr	r3, [pc, #16]	@ (8003624 <SysTick_Config+0x40>)
 8003614:	2207      	movs	r2, #7
 8003616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	e000e010 	.word	0xe000e010

08003628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7ff ff29 	bl	8003488 <__NVIC_SetPriorityGrouping>
}
 8003636:	bf00      	nop
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800363e:	b580      	push	{r7, lr}
 8003640:	b086      	sub	sp, #24
 8003642:	af00      	add	r7, sp, #0
 8003644:	4603      	mov	r3, r0
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	607a      	str	r2, [r7, #4]
 800364a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003650:	f7ff ff3e 	bl	80034d0 <__NVIC_GetPriorityGrouping>
 8003654:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	68b9      	ldr	r1, [r7, #8]
 800365a:	6978      	ldr	r0, [r7, #20]
 800365c:	f7ff ff8e 	bl	800357c <NVIC_EncodePriority>
 8003660:	4602      	mov	r2, r0
 8003662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003666:	4611      	mov	r1, r2
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff ff5d 	bl	8003528 <__NVIC_SetPriority>
}
 800366e:	bf00      	nop
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b082      	sub	sp, #8
 800367a:	af00      	add	r7, sp, #0
 800367c:	4603      	mov	r3, r0
 800367e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff ff31 	bl	80034ec <__NVIC_EnableIRQ>
}
 800368a:	bf00      	nop
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7ff ffa2 	bl	80035e4 <SysTick_Config>
 80036a0:	4603      	mov	r3, r0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b089      	sub	sp, #36	@ 0x24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036b6:	2300      	movs	r3, #0
 80036b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036be:	2300      	movs	r3, #0
 80036c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036c2:	2300      	movs	r3, #0
 80036c4:	61fb      	str	r3, [r7, #28]
 80036c6:	e165      	b.n	8003994 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036c8:	2201      	movs	r2, #1
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	4013      	ands	r3, r2
 80036da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	f040 8154 	bne.w	800398e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d005      	beq.n	80036fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d130      	bne.n	8003760 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	2203      	movs	r2, #3
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	43db      	mvns	r3, r3
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	4013      	ands	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	68da      	ldr	r2, [r3, #12]
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	4313      	orrs	r3, r2
 8003726:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003734:	2201      	movs	r2, #1
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	43db      	mvns	r3, r3
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4013      	ands	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	091b      	lsrs	r3, r3, #4
 800374a:	f003 0201 	and.w	r2, r3, #1
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4313      	orrs	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f003 0303 	and.w	r3, r3, #3
 8003768:	2b03      	cmp	r3, #3
 800376a:	d017      	beq.n	800379c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	2203      	movs	r2, #3
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	43db      	mvns	r3, r3
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	4013      	ands	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	4313      	orrs	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f003 0303 	and.w	r3, r3, #3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d123      	bne.n	80037f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	08da      	lsrs	r2, r3, #3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3208      	adds	r2, #8
 80037b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	220f      	movs	r2, #15
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	43db      	mvns	r3, r3
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	4013      	ands	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	691a      	ldr	r2, [r3, #16]
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4313      	orrs	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	08da      	lsrs	r2, r3, #3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	3208      	adds	r2, #8
 80037ea:	69b9      	ldr	r1, [r7, #24]
 80037ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	2203      	movs	r2, #3
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	43db      	mvns	r3, r3
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	4013      	ands	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f003 0203 	and.w	r2, r3, #3
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	4313      	orrs	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 80ae 	beq.w	800398e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003832:	2300      	movs	r3, #0
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	4b5d      	ldr	r3, [pc, #372]	@ (80039ac <HAL_GPIO_Init+0x300>)
 8003838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383a:	4a5c      	ldr	r2, [pc, #368]	@ (80039ac <HAL_GPIO_Init+0x300>)
 800383c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003840:	6453      	str	r3, [r2, #68]	@ 0x44
 8003842:	4b5a      	ldr	r3, [pc, #360]	@ (80039ac <HAL_GPIO_Init+0x300>)
 8003844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003846:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800384e:	4a58      	ldr	r2, [pc, #352]	@ (80039b0 <HAL_GPIO_Init+0x304>)
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	089b      	lsrs	r3, r3, #2
 8003854:	3302      	adds	r3, #2
 8003856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800385a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	220f      	movs	r2, #15
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	43db      	mvns	r3, r3
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	4013      	ands	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a4f      	ldr	r2, [pc, #316]	@ (80039b4 <HAL_GPIO_Init+0x308>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d025      	beq.n	80038c6 <HAL_GPIO_Init+0x21a>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a4e      	ldr	r2, [pc, #312]	@ (80039b8 <HAL_GPIO_Init+0x30c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d01f      	beq.n	80038c2 <HAL_GPIO_Init+0x216>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a4d      	ldr	r2, [pc, #308]	@ (80039bc <HAL_GPIO_Init+0x310>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d019      	beq.n	80038be <HAL_GPIO_Init+0x212>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a4c      	ldr	r2, [pc, #304]	@ (80039c0 <HAL_GPIO_Init+0x314>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d013      	beq.n	80038ba <HAL_GPIO_Init+0x20e>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a4b      	ldr	r2, [pc, #300]	@ (80039c4 <HAL_GPIO_Init+0x318>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d00d      	beq.n	80038b6 <HAL_GPIO_Init+0x20a>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a4a      	ldr	r2, [pc, #296]	@ (80039c8 <HAL_GPIO_Init+0x31c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d007      	beq.n	80038b2 <HAL_GPIO_Init+0x206>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a49      	ldr	r2, [pc, #292]	@ (80039cc <HAL_GPIO_Init+0x320>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d101      	bne.n	80038ae <HAL_GPIO_Init+0x202>
 80038aa:	2306      	movs	r3, #6
 80038ac:	e00c      	b.n	80038c8 <HAL_GPIO_Init+0x21c>
 80038ae:	2307      	movs	r3, #7
 80038b0:	e00a      	b.n	80038c8 <HAL_GPIO_Init+0x21c>
 80038b2:	2305      	movs	r3, #5
 80038b4:	e008      	b.n	80038c8 <HAL_GPIO_Init+0x21c>
 80038b6:	2304      	movs	r3, #4
 80038b8:	e006      	b.n	80038c8 <HAL_GPIO_Init+0x21c>
 80038ba:	2303      	movs	r3, #3
 80038bc:	e004      	b.n	80038c8 <HAL_GPIO_Init+0x21c>
 80038be:	2302      	movs	r3, #2
 80038c0:	e002      	b.n	80038c8 <HAL_GPIO_Init+0x21c>
 80038c2:	2301      	movs	r3, #1
 80038c4:	e000      	b.n	80038c8 <HAL_GPIO_Init+0x21c>
 80038c6:	2300      	movs	r3, #0
 80038c8:	69fa      	ldr	r2, [r7, #28]
 80038ca:	f002 0203 	and.w	r2, r2, #3
 80038ce:	0092      	lsls	r2, r2, #2
 80038d0:	4093      	lsls	r3, r2
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038d8:	4935      	ldr	r1, [pc, #212]	@ (80039b0 <HAL_GPIO_Init+0x304>)
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	089b      	lsrs	r3, r3, #2
 80038de:	3302      	adds	r3, #2
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038e6:	4b3a      	ldr	r3, [pc, #232]	@ (80039d0 <HAL_GPIO_Init+0x324>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	43db      	mvns	r3, r3
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	4013      	ands	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	4313      	orrs	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800390a:	4a31      	ldr	r2, [pc, #196]	@ (80039d0 <HAL_GPIO_Init+0x324>)
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003910:	4b2f      	ldr	r3, [pc, #188]	@ (80039d0 <HAL_GPIO_Init+0x324>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	43db      	mvns	r3, r3
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	4013      	ands	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	4313      	orrs	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003934:	4a26      	ldr	r2, [pc, #152]	@ (80039d0 <HAL_GPIO_Init+0x324>)
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800393a:	4b25      	ldr	r3, [pc, #148]	@ (80039d0 <HAL_GPIO_Init+0x324>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	43db      	mvns	r3, r3
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4013      	ands	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	4313      	orrs	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800395e:	4a1c      	ldr	r2, [pc, #112]	@ (80039d0 <HAL_GPIO_Init+0x324>)
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003964:	4b1a      	ldr	r3, [pc, #104]	@ (80039d0 <HAL_GPIO_Init+0x324>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	43db      	mvns	r3, r3
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	4013      	ands	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003988:	4a11      	ldr	r2, [pc, #68]	@ (80039d0 <HAL_GPIO_Init+0x324>)
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	3301      	adds	r3, #1
 8003992:	61fb      	str	r3, [r7, #28]
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	2b0f      	cmp	r3, #15
 8003998:	f67f ae96 	bls.w	80036c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800399c:	bf00      	nop
 800399e:	bf00      	nop
 80039a0:	3724      	adds	r7, #36	@ 0x24
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	40023800 	.word	0x40023800
 80039b0:	40013800 	.word	0x40013800
 80039b4:	40020000 	.word	0x40020000
 80039b8:	40020400 	.word	0x40020400
 80039bc:	40020800 	.word	0x40020800
 80039c0:	40020c00 	.word	0x40020c00
 80039c4:	40021000 	.word	0x40021000
 80039c8:	40021400 	.word	0x40021400
 80039cc:	40021800 	.word	0x40021800
 80039d0:	40013c00 	.word	0x40013c00

080039d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	887b      	ldrh	r3, [r7, #2]
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039ec:	2301      	movs	r3, #1
 80039ee:	73fb      	strb	r3, [r7, #15]
 80039f0:	e001      	b.n	80039f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039f2:	2300      	movs	r3, #0
 80039f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	807b      	strh	r3, [r7, #2]
 8003a10:	4613      	mov	r3, r2
 8003a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a14:	787b      	ldrb	r3, [r7, #1]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a1a:	887a      	ldrh	r2, [r7, #2]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a20:	e003      	b.n	8003a2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a22:	887b      	ldrh	r3, [r7, #2]
 8003a24:	041a      	lsls	r2, r3, #16
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	619a      	str	r2, [r3, #24]
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
	...

08003a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e0cc      	b.n	8003be6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a4c:	4b68      	ldr	r3, [pc, #416]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 030f 	and.w	r3, r3, #15
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d90c      	bls.n	8003a74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a5a:	4b65      	ldr	r3, [pc, #404]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a62:	4b63      	ldr	r3, [pc, #396]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d001      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e0b8      	b.n	8003be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d020      	beq.n	8003ac2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d005      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a8c:	4b59      	ldr	r3, [pc, #356]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	4a58      	ldr	r2, [pc, #352]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003aa4:	4b53      	ldr	r3, [pc, #332]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	4a52      	ldr	r2, [pc, #328]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aaa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003aae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab0:	4b50      	ldr	r3, [pc, #320]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	494d      	ldr	r1, [pc, #308]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d044      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d107      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ad6:	4b47      	ldr	r3, [pc, #284]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d119      	bne.n	8003b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e07f      	b.n	8003be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d003      	beq.n	8003af6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003af2:	2b03      	cmp	r3, #3
 8003af4:	d107      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af6:	4b3f      	ldr	r3, [pc, #252]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d109      	bne.n	8003b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e06f      	b.n	8003be6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b06:	4b3b      	ldr	r3, [pc, #236]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e067      	b.n	8003be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b16:	4b37      	ldr	r3, [pc, #220]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f023 0203 	bic.w	r2, r3, #3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	4934      	ldr	r1, [pc, #208]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b28:	f7ff fc7e 	bl	8003428 <HAL_GetTick>
 8003b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2e:	e00a      	b.n	8003b46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b30:	f7ff fc7a 	bl	8003428 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e04f      	b.n	8003be6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b46:	4b2b      	ldr	r3, [pc, #172]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 020c 	and.w	r2, r3, #12
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d1eb      	bne.n	8003b30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b58:	4b25      	ldr	r3, [pc, #148]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 030f 	and.w	r3, r3, #15
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d20c      	bcs.n	8003b80 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b66:	4b22      	ldr	r3, [pc, #136]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6e:	4b20      	ldr	r3, [pc, #128]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d001      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e032      	b.n	8003be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d008      	beq.n	8003b9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b8c:	4b19      	ldr	r3, [pc, #100]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	4916      	ldr	r1, [pc, #88]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d009      	beq.n	8003bbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003baa:	4b12      	ldr	r3, [pc, #72]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	490e      	ldr	r1, [pc, #56]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bbe:	f000 f821 	bl	8003c04 <HAL_RCC_GetSysClockFreq>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	091b      	lsrs	r3, r3, #4
 8003bca:	f003 030f 	and.w	r3, r3, #15
 8003bce:	490a      	ldr	r1, [pc, #40]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8003bd0:	5ccb      	ldrb	r3, [r1, r3]
 8003bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003bd6:	4a09      	ldr	r2, [pc, #36]	@ (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003bda:	4b09      	ldr	r3, [pc, #36]	@ (8003c00 <HAL_RCC_ClockConfig+0x1c8>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7ff fbde 	bl	80033a0 <HAL_InitTick>

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40023c00 	.word	0x40023c00
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	08004df0 	.word	0x08004df0
 8003bfc:	20000064 	.word	0x20000064
 8003c00:	20000068 	.word	0x20000068

08003c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c08:	b0a6      	sub	sp, #152	@ 0x98
 8003c0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c2a:	4bc8      	ldr	r3, [pc, #800]	@ (8003f4c <HAL_RCC_GetSysClockFreq+0x348>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 030c 	and.w	r3, r3, #12
 8003c32:	2b0c      	cmp	r3, #12
 8003c34:	f200 817e 	bhi.w	8003f34 <HAL_RCC_GetSysClockFreq+0x330>
 8003c38:	a201      	add	r2, pc, #4	@ (adr r2, 8003c40 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3e:	bf00      	nop
 8003c40:	08003c75 	.word	0x08003c75
 8003c44:	08003f35 	.word	0x08003f35
 8003c48:	08003f35 	.word	0x08003f35
 8003c4c:	08003f35 	.word	0x08003f35
 8003c50:	08003c7d 	.word	0x08003c7d
 8003c54:	08003f35 	.word	0x08003f35
 8003c58:	08003f35 	.word	0x08003f35
 8003c5c:	08003f35 	.word	0x08003f35
 8003c60:	08003c85 	.word	0x08003c85
 8003c64:	08003f35 	.word	0x08003f35
 8003c68:	08003f35 	.word	0x08003f35
 8003c6c:	08003f35 	.word	0x08003f35
 8003c70:	08003def 	.word	0x08003def
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c74:	4bb6      	ldr	r3, [pc, #728]	@ (8003f50 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003c76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003c7a:	e15f      	b.n	8003f3c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c7c:	4bb5      	ldr	r3, [pc, #724]	@ (8003f54 <HAL_RCC_GetSysClockFreq+0x350>)
 8003c7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003c82:	e15b      	b.n	8003f3c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c84:	4bb1      	ldr	r3, [pc, #708]	@ (8003f4c <HAL_RCC_GetSysClockFreq+0x348>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c90:	4bae      	ldr	r3, [pc, #696]	@ (8003f4c <HAL_RCC_GetSysClockFreq+0x348>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d031      	beq.n	8003d00 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c9c:	4bab      	ldr	r3, [pc, #684]	@ (8003f4c <HAL_RCC_GetSysClockFreq+0x348>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	099b      	lsrs	r3, r3, #6
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ca6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003ca8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cae:	663b      	str	r3, [r7, #96]	@ 0x60
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	667b      	str	r3, [r7, #100]	@ 0x64
 8003cb4:	4ba7      	ldr	r3, [pc, #668]	@ (8003f54 <HAL_RCC_GetSysClockFreq+0x350>)
 8003cb6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003cba:	462a      	mov	r2, r5
 8003cbc:	fb03 f202 	mul.w	r2, r3, r2
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	4621      	mov	r1, r4
 8003cc4:	fb01 f303 	mul.w	r3, r1, r3
 8003cc8:	4413      	add	r3, r2
 8003cca:	4aa2      	ldr	r2, [pc, #648]	@ (8003f54 <HAL_RCC_GetSysClockFreq+0x350>)
 8003ccc:	4621      	mov	r1, r4
 8003cce:	fba1 1202 	umull	r1, r2, r1, r2
 8003cd2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003cd4:	460a      	mov	r2, r1
 8003cd6:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003cd8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003cda:	4413      	add	r3, r2
 8003cdc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003cde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ce6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003ce8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003cec:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003cf0:	f7fc ff08 	bl	8000b04 <__aeabi_uldivmod>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003cfe:	e064      	b.n	8003dca <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d00:	4b92      	ldr	r3, [pc, #584]	@ (8003f4c <HAL_RCC_GetSysClockFreq+0x348>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	099b      	lsrs	r3, r3, #6
 8003d06:	2200      	movs	r2, #0
 8003d08:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d0a:	657a      	str	r2, [r7, #84]	@ 0x54
 8003d0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d14:	2300      	movs	r3, #0
 8003d16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d18:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003d1c:	4622      	mov	r2, r4
 8003d1e:	462b      	mov	r3, r5
 8003d20:	f04f 0000 	mov.w	r0, #0
 8003d24:	f04f 0100 	mov.w	r1, #0
 8003d28:	0159      	lsls	r1, r3, #5
 8003d2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d2e:	0150      	lsls	r0, r2, #5
 8003d30:	4602      	mov	r2, r0
 8003d32:	460b      	mov	r3, r1
 8003d34:	4621      	mov	r1, r4
 8003d36:	1a51      	subs	r1, r2, r1
 8003d38:	6139      	str	r1, [r7, #16]
 8003d3a:	4629      	mov	r1, r5
 8003d3c:	eb63 0301 	sbc.w	r3, r3, r1
 8003d40:	617b      	str	r3, [r7, #20]
 8003d42:	f04f 0200 	mov.w	r2, #0
 8003d46:	f04f 0300 	mov.w	r3, #0
 8003d4a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d4e:	4659      	mov	r1, fp
 8003d50:	018b      	lsls	r3, r1, #6
 8003d52:	4651      	mov	r1, sl
 8003d54:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d58:	4651      	mov	r1, sl
 8003d5a:	018a      	lsls	r2, r1, #6
 8003d5c:	4651      	mov	r1, sl
 8003d5e:	ebb2 0801 	subs.w	r8, r2, r1
 8003d62:	4659      	mov	r1, fp
 8003d64:	eb63 0901 	sbc.w	r9, r3, r1
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	f04f 0300 	mov.w	r3, #0
 8003d70:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d74:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d78:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d7c:	4690      	mov	r8, r2
 8003d7e:	4699      	mov	r9, r3
 8003d80:	4623      	mov	r3, r4
 8003d82:	eb18 0303 	adds.w	r3, r8, r3
 8003d86:	60bb      	str	r3, [r7, #8]
 8003d88:	462b      	mov	r3, r5
 8003d8a:	eb49 0303 	adc.w	r3, r9, r3
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	f04f 0300 	mov.w	r3, #0
 8003d98:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d9c:	4629      	mov	r1, r5
 8003d9e:	028b      	lsls	r3, r1, #10
 8003da0:	4621      	mov	r1, r4
 8003da2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003da6:	4621      	mov	r1, r4
 8003da8:	028a      	lsls	r2, r1, #10
 8003daa:	4610      	mov	r0, r2
 8003dac:	4619      	mov	r1, r3
 8003dae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003db2:	2200      	movs	r2, #0
 8003db4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003db6:	647a      	str	r2, [r7, #68]	@ 0x44
 8003db8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003dbc:	f7fc fea2 	bl	8000b04 <__aeabi_uldivmod>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003dca:	4b60      	ldr	r3, [pc, #384]	@ (8003f4c <HAL_RCC_GetSysClockFreq+0x348>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	0c1b      	lsrs	r3, r3, #16
 8003dd0:	f003 0303 	and.w	r3, r3, #3
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8003ddc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003de0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003dec:	e0a6      	b.n	8003f3c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dee:	4b57      	ldr	r3, [pc, #348]	@ (8003f4c <HAL_RCC_GetSysClockFreq+0x348>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003df6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dfa:	4b54      	ldr	r3, [pc, #336]	@ (8003f4c <HAL_RCC_GetSysClockFreq+0x348>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d02a      	beq.n	8003e5c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e06:	4b51      	ldr	r3, [pc, #324]	@ (8003f4c <HAL_RCC_GetSysClockFreq+0x348>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	099b      	lsrs	r3, r3, #6
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e14:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e18:	2100      	movs	r1, #0
 8003e1a:	4b4e      	ldr	r3, [pc, #312]	@ (8003f54 <HAL_RCC_GetSysClockFreq+0x350>)
 8003e1c:	fb03 f201 	mul.w	r2, r3, r1
 8003e20:	2300      	movs	r3, #0
 8003e22:	fb00 f303 	mul.w	r3, r0, r3
 8003e26:	4413      	add	r3, r2
 8003e28:	4a4a      	ldr	r2, [pc, #296]	@ (8003f54 <HAL_RCC_GetSysClockFreq+0x350>)
 8003e2a:	fba0 1202 	umull	r1, r2, r0, r2
 8003e2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e30:	460a      	mov	r2, r1
 8003e32:	673a      	str	r2, [r7, #112]	@ 0x70
 8003e34:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003e36:	4413      	add	r3, r2
 8003e38:	677b      	str	r3, [r7, #116]	@ 0x74
 8003e3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e3e:	2200      	movs	r2, #0
 8003e40:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e42:	637a      	str	r2, [r7, #52]	@ 0x34
 8003e44:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003e48:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003e4c:	f7fc fe5a 	bl	8000b04 <__aeabi_uldivmod>
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	4613      	mov	r3, r2
 8003e56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003e5a:	e05b      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e5c:	4b3b      	ldr	r3, [pc, #236]	@ (8003f4c <HAL_RCC_GetSysClockFreq+0x348>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	099b      	lsrs	r3, r3, #6
 8003e62:	2200      	movs	r2, #0
 8003e64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e6e:	623b      	str	r3, [r7, #32]
 8003e70:	2300      	movs	r3, #0
 8003e72:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e78:	4642      	mov	r2, r8
 8003e7a:	464b      	mov	r3, r9
 8003e7c:	f04f 0000 	mov.w	r0, #0
 8003e80:	f04f 0100 	mov.w	r1, #0
 8003e84:	0159      	lsls	r1, r3, #5
 8003e86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e8a:	0150      	lsls	r0, r2, #5
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4641      	mov	r1, r8
 8003e92:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e96:	4649      	mov	r1, r9
 8003e98:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ea8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003eac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003eb0:	ebb2 040a 	subs.w	r4, r2, sl
 8003eb4:	eb63 050b 	sbc.w	r5, r3, fp
 8003eb8:	f04f 0200 	mov.w	r2, #0
 8003ebc:	f04f 0300 	mov.w	r3, #0
 8003ec0:	00eb      	lsls	r3, r5, #3
 8003ec2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ec6:	00e2      	lsls	r2, r4, #3
 8003ec8:	4614      	mov	r4, r2
 8003eca:	461d      	mov	r5, r3
 8003ecc:	4643      	mov	r3, r8
 8003ece:	18e3      	adds	r3, r4, r3
 8003ed0:	603b      	str	r3, [r7, #0]
 8003ed2:	464b      	mov	r3, r9
 8003ed4:	eb45 0303 	adc.w	r3, r5, r3
 8003ed8:	607b      	str	r3, [r7, #4]
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	f04f 0300 	mov.w	r3, #0
 8003ee2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ee6:	4629      	mov	r1, r5
 8003ee8:	028b      	lsls	r3, r1, #10
 8003eea:	4621      	mov	r1, r4
 8003eec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ef0:	4621      	mov	r1, r4
 8003ef2:	028a      	lsls	r2, r1, #10
 8003ef4:	4610      	mov	r0, r2
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003efc:	2200      	movs	r2, #0
 8003efe:	61bb      	str	r3, [r7, #24]
 8003f00:	61fa      	str	r2, [r7, #28]
 8003f02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f06:	f7fc fdfd 	bl	8000b04 <__aeabi_uldivmod>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	4613      	mov	r3, r2
 8003f10:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003f14:	4b0d      	ldr	r3, [pc, #52]	@ (8003f4c <HAL_RCC_GetSysClockFreq+0x348>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	0f1b      	lsrs	r3, r3, #28
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8003f22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003f26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003f32:	e003      	b.n	8003f3c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f34:	4b06      	ldr	r3, [pc, #24]	@ (8003f50 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003f36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003f3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3798      	adds	r7, #152	@ 0x98
 8003f44:	46bd      	mov	sp, r7
 8003f46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f4a:	bf00      	nop
 8003f4c:	40023800 	.word	0x40023800
 8003f50:	00f42400 	.word	0x00f42400
 8003f54:	017d7840 	.word	0x017d7840

08003f58 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e28d      	b.n	8004486 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 8083 	beq.w	800407e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003f78:	4b94      	ldr	r3, [pc, #592]	@ (80041cc <HAL_RCC_OscConfig+0x274>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f003 030c 	and.w	r3, r3, #12
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	d019      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003f84:	4b91      	ldr	r3, [pc, #580]	@ (80041cc <HAL_RCC_OscConfig+0x274>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f003 030c 	and.w	r3, r3, #12
        || \
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d106      	bne.n	8003f9e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003f90:	4b8e      	ldr	r3, [pc, #568]	@ (80041cc <HAL_RCC_OscConfig+0x274>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f9c:	d00c      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f9e:	4b8b      	ldr	r3, [pc, #556]	@ (80041cc <HAL_RCC_OscConfig+0x274>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003fa6:	2b0c      	cmp	r3, #12
 8003fa8:	d112      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003faa:	4b88      	ldr	r3, [pc, #544]	@ (80041cc <HAL_RCC_OscConfig+0x274>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fb6:	d10b      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb8:	4b84      	ldr	r3, [pc, #528]	@ (80041cc <HAL_RCC_OscConfig+0x274>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d05b      	beq.n	800407c <HAL_RCC_OscConfig+0x124>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d157      	bne.n	800407c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e25a      	b.n	8004486 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fd8:	d106      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x90>
 8003fda:	4b7c      	ldr	r3, [pc, #496]	@ (80041cc <HAL_RCC_OscConfig+0x274>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a7b      	ldr	r2, [pc, #492]	@ (80041cc <HAL_RCC_OscConfig+0x274>)
 8003fe0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fe4:	6013      	str	r3, [r2, #0]
 8003fe6:	e01d      	b.n	8004024 <HAL_RCC_OscConfig+0xcc>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ff0:	d10c      	bne.n	800400c <HAL_RCC_OscConfig+0xb4>
 8003ff2:	4b76      	ldr	r3, [pc, #472]	@ (80041cc <HAL_RCC_OscConfig+0x274>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a75      	ldr	r2, [pc, #468]	@ (80041cc <HAL_RCC_OscConfig+0x274>)
 8003ff8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ffc:	6013      	str	r3, [r2, #0]
 8003ffe:	4b73      	ldr	r3, [pc, #460]	@ (80041cc <HAL_RCC_OscConfig+0x274>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a72      	ldr	r2, [pc, #456]	@ (80041cc <HAL_RCC_OscConfig+0x274>)
 8004004:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	e00b      	b.n	8004024 <HAL_RCC_OscConfig+0xcc>
 800400c:	4b6f      	ldr	r3, [pc, #444]	@ (80041cc <HAL_RCC_OscConfig+0x274>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a6e      	ldr	r2, [pc, #440]	@ (80041cc <HAL_RCC_OscConfig+0x274>)
 8004012:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004016:	6013      	str	r3, [r2, #0]
 8004018:	4b6c      	ldr	r3, [pc, #432]	@ (80041cc <HAL_RCC_OscConfig+0x274>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a6b      	ldr	r2, [pc, #428]	@ (80041cc <HAL_RCC_OscConfig+0x274>)
 800401e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d013      	beq.n	8004054 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402c:	f7ff f9fc 	bl	8003428 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004034:	f7ff f9f8 	bl	8003428 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b64      	cmp	r3, #100	@ 0x64
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e21f      	b.n	8004486 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004046:	4b61      	ldr	r3, [pc, #388]	@ (80041cc <HAL_RCC_OscConfig+0x274>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0f0      	beq.n	8004034 <HAL_RCC_OscConfig+0xdc>
 8004052:	e014      	b.n	800407e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004054:	f7ff f9e8 	bl	8003428 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800405c:	f7ff f9e4 	bl	8003428 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b64      	cmp	r3, #100	@ 0x64
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e20b      	b.n	8004486 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800406e:	4b57      	ldr	r3, [pc, #348]	@ (80041cc <HAL_RCC_OscConfig+0x274>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1f0      	bne.n	800405c <HAL_RCC_OscConfig+0x104>
 800407a:	e000      	b.n	800407e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800407c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d06f      	beq.n	800416a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800408a:	4b50      	ldr	r3, [pc, #320]	@ (80041cc <HAL_RCC_OscConfig+0x274>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 030c 	and.w	r3, r3, #12
 8004092:	2b00      	cmp	r3, #0
 8004094:	d017      	beq.n	80040c6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004096:	4b4d      	ldr	r3, [pc, #308]	@ (80041cc <HAL_RCC_OscConfig+0x274>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 030c 	and.w	r3, r3, #12
        || \
 800409e:	2b08      	cmp	r3, #8
 80040a0:	d105      	bne.n	80040ae <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80040a2:	4b4a      	ldr	r3, [pc, #296]	@ (80041cc <HAL_RCC_OscConfig+0x274>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00b      	beq.n	80040c6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ae:	4b47      	ldr	r3, [pc, #284]	@ (80041cc <HAL_RCC_OscConfig+0x274>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80040b6:	2b0c      	cmp	r3, #12
 80040b8:	d11c      	bne.n	80040f4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ba:	4b44      	ldr	r3, [pc, #272]	@ (80041cc <HAL_RCC_OscConfig+0x274>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d116      	bne.n	80040f4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040c6:	4b41      	ldr	r3, [pc, #260]	@ (80041cc <HAL_RCC_OscConfig+0x274>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d005      	beq.n	80040de <HAL_RCC_OscConfig+0x186>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d001      	beq.n	80040de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e1d3      	b.n	8004486 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040de:	4b3b      	ldr	r3, [pc, #236]	@ (80041cc <HAL_RCC_OscConfig+0x274>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	4937      	ldr	r1, [pc, #220]	@ (80041cc <HAL_RCC_OscConfig+0x274>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040f2:	e03a      	b.n	800416a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d020      	beq.n	800413e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040fc:	4b34      	ldr	r3, [pc, #208]	@ (80041d0 <HAL_RCC_OscConfig+0x278>)
 80040fe:	2201      	movs	r2, #1
 8004100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004102:	f7ff f991 	bl	8003428 <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004108:	e008      	b.n	800411c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800410a:	f7ff f98d 	bl	8003428 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e1b4      	b.n	8004486 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800411c:	4b2b      	ldr	r3, [pc, #172]	@ (80041cc <HAL_RCC_OscConfig+0x274>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0f0      	beq.n	800410a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004128:	4b28      	ldr	r3, [pc, #160]	@ (80041cc <HAL_RCC_OscConfig+0x274>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	4925      	ldr	r1, [pc, #148]	@ (80041cc <HAL_RCC_OscConfig+0x274>)
 8004138:	4313      	orrs	r3, r2
 800413a:	600b      	str	r3, [r1, #0]
 800413c:	e015      	b.n	800416a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800413e:	4b24      	ldr	r3, [pc, #144]	@ (80041d0 <HAL_RCC_OscConfig+0x278>)
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004144:	f7ff f970 	bl	8003428 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800414c:	f7ff f96c 	bl	8003428 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e193      	b.n	8004486 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800415e:	4b1b      	ldr	r3, [pc, #108]	@ (80041cc <HAL_RCC_OscConfig+0x274>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1f0      	bne.n	800414c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0308 	and.w	r3, r3, #8
 8004172:	2b00      	cmp	r3, #0
 8004174:	d036      	beq.n	80041e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d016      	beq.n	80041ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800417e:	4b15      	ldr	r3, [pc, #84]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 8004180:	2201      	movs	r2, #1
 8004182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004184:	f7ff f950 	bl	8003428 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800418c:	f7ff f94c 	bl	8003428 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e173      	b.n	8004486 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800419e:	4b0b      	ldr	r3, [pc, #44]	@ (80041cc <HAL_RCC_OscConfig+0x274>)
 80041a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0f0      	beq.n	800418c <HAL_RCC_OscConfig+0x234>
 80041aa:	e01b      	b.n	80041e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041ac:	4b09      	ldr	r3, [pc, #36]	@ (80041d4 <HAL_RCC_OscConfig+0x27c>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b2:	f7ff f939 	bl	8003428 <HAL_GetTick>
 80041b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041b8:	e00e      	b.n	80041d8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ba:	f7ff f935 	bl	8003428 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d907      	bls.n	80041d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e15c      	b.n	8004486 <HAL_RCC_OscConfig+0x52e>
 80041cc:	40023800 	.word	0x40023800
 80041d0:	42470000 	.word	0x42470000
 80041d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041d8:	4b8a      	ldr	r3, [pc, #552]	@ (8004404 <HAL_RCC_OscConfig+0x4ac>)
 80041da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1ea      	bne.n	80041ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 8097 	beq.w	8004320 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041f2:	2300      	movs	r3, #0
 80041f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041f6:	4b83      	ldr	r3, [pc, #524]	@ (8004404 <HAL_RCC_OscConfig+0x4ac>)
 80041f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10f      	bne.n	8004222 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004202:	2300      	movs	r3, #0
 8004204:	60bb      	str	r3, [r7, #8]
 8004206:	4b7f      	ldr	r3, [pc, #508]	@ (8004404 <HAL_RCC_OscConfig+0x4ac>)
 8004208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420a:	4a7e      	ldr	r2, [pc, #504]	@ (8004404 <HAL_RCC_OscConfig+0x4ac>)
 800420c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004210:	6413      	str	r3, [r2, #64]	@ 0x40
 8004212:	4b7c      	ldr	r3, [pc, #496]	@ (8004404 <HAL_RCC_OscConfig+0x4ac>)
 8004214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800421a:	60bb      	str	r3, [r7, #8]
 800421c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800421e:	2301      	movs	r3, #1
 8004220:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004222:	4b79      	ldr	r3, [pc, #484]	@ (8004408 <HAL_RCC_OscConfig+0x4b0>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800422a:	2b00      	cmp	r3, #0
 800422c:	d118      	bne.n	8004260 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800422e:	4b76      	ldr	r3, [pc, #472]	@ (8004408 <HAL_RCC_OscConfig+0x4b0>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a75      	ldr	r2, [pc, #468]	@ (8004408 <HAL_RCC_OscConfig+0x4b0>)
 8004234:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800423a:	f7ff f8f5 	bl	8003428 <HAL_GetTick>
 800423e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004240:	e008      	b.n	8004254 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004242:	f7ff f8f1 	bl	8003428 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d901      	bls.n	8004254 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e118      	b.n	8004486 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004254:	4b6c      	ldr	r3, [pc, #432]	@ (8004408 <HAL_RCC_OscConfig+0x4b0>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0f0      	beq.n	8004242 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d106      	bne.n	8004276 <HAL_RCC_OscConfig+0x31e>
 8004268:	4b66      	ldr	r3, [pc, #408]	@ (8004404 <HAL_RCC_OscConfig+0x4ac>)
 800426a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800426c:	4a65      	ldr	r2, [pc, #404]	@ (8004404 <HAL_RCC_OscConfig+0x4ac>)
 800426e:	f043 0301 	orr.w	r3, r3, #1
 8004272:	6713      	str	r3, [r2, #112]	@ 0x70
 8004274:	e01c      	b.n	80042b0 <HAL_RCC_OscConfig+0x358>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	2b05      	cmp	r3, #5
 800427c:	d10c      	bne.n	8004298 <HAL_RCC_OscConfig+0x340>
 800427e:	4b61      	ldr	r3, [pc, #388]	@ (8004404 <HAL_RCC_OscConfig+0x4ac>)
 8004280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004282:	4a60      	ldr	r2, [pc, #384]	@ (8004404 <HAL_RCC_OscConfig+0x4ac>)
 8004284:	f043 0304 	orr.w	r3, r3, #4
 8004288:	6713      	str	r3, [r2, #112]	@ 0x70
 800428a:	4b5e      	ldr	r3, [pc, #376]	@ (8004404 <HAL_RCC_OscConfig+0x4ac>)
 800428c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800428e:	4a5d      	ldr	r2, [pc, #372]	@ (8004404 <HAL_RCC_OscConfig+0x4ac>)
 8004290:	f043 0301 	orr.w	r3, r3, #1
 8004294:	6713      	str	r3, [r2, #112]	@ 0x70
 8004296:	e00b      	b.n	80042b0 <HAL_RCC_OscConfig+0x358>
 8004298:	4b5a      	ldr	r3, [pc, #360]	@ (8004404 <HAL_RCC_OscConfig+0x4ac>)
 800429a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800429c:	4a59      	ldr	r2, [pc, #356]	@ (8004404 <HAL_RCC_OscConfig+0x4ac>)
 800429e:	f023 0301 	bic.w	r3, r3, #1
 80042a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80042a4:	4b57      	ldr	r3, [pc, #348]	@ (8004404 <HAL_RCC_OscConfig+0x4ac>)
 80042a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042a8:	4a56      	ldr	r2, [pc, #344]	@ (8004404 <HAL_RCC_OscConfig+0x4ac>)
 80042aa:	f023 0304 	bic.w	r3, r3, #4
 80042ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d015      	beq.n	80042e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b8:	f7ff f8b6 	bl	8003428 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042be:	e00a      	b.n	80042d6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c0:	f7ff f8b2 	bl	8003428 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e0d7      	b.n	8004486 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042d6:	4b4b      	ldr	r3, [pc, #300]	@ (8004404 <HAL_RCC_OscConfig+0x4ac>)
 80042d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d0ee      	beq.n	80042c0 <HAL_RCC_OscConfig+0x368>
 80042e2:	e014      	b.n	800430e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e4:	f7ff f8a0 	bl	8003428 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ea:	e00a      	b.n	8004302 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ec:	f7ff f89c 	bl	8003428 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e0c1      	b.n	8004486 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004302:	4b40      	ldr	r3, [pc, #256]	@ (8004404 <HAL_RCC_OscConfig+0x4ac>)
 8004304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1ee      	bne.n	80042ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800430e:	7dfb      	ldrb	r3, [r7, #23]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d105      	bne.n	8004320 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004314:	4b3b      	ldr	r3, [pc, #236]	@ (8004404 <HAL_RCC_OscConfig+0x4ac>)
 8004316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004318:	4a3a      	ldr	r2, [pc, #232]	@ (8004404 <HAL_RCC_OscConfig+0x4ac>)
 800431a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800431e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 80ad 	beq.w	8004484 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800432a:	4b36      	ldr	r3, [pc, #216]	@ (8004404 <HAL_RCC_OscConfig+0x4ac>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 030c 	and.w	r3, r3, #12
 8004332:	2b08      	cmp	r3, #8
 8004334:	d060      	beq.n	80043f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	2b02      	cmp	r3, #2
 800433c:	d145      	bne.n	80043ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800433e:	4b33      	ldr	r3, [pc, #204]	@ (800440c <HAL_RCC_OscConfig+0x4b4>)
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004344:	f7ff f870 	bl	8003428 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800434c:	f7ff f86c 	bl	8003428 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e093      	b.n	8004486 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800435e:	4b29      	ldr	r3, [pc, #164]	@ (8004404 <HAL_RCC_OscConfig+0x4ac>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f0      	bne.n	800434c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69da      	ldr	r2, [r3, #28]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004378:	019b      	lsls	r3, r3, #6
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004380:	085b      	lsrs	r3, r3, #1
 8004382:	3b01      	subs	r3, #1
 8004384:	041b      	lsls	r3, r3, #16
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438c:	061b      	lsls	r3, r3, #24
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004394:	071b      	lsls	r3, r3, #28
 8004396:	491b      	ldr	r1, [pc, #108]	@ (8004404 <HAL_RCC_OscConfig+0x4ac>)
 8004398:	4313      	orrs	r3, r2
 800439a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800439c:	4b1b      	ldr	r3, [pc, #108]	@ (800440c <HAL_RCC_OscConfig+0x4b4>)
 800439e:	2201      	movs	r2, #1
 80043a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a2:	f7ff f841 	bl	8003428 <HAL_GetTick>
 80043a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043a8:	e008      	b.n	80043bc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043aa:	f7ff f83d 	bl	8003428 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e064      	b.n	8004486 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043bc:	4b11      	ldr	r3, [pc, #68]	@ (8004404 <HAL_RCC_OscConfig+0x4ac>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0f0      	beq.n	80043aa <HAL_RCC_OscConfig+0x452>
 80043c8:	e05c      	b.n	8004484 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ca:	4b10      	ldr	r3, [pc, #64]	@ (800440c <HAL_RCC_OscConfig+0x4b4>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d0:	f7ff f82a 	bl	8003428 <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d8:	f7ff f826 	bl	8003428 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e04d      	b.n	8004486 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ea:	4b06      	ldr	r3, [pc, #24]	@ (8004404 <HAL_RCC_OscConfig+0x4ac>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1f0      	bne.n	80043d8 <HAL_RCC_OscConfig+0x480>
 80043f6:	e045      	b.n	8004484 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d107      	bne.n	8004410 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e040      	b.n	8004486 <HAL_RCC_OscConfig+0x52e>
 8004404:	40023800 	.word	0x40023800
 8004408:	40007000 	.word	0x40007000
 800440c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004410:	4b1f      	ldr	r3, [pc, #124]	@ (8004490 <HAL_RCC_OscConfig+0x538>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d030      	beq.n	8004480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004428:	429a      	cmp	r2, r3
 800442a:	d129      	bne.n	8004480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004436:	429a      	cmp	r2, r3
 8004438:	d122      	bne.n	8004480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004440:	4013      	ands	r3, r2
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004446:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004448:	4293      	cmp	r3, r2
 800444a:	d119      	bne.n	8004480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004456:	085b      	lsrs	r3, r3, #1
 8004458:	3b01      	subs	r3, #1
 800445a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800445c:	429a      	cmp	r2, r3
 800445e:	d10f      	bne.n	8004480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800446c:	429a      	cmp	r2, r3
 800446e:	d107      	bne.n	8004480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800447c:	429a      	cmp	r2, r3
 800447e:	d001      	beq.n	8004484 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e000      	b.n	8004486 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	40023800 	.word	0x40023800

08004494 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e041      	b.n	800452a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d106      	bne.n	80044c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7fe fa70 	bl	80029a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3304      	adds	r3, #4
 80044d0:	4619      	mov	r1, r3
 80044d2:	4610      	mov	r0, r2
 80044d4:	f000 fa16 	bl	8004904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b084      	sub	sp, #16
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d020      	beq.n	8004596 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d01b      	beq.n	8004596 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f06f 0202 	mvn.w	r2, #2
 8004566:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	f003 0303 	and.w	r3, r3, #3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f9a3 	bl	80048c8 <HAL_TIM_IC_CaptureCallback>
 8004582:	e005      	b.n	8004590 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f995 	bl	80048b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f9a6 	bl	80048dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b00      	cmp	r3, #0
 800459e:	d020      	beq.n	80045e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f003 0304 	and.w	r3, r3, #4
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d01b      	beq.n	80045e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f06f 0204 	mvn.w	r2, #4
 80045b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f97d 	bl	80048c8 <HAL_TIM_IC_CaptureCallback>
 80045ce:	e005      	b.n	80045dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f96f 	bl	80048b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f980 	bl	80048dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	f003 0308 	and.w	r3, r3, #8
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d020      	beq.n	800462e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d01b      	beq.n	800462e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f06f 0208 	mvn.w	r2, #8
 80045fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2204      	movs	r2, #4
 8004604:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	f003 0303 	and.w	r3, r3, #3
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f957 	bl	80048c8 <HAL_TIM_IC_CaptureCallback>
 800461a:	e005      	b.n	8004628 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 f949 	bl	80048b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f95a 	bl	80048dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	f003 0310 	and.w	r3, r3, #16
 8004634:	2b00      	cmp	r3, #0
 8004636:	d020      	beq.n	800467a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f003 0310 	and.w	r3, r3, #16
 800463e:	2b00      	cmp	r3, #0
 8004640:	d01b      	beq.n	800467a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f06f 0210 	mvn.w	r2, #16
 800464a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2208      	movs	r2, #8
 8004650:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800465c:	2b00      	cmp	r3, #0
 800465e:	d003      	beq.n	8004668 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 f931 	bl	80048c8 <HAL_TIM_IC_CaptureCallback>
 8004666:	e005      	b.n	8004674 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f923 	bl	80048b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f934 	bl	80048dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00c      	beq.n	800469e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d007      	beq.n	800469e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f06f 0201 	mvn.w	r2, #1
 8004696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f901 	bl	80048a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00c      	beq.n	80046c2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d007      	beq.n	80046c2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80046ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 faed 	bl	8004c9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00c      	beq.n	80046e6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d007      	beq.n	80046e6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80046de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f905 	bl	80048f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	f003 0320 	and.w	r3, r3, #32
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00c      	beq.n	800470a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f003 0320 	and.w	r3, r3, #32
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d007      	beq.n	800470a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f06f 0220 	mvn.w	r2, #32
 8004702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 fabf 	bl	8004c88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800470a:	bf00      	nop
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b084      	sub	sp, #16
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800471c:	2300      	movs	r3, #0
 800471e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004726:	2b01      	cmp	r3, #1
 8004728:	d101      	bne.n	800472e <HAL_TIM_ConfigClockSource+0x1c>
 800472a:	2302      	movs	r3, #2
 800472c:	e0b4      	b.n	8004898 <HAL_TIM_ConfigClockSource+0x186>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2202      	movs	r2, #2
 800473a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800474c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004754:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004766:	d03e      	beq.n	80047e6 <HAL_TIM_ConfigClockSource+0xd4>
 8004768:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800476c:	f200 8087 	bhi.w	800487e <HAL_TIM_ConfigClockSource+0x16c>
 8004770:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004774:	f000 8086 	beq.w	8004884 <HAL_TIM_ConfigClockSource+0x172>
 8004778:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800477c:	d87f      	bhi.n	800487e <HAL_TIM_ConfigClockSource+0x16c>
 800477e:	2b70      	cmp	r3, #112	@ 0x70
 8004780:	d01a      	beq.n	80047b8 <HAL_TIM_ConfigClockSource+0xa6>
 8004782:	2b70      	cmp	r3, #112	@ 0x70
 8004784:	d87b      	bhi.n	800487e <HAL_TIM_ConfigClockSource+0x16c>
 8004786:	2b60      	cmp	r3, #96	@ 0x60
 8004788:	d050      	beq.n	800482c <HAL_TIM_ConfigClockSource+0x11a>
 800478a:	2b60      	cmp	r3, #96	@ 0x60
 800478c:	d877      	bhi.n	800487e <HAL_TIM_ConfigClockSource+0x16c>
 800478e:	2b50      	cmp	r3, #80	@ 0x50
 8004790:	d03c      	beq.n	800480c <HAL_TIM_ConfigClockSource+0xfa>
 8004792:	2b50      	cmp	r3, #80	@ 0x50
 8004794:	d873      	bhi.n	800487e <HAL_TIM_ConfigClockSource+0x16c>
 8004796:	2b40      	cmp	r3, #64	@ 0x40
 8004798:	d058      	beq.n	800484c <HAL_TIM_ConfigClockSource+0x13a>
 800479a:	2b40      	cmp	r3, #64	@ 0x40
 800479c:	d86f      	bhi.n	800487e <HAL_TIM_ConfigClockSource+0x16c>
 800479e:	2b30      	cmp	r3, #48	@ 0x30
 80047a0:	d064      	beq.n	800486c <HAL_TIM_ConfigClockSource+0x15a>
 80047a2:	2b30      	cmp	r3, #48	@ 0x30
 80047a4:	d86b      	bhi.n	800487e <HAL_TIM_ConfigClockSource+0x16c>
 80047a6:	2b20      	cmp	r3, #32
 80047a8:	d060      	beq.n	800486c <HAL_TIM_ConfigClockSource+0x15a>
 80047aa:	2b20      	cmp	r3, #32
 80047ac:	d867      	bhi.n	800487e <HAL_TIM_ConfigClockSource+0x16c>
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d05c      	beq.n	800486c <HAL_TIM_ConfigClockSource+0x15a>
 80047b2:	2b10      	cmp	r3, #16
 80047b4:	d05a      	beq.n	800486c <HAL_TIM_ConfigClockSource+0x15a>
 80047b6:	e062      	b.n	800487e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047c8:	f000 f9c2 	bl	8004b50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80047da:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	609a      	str	r2, [r3, #8]
      break;
 80047e4:	e04f      	b.n	8004886 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047f6:	f000 f9ab 	bl	8004b50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004808:	609a      	str	r2, [r3, #8]
      break;
 800480a:	e03c      	b.n	8004886 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004818:	461a      	mov	r2, r3
 800481a:	f000 f91f 	bl	8004a5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2150      	movs	r1, #80	@ 0x50
 8004824:	4618      	mov	r0, r3
 8004826:	f000 f978 	bl	8004b1a <TIM_ITRx_SetConfig>
      break;
 800482a:	e02c      	b.n	8004886 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004838:	461a      	mov	r2, r3
 800483a:	f000 f93e 	bl	8004aba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2160      	movs	r1, #96	@ 0x60
 8004844:	4618      	mov	r0, r3
 8004846:	f000 f968 	bl	8004b1a <TIM_ITRx_SetConfig>
      break;
 800484a:	e01c      	b.n	8004886 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004858:	461a      	mov	r2, r3
 800485a:	f000 f8ff 	bl	8004a5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2140      	movs	r1, #64	@ 0x40
 8004864:	4618      	mov	r0, r3
 8004866:	f000 f958 	bl	8004b1a <TIM_ITRx_SetConfig>
      break;
 800486a:	e00c      	b.n	8004886 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4619      	mov	r1, r3
 8004876:	4610      	mov	r0, r2
 8004878:	f000 f94f 	bl	8004b1a <TIM_ITRx_SetConfig>
      break;
 800487c:	e003      	b.n	8004886 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	73fb      	strb	r3, [r7, #15]
      break;
 8004882:	e000      	b.n	8004886 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004884:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004896:	7bfb      	ldrb	r3, [r7, #15]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a46      	ldr	r2, [pc, #280]	@ (8004a30 <TIM_Base_SetConfig+0x12c>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d013      	beq.n	8004944 <TIM_Base_SetConfig+0x40>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004922:	d00f      	beq.n	8004944 <TIM_Base_SetConfig+0x40>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a43      	ldr	r2, [pc, #268]	@ (8004a34 <TIM_Base_SetConfig+0x130>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d00b      	beq.n	8004944 <TIM_Base_SetConfig+0x40>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a42      	ldr	r2, [pc, #264]	@ (8004a38 <TIM_Base_SetConfig+0x134>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d007      	beq.n	8004944 <TIM_Base_SetConfig+0x40>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a41      	ldr	r2, [pc, #260]	@ (8004a3c <TIM_Base_SetConfig+0x138>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d003      	beq.n	8004944 <TIM_Base_SetConfig+0x40>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a40      	ldr	r2, [pc, #256]	@ (8004a40 <TIM_Base_SetConfig+0x13c>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d108      	bne.n	8004956 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800494a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	4313      	orrs	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a35      	ldr	r2, [pc, #212]	@ (8004a30 <TIM_Base_SetConfig+0x12c>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d02b      	beq.n	80049b6 <TIM_Base_SetConfig+0xb2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004964:	d027      	beq.n	80049b6 <TIM_Base_SetConfig+0xb2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a32      	ldr	r2, [pc, #200]	@ (8004a34 <TIM_Base_SetConfig+0x130>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d023      	beq.n	80049b6 <TIM_Base_SetConfig+0xb2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a31      	ldr	r2, [pc, #196]	@ (8004a38 <TIM_Base_SetConfig+0x134>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d01f      	beq.n	80049b6 <TIM_Base_SetConfig+0xb2>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a30      	ldr	r2, [pc, #192]	@ (8004a3c <TIM_Base_SetConfig+0x138>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d01b      	beq.n	80049b6 <TIM_Base_SetConfig+0xb2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a2f      	ldr	r2, [pc, #188]	@ (8004a40 <TIM_Base_SetConfig+0x13c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d017      	beq.n	80049b6 <TIM_Base_SetConfig+0xb2>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a2e      	ldr	r2, [pc, #184]	@ (8004a44 <TIM_Base_SetConfig+0x140>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d013      	beq.n	80049b6 <TIM_Base_SetConfig+0xb2>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a2d      	ldr	r2, [pc, #180]	@ (8004a48 <TIM_Base_SetConfig+0x144>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d00f      	beq.n	80049b6 <TIM_Base_SetConfig+0xb2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a2c      	ldr	r2, [pc, #176]	@ (8004a4c <TIM_Base_SetConfig+0x148>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00b      	beq.n	80049b6 <TIM_Base_SetConfig+0xb2>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a2b      	ldr	r2, [pc, #172]	@ (8004a50 <TIM_Base_SetConfig+0x14c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d007      	beq.n	80049b6 <TIM_Base_SetConfig+0xb2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a2a      	ldr	r2, [pc, #168]	@ (8004a54 <TIM_Base_SetConfig+0x150>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d003      	beq.n	80049b6 <TIM_Base_SetConfig+0xb2>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a29      	ldr	r2, [pc, #164]	@ (8004a58 <TIM_Base_SetConfig+0x154>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d108      	bne.n	80049c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a10      	ldr	r2, [pc, #64]	@ (8004a30 <TIM_Base_SetConfig+0x12c>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d003      	beq.n	80049fc <TIM_Base_SetConfig+0xf8>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a12      	ldr	r2, [pc, #72]	@ (8004a40 <TIM_Base_SetConfig+0x13c>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d103      	bne.n	8004a04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	691a      	ldr	r2, [r3, #16]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d105      	bne.n	8004a22 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f023 0201 	bic.w	r2, r3, #1
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	611a      	str	r2, [r3, #16]
  }
}
 8004a22:	bf00      	nop
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	40010000 	.word	0x40010000
 8004a34:	40000400 	.word	0x40000400
 8004a38:	40000800 	.word	0x40000800
 8004a3c:	40000c00 	.word	0x40000c00
 8004a40:	40010400 	.word	0x40010400
 8004a44:	40014000 	.word	0x40014000
 8004a48:	40014400 	.word	0x40014400
 8004a4c:	40014800 	.word	0x40014800
 8004a50:	40001800 	.word	0x40001800
 8004a54:	40001c00 	.word	0x40001c00
 8004a58:	40002000 	.word	0x40002000

08004a5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	f023 0201 	bic.w	r2, r3, #1
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	011b      	lsls	r3, r3, #4
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f023 030a 	bic.w	r3, r3, #10
 8004a98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	621a      	str	r2, [r3, #32]
}
 8004aae:	bf00      	nop
 8004ab0:	371c      	adds	r7, #28
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b087      	sub	sp, #28
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	60f8      	str	r0, [r7, #12]
 8004ac2:	60b9      	str	r1, [r7, #8]
 8004ac4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	f023 0210 	bic.w	r2, r3, #16
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ae4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	031b      	lsls	r3, r3, #12
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004af6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	011b      	lsls	r3, r3, #4
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	621a      	str	r2, [r3, #32]
}
 8004b0e:	bf00      	nop
 8004b10:	371c      	adds	r7, #28
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b085      	sub	sp, #20
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
 8004b22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	f043 0307 	orr.w	r3, r3, #7
 8004b3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	609a      	str	r2, [r3, #8]
}
 8004b44:	bf00      	nop
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
 8004b5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	021a      	lsls	r2, r3, #8
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	431a      	orrs	r2, r3
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	609a      	str	r2, [r3, #8]
}
 8004b84:	bf00      	nop
 8004b86:	371c      	adds	r7, #28
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d101      	bne.n	8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	e05a      	b.n	8004c5e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a21      	ldr	r2, [pc, #132]	@ (8004c6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d022      	beq.n	8004c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bf4:	d01d      	beq.n	8004c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a1d      	ldr	r2, [pc, #116]	@ (8004c70 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d018      	beq.n	8004c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a1b      	ldr	r2, [pc, #108]	@ (8004c74 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d013      	beq.n	8004c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a1a      	ldr	r2, [pc, #104]	@ (8004c78 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d00e      	beq.n	8004c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a18      	ldr	r2, [pc, #96]	@ (8004c7c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d009      	beq.n	8004c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a17      	ldr	r2, [pc, #92]	@ (8004c80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d004      	beq.n	8004c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a15      	ldr	r2, [pc, #84]	@ (8004c84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d10c      	bne.n	8004c4c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40010000 	.word	0x40010000
 8004c70:	40000400 	.word	0x40000400
 8004c74:	40000800 	.word	0x40000800
 8004c78:	40000c00 	.word	0x40000c00
 8004c7c:	40010400 	.word	0x40010400
 8004c80:	40014000 	.word	0x40014000
 8004c84:	40001800 	.word	0x40001800

08004c88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <memset>:
 8004cb0:	4402      	add	r2, r0
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d100      	bne.n	8004cba <memset+0xa>
 8004cb8:	4770      	bx	lr
 8004cba:	f803 1b01 	strb.w	r1, [r3], #1
 8004cbe:	e7f9      	b.n	8004cb4 <memset+0x4>

08004cc0 <__libc_init_array>:
 8004cc0:	b570      	push	{r4, r5, r6, lr}
 8004cc2:	4d0d      	ldr	r5, [pc, #52]	@ (8004cf8 <__libc_init_array+0x38>)
 8004cc4:	4c0d      	ldr	r4, [pc, #52]	@ (8004cfc <__libc_init_array+0x3c>)
 8004cc6:	1b64      	subs	r4, r4, r5
 8004cc8:	10a4      	asrs	r4, r4, #2
 8004cca:	2600      	movs	r6, #0
 8004ccc:	42a6      	cmp	r6, r4
 8004cce:	d109      	bne.n	8004ce4 <__libc_init_array+0x24>
 8004cd0:	4d0b      	ldr	r5, [pc, #44]	@ (8004d00 <__libc_init_array+0x40>)
 8004cd2:	4c0c      	ldr	r4, [pc, #48]	@ (8004d04 <__libc_init_array+0x44>)
 8004cd4:	f000 f826 	bl	8004d24 <_init>
 8004cd8:	1b64      	subs	r4, r4, r5
 8004cda:	10a4      	asrs	r4, r4, #2
 8004cdc:	2600      	movs	r6, #0
 8004cde:	42a6      	cmp	r6, r4
 8004ce0:	d105      	bne.n	8004cee <__libc_init_array+0x2e>
 8004ce2:	bd70      	pop	{r4, r5, r6, pc}
 8004ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ce8:	4798      	blx	r3
 8004cea:	3601      	adds	r6, #1
 8004cec:	e7ee      	b.n	8004ccc <__libc_init_array+0xc>
 8004cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cf2:	4798      	blx	r3
 8004cf4:	3601      	adds	r6, #1
 8004cf6:	e7f2      	b.n	8004cde <__libc_init_array+0x1e>
 8004cf8:	08004e08 	.word	0x08004e08
 8004cfc:	08004e08 	.word	0x08004e08
 8004d00:	08004e08 	.word	0x08004e08
 8004d04:	08004e0c 	.word	0x08004e0c

08004d08 <memcpy>:
 8004d08:	440a      	add	r2, r1
 8004d0a:	4291      	cmp	r1, r2
 8004d0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d10:	d100      	bne.n	8004d14 <memcpy+0xc>
 8004d12:	4770      	bx	lr
 8004d14:	b510      	push	{r4, lr}
 8004d16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d1e:	4291      	cmp	r1, r2
 8004d20:	d1f9      	bne.n	8004d16 <memcpy+0xe>
 8004d22:	bd10      	pop	{r4, pc}

08004d24 <_init>:
 8004d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d26:	bf00      	nop
 8004d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d2a:	bc08      	pop	{r3}
 8004d2c:	469e      	mov	lr, r3
 8004d2e:	4770      	bx	lr

08004d30 <_fini>:
 8004d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d32:	bf00      	nop
 8004d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d36:	bc08      	pop	{r3}
 8004d38:	469e      	mov	lr, r3
 8004d3a:	4770      	bx	lr
